
STM32_Neo6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003ca8  08003ca8  00013ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec0  08003ec0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec0  08003ec0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000078  08003f3c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003f3c  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008227  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001975  00000000  00000000  000282c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173c6  00000000  00000000  0002a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c0a  00000000  00000000  00041cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d0c  00000000  00000000  000498c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc5d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000cc628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c8c 	.word	0x08003c8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003c8c 	.word	0x08003c8c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_frsub>:
 8000a34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	e002      	b.n	8000a40 <__addsf3>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fsub>:
 8000a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a40 <__addsf3>:
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	bf1f      	itttt	ne
 8000a44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a48:	ea92 0f03 	teqne	r2, r3
 8000a4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a54:	d06a      	beq.n	8000b2c <__addsf3+0xec>
 8000a56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a5e:	bfc1      	itttt	gt
 8000a60:	18d2      	addgt	r2, r2, r3
 8000a62:	4041      	eorgt	r1, r0
 8000a64:	4048      	eorgt	r0, r1
 8000a66:	4041      	eorgt	r1, r0
 8000a68:	bfb8      	it	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	2b19      	cmp	r3, #25
 8000a6e:	bf88      	it	hi
 8000a70:	4770      	bxhi	lr
 8000a72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a8e:	bf18      	it	ne
 8000a90:	4249      	negne	r1, r1
 8000a92:	ea92 0f03 	teq	r2, r3
 8000a96:	d03f      	beq.n	8000b18 <__addsf3+0xd8>
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa0:	eb10 000c 	adds.w	r0, r0, ip
 8000aa4:	f1c3 0320 	rsb	r3, r3, #32
 8000aa8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	d502      	bpl.n	8000ab8 <__addsf3+0x78>
 8000ab2:	4249      	negs	r1, r1
 8000ab4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000abc:	d313      	bcc.n	8000ae6 <__addsf3+0xa6>
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac2:	d306      	bcc.n	8000ad2 <__addsf3+0x92>
 8000ac4:	0840      	lsrs	r0, r0, #1
 8000ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aca:	f102 0201 	add.w	r2, r2, #1
 8000ace:	2afe      	cmp	r2, #254	; 0xfe
 8000ad0:	d251      	bcs.n	8000b76 <__addsf3+0x136>
 8000ad2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ada:	bf08      	it	eq
 8000adc:	f020 0001 	biceq.w	r0, r0, #1
 8000ae0:	ea40 0003 	orr.w	r0, r0, r3
 8000ae4:	4770      	bx	lr
 8000ae6:	0049      	lsls	r1, r1, #1
 8000ae8:	eb40 0000 	adc.w	r0, r0, r0
 8000aec:	3a01      	subs	r2, #1
 8000aee:	bf28      	it	cs
 8000af0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000af4:	d2ed      	bcs.n	8000ad2 <__addsf3+0x92>
 8000af6:	fab0 fc80 	clz	ip, r0
 8000afa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000afe:	ebb2 020c 	subs.w	r2, r2, ip
 8000b02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b06:	bfaa      	itet	ge
 8000b08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b0c:	4252      	neglt	r2, r2
 8000b0e:	4318      	orrge	r0, r3
 8000b10:	bfbc      	itt	lt
 8000b12:	40d0      	lsrlt	r0, r2
 8000b14:	4318      	orrlt	r0, r3
 8000b16:	4770      	bx	lr
 8000b18:	f092 0f00 	teq	r2, #0
 8000b1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b20:	bf06      	itte	eq
 8000b22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b26:	3201      	addeq	r2, #1
 8000b28:	3b01      	subne	r3, #1
 8000b2a:	e7b5      	b.n	8000a98 <__addsf3+0x58>
 8000b2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3a:	d021      	beq.n	8000b80 <__addsf3+0x140>
 8000b3c:	ea92 0f03 	teq	r2, r3
 8000b40:	d004      	beq.n	8000b4c <__addsf3+0x10c>
 8000b42:	f092 0f00 	teq	r2, #0
 8000b46:	bf08      	it	eq
 8000b48:	4608      	moveq	r0, r1
 8000b4a:	4770      	bx	lr
 8000b4c:	ea90 0f01 	teq	r0, r1
 8000b50:	bf1c      	itt	ne
 8000b52:	2000      	movne	r0, #0
 8000b54:	4770      	bxne	lr
 8000b56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b5a:	d104      	bne.n	8000b66 <__addsf3+0x126>
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b6a:	bf3c      	itt	cc
 8000b6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bxcc	lr
 8000b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b84:	bf16      	itet	ne
 8000b86:	4608      	movne	r0, r1
 8000b88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b8c:	4601      	movne	r1, r0
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	bf06      	itte	eq
 8000b92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b96:	ea90 0f01 	teqeq	r0, r1
 8000b9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_ui2f>:
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e004      	b.n	8000bb0 <__aeabi_i2f+0x8>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_i2f>:
 8000ba8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	bf48      	it	mi
 8000bae:	4240      	negmi	r0, r0
 8000bb0:	ea5f 0c00 	movs.w	ip, r0
 8000bb4:	bf08      	it	eq
 8000bb6:	4770      	bxeq	lr
 8000bb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	e01c      	b.n	8000bfe <__aeabi_l2f+0x2a>

08000bc4 <__aeabi_ul2f>:
 8000bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e00a      	b.n	8000be8 <__aeabi_l2f+0x14>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_l2f>:
 8000bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd8:	bf08      	it	eq
 8000bda:	4770      	bxeq	lr
 8000bdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__aeabi_l2f+0x14>
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	ea5f 0c01 	movs.w	ip, r1
 8000bec:	bf02      	ittt	eq
 8000bee:	4684      	moveq	ip, r0
 8000bf0:	4601      	moveq	r1, r0
 8000bf2:	2000      	moveq	r0, #0
 8000bf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c02:	fabc f28c 	clz	r2, ip
 8000c06:	3a08      	subs	r2, #8
 8000c08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c0c:	db10      	blt.n	8000c30 <__aeabi_l2f+0x5c>
 8000c0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c12:	4463      	add	r3, ip
 8000c14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c20:	fa20 f202 	lsr.w	r2, r0, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f102 0220 	add.w	r2, r2, #32
 8000c34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c40:	fa21 f202 	lsr.w	r2, r1, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_fmul>:
 8000c50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c58:	bf1e      	ittt	ne
 8000c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5e:	ea92 0f0c 	teqne	r2, ip
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d06f      	beq.n	8000d48 <__aeabi_fmul+0xf8>
 8000c68:	441a      	add	r2, r3
 8000c6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c6e:	0240      	lsls	r0, r0, #9
 8000c70:	bf18      	it	ne
 8000c72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c76:	d01e      	beq.n	8000cb6 <__aeabi_fmul+0x66>
 8000c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c84:	fba0 3101 	umull	r3, r1, r0, r1
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c90:	bf3e      	ittt	cc
 8000c92:	0049      	lslcc	r1, r1, #1
 8000c94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c98:	005b      	lslcc	r3, r3, #1
 8000c9a:	ea40 0001 	orr.w	r0, r0, r1
 8000c9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ca2:	2afd      	cmp	r2, #253	; 0xfd
 8000ca4:	d81d      	bhi.n	8000ce2 <__aeabi_fmul+0x92>
 8000ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cbe:	bf08      	it	eq
 8000cc0:	0249      	lsleq	r1, r1, #9
 8000cc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cca:	3a7f      	subs	r2, #127	; 0x7f
 8000ccc:	bfc2      	ittt	gt
 8000cce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd6:	4770      	bxgt	lr
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	dc5d      	bgt.n	8000da0 <__aeabi_fmul+0x150>
 8000ce4:	f112 0f19 	cmn.w	r2, #25
 8000ce8:	bfdc      	itt	le
 8000cea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cee:	4770      	bxle	lr
 8000cf0:	f1c2 0200 	rsb	r2, r2, #0
 8000cf4:	0041      	lsls	r1, r0, #1
 8000cf6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cfa:	f1c2 0220 	rsb	r2, r2, #32
 8000cfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d06:	f140 0000 	adc.w	r0, r0, #0
 8000d0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d0e:	bf08      	it	eq
 8000d10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d14:	4770      	bx	lr
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0040      	lsleq	r0, r0, #1
 8000d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d26:	3a01      	subeq	r2, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xce>
 8000d2a:	ea40 000c 	orr.w	r0, r0, ip
 8000d2e:	f093 0f00 	teq	r3, #0
 8000d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0049      	lsleq	r1, r1, #1
 8000d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d3e:	3b01      	subeq	r3, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xe6>
 8000d42:	ea41 010c 	orr.w	r1, r1, ip
 8000d46:	e78f      	b.n	8000c68 <__aeabi_fmul+0x18>
 8000d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	bf18      	it	ne
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d00a      	beq.n	8000d6e <__aeabi_fmul+0x11e>
 8000d58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d5c:	bf18      	it	ne
 8000d5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	d1d8      	bne.n	8000d16 <__aeabi_fmul+0xc6>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	bf17      	itett	ne
 8000d74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d78:	4608      	moveq	r0, r1
 8000d7a:	f091 0f00 	teqne	r1, #0
 8000d7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d82:	d014      	beq.n	8000dae <__aeabi_fmul+0x15e>
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	d101      	bne.n	8000d8e <__aeabi_fmul+0x13e>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d10f      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d8e:	ea93 0f0c 	teq	r3, ip
 8000d92:	d103      	bne.n	8000d9c <__aeabi_fmul+0x14c>
 8000d94:	024b      	lsls	r3, r1, #9
 8000d96:	bf18      	it	ne
 8000d98:	4608      	movne	r0, r1
 8000d9a:	d108      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fdiv>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d069      	beq.n	8000ea4 <__aeabi_fdiv+0xec>
 8000dd0:	eba2 0203 	sub.w	r2, r2, r3
 8000dd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dde:	d037      	beq.n	8000e50 <__aeabi_fdiv+0x98>
 8000de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf38      	it	cc
 8000df4:	005b      	lslcc	r3, r3, #1
 8000df6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	bf24      	itt	cs
 8000e02:	1a5b      	subcs	r3, r3, r1
 8000e04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e0c:	bf24      	itt	cs
 8000e0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e1a:	bf24      	itt	cs
 8000e1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e28:	bf24      	itt	cs
 8000e2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e3a:	d1e0      	bne.n	8000dfe <__aeabi_fdiv+0x46>
 8000e3c:	2afd      	cmp	r2, #253	; 0xfd
 8000e3e:	f63f af50 	bhi.w	8000ce2 <__aeabi_fmul+0x92>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e58:	327f      	adds	r2, #127	; 0x7f
 8000e5a:	bfc2      	ittt	gt
 8000e5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e64:	4770      	bxgt	lr
 8000e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	3a01      	subs	r2, #1
 8000e70:	e737      	b.n	8000ce2 <__aeabi_fmul+0x92>
 8000e72:	f092 0f00 	teq	r2, #0
 8000e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0040      	lsleq	r0, r0, #1
 8000e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e82:	3a01      	subeq	r2, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xc2>
 8000e86:	ea40 000c 	orr.w	r0, r0, ip
 8000e8a:	f093 0f00 	teq	r3, #0
 8000e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0049      	lsleq	r1, r1, #1
 8000e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9a:	3b01      	subeq	r3, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xda>
 8000e9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ea2:	e795      	b.n	8000dd0 <__aeabi_fdiv+0x18>
 8000ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d108      	bne.n	8000ec0 <__aeabi_fdiv+0x108>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	f47f af7d 	bne.w	8000dae <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	f47f af70 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e776      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ec0:	ea93 0f0c 	teq	r3, ip
 8000ec4:	d104      	bne.n	8000ed0 <__aeabi_fdiv+0x118>
 8000ec6:	024b      	lsls	r3, r1, #9
 8000ec8:	f43f af4c 	beq.w	8000d64 <__aeabi_fmul+0x114>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e76e      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1ca      	bne.n	8000e72 <__aeabi_fdiv+0xba>
 8000edc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee0:	f47f af5c 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ee4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee8:	f47f af3c 	bne.w	8000d64 <__aeabi_fmul+0x114>
 8000eec:	e75f      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2iz>:
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30f      	bcc.n	8000f1a <__aeabi_f2iz+0x2a>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_f2iz+0x30>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f10:	fa23 f002 	lsr.w	r0, r3, r2
 8000f14:	bf18      	it	ne
 8000f16:	4240      	negne	r0, r0
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2iz+0x3a>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d105      	bne.n	8000f36 <__aeabi_f2iz+0x46>
 8000f2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2e:	bf08      	it	eq
 8000f30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr

08000f3c <Convert>:

#include "ST47_Neo6M.h"
GPS_Struct gps;

double Convert(float degMin)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	double min = 0.0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double decDeg = 0.0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//get the minutes, fmod() requires double
	min = fmod((double)degMin, 100.0);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fa61 	bl	8000424 <__aeabi_f2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <Convert+0x8c>)
 8000f68:	f002 fd48 	bl	80039fc <fmod>
 8000f6c:	e9c7 0104 	strd	r0, r1, [r7, #16]

	//rebuild coordinates in decimal degrees
	degMin = (int) ( degMin / 100 );
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <Convert+0x90>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff20 	bl	8000db8 <__aeabi_fdiv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffb8 	bl	8000ef0 <__aeabi_f2iz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe10 	bl	8000ba8 <__aeabi_i2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
	decDeg = degMin + ( min / 60 );
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fa49 	bl	8000424 <__aeabi_f2d>
 8000f92:	4604      	mov	r4, r0
 8000f94:	460d      	mov	r5, r1
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <Convert+0x94>)
 8000f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa0:	f7ff fbc2 	bl	8000728 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4620      	mov	r0, r4
 8000faa:	4629      	mov	r1, r5
 8000fac:	f7ff f8dc 	bl	8000168 <__adddf3>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decDeg;
 8000fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	42c80000 	.word	0x42c80000
 8000fd0:	404e0000 	.word	0x404e0000

08000fd4 <GPS_Init>:

void GPS_Init()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	gps.index = 0;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <GPS_Init+0x18>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&neo, &gps.rx, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4903      	ldr	r1, [pc, #12]	; (8000ff0 <GPS_Init+0x1c>)
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <GPS_Init+0x20>)
 8000fe4:	f001 fb99 	bl	800271a <HAL_UART_Receive_IT>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	200000a4 	.word	0x200000a4
 8000ff4:	20000118 	.word	0x20000118

08000ff8 <GPS_Callback>:

void GPS_Callback()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	if(gps.rx == '\n')
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <GPS_Callback+0x44>)
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	2b0a      	cmp	r3, #10
 8001002:	d107      	bne.n	8001014 <GPS_Callback+0x1c>
	{
		gps.flag = true;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <GPS_Callback+0x44>)
 8001006:	2201      	movs	r2, #1
 8001008:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gps.index = 0;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <GPS_Callback+0x44>)
 800100e:	2200      	movs	r2, #0
 8001010:	715a      	strb	r2, [r3, #5]
 8001012:	e00b      	b.n	800102c <GPS_Callback+0x34>
	}
	else gps.buffer[gps.index ++] = gps.rx;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <GPS_Callback+0x44>)
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	b2d1      	uxtb	r1, r2
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <GPS_Callback+0x44>)
 800101e:	7151      	strb	r1, [r2, #5]
 8001020:	4619      	mov	r1, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <GPS_Callback+0x44>)
 8001024:	791a      	ldrb	r2, [r3, #4]
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <GPS_Callback+0x44>)
 8001028:	440b      	add	r3, r1
 800102a:	719a      	strb	r2, [r3, #6]
	HAL_UART_Receive_IT(&neo, &gps.rx, 1);
 800102c:	2201      	movs	r2, #1
 800102e:	4904      	ldr	r1, [pc, #16]	; (8001040 <GPS_Callback+0x48>)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <GPS_Callback+0x4c>)
 8001032:	f001 fb72 	bl	800271a <HAL_UART_Receive_IT>
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000a0 	.word	0x200000a0
 8001040:	200000a4 	.word	0x200000a4
 8001044:	20000118 	.word	0x20000118

08001048 <GPS_GetData>:

void GPS_GetData()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af0e      	add	r7, sp, #56	; 0x38
	if(gps.flag == true)
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <GPS_GetData+0xb4>)
 8001050:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001054:	2b00      	cmp	r3, #0
 8001056:	d04d      	beq.n	80010f4 <GPS_GetData+0xac>
	{
		char* response = strstr((char*)gps.buffer, "$GPGGA");
 8001058:	4929      	ldr	r1, [pc, #164]	; (8001100 <GPS_GetData+0xb8>)
 800105a:	482a      	ldr	r0, [pc, #168]	; (8001104 <GPS_GetData+0xbc>)
 800105c:	f001 ff12 	bl	8002e84 <strstr>
 8001060:	6078      	str	r0, [r7, #4]
		if(response != NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d03a      	beq.n	80010de <GPS_GetData+0x96>
		{
			memset(&gps.gpgga, 0, sizeof(gps.gpgga));
 8001068:	2248      	movs	r2, #72	; 0x48
 800106a:	2100      	movs	r1, #0
 800106c:	4826      	ldr	r0, [pc, #152]	; (8001108 <GPS_GetData+0xc0>)
 800106e:	f001 fed5 	bl	8002e1c <memset>
			sscanf(response,"$GPGGA, %2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n", &gps.gpgga.utc_hour, &gps.gpgga.utc_min, &gps.gpgga.utc_sec, &gps.gpgga.utc_microsec, &gps.gpgga.latitude_raw, &gps.gpgga.ns_indicator, &gps.gpgga.longtitude_raw, &gps.gpgga.ew_indicator, &gps.gpgga.gps_quality_indicator, &gps.gpgga.num_of_satellites, &gps.gpgga.hdop, &gps.gpgga.msl_altitude, &gps.gpgga.msl_units, &gps.gpgga.age_of_diffCorr, gps.gpgga.diff_ref_station_id, gps.gpgga.checksum); // @suppress("Float formatting support")
 8001072:	4b26      	ldr	r3, [pc, #152]	; (800110c <GPS_GetData+0xc4>)
 8001074:	930d      	str	r3, [sp, #52]	; 0x34
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <GPS_GetData+0xc8>)
 8001078:	930c      	str	r3, [sp, #48]	; 0x30
 800107a:	4b26      	ldr	r3, [pc, #152]	; (8001114 <GPS_GetData+0xcc>)
 800107c:	930b      	str	r3, [sp, #44]	; 0x2c
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <GPS_GetData+0xd0>)
 8001080:	930a      	str	r3, [sp, #40]	; 0x28
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <GPS_GetData+0xd4>)
 8001084:	9309      	str	r3, [sp, #36]	; 0x24
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <GPS_GetData+0xd8>)
 8001088:	9308      	str	r3, [sp, #32]
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <GPS_GetData+0xdc>)
 800108c:	9307      	str	r3, [sp, #28]
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <GPS_GetData+0xe0>)
 8001090:	9306      	str	r3, [sp, #24]
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <GPS_GetData+0xe4>)
 8001094:	9305      	str	r3, [sp, #20]
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <GPS_GetData+0xe8>)
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <GPS_GetData+0xec>)
 800109c:	9303      	str	r3, [sp, #12]
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <GPS_GetData+0xf0>)
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <GPS_GetData+0xf4>)
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <GPS_GetData+0xf8>)
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <GPS_GetData+0xfc>)
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <GPS_GetData+0xc0>)
 80010ae:	4926      	ldr	r1, [pc, #152]	; (8001148 <GPS_GetData+0x100>)
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f001 febb 	bl	8002e2c <siscanf>
			gps.gpgga.latitude = Convert(gps.gpgga.latitude_raw);
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <GPS_GetData+0xb4>)
 80010b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff3e 	bl	8000f3c <Convert>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	490d      	ldr	r1, [pc, #52]	; (80010fc <GPS_GetData+0xb4>)
 80010c6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			gps.gpgga.longtitude = Convert(gps.gpgga.longtitude_raw);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <GPS_GetData+0xb4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff34 	bl	8000f3c <Convert>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4908      	ldr	r1, [pc, #32]	; (80010fc <GPS_GetData+0xb4>)
 80010da:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		HAL_UART_Transmit(&debug, gps.buffer, sizeof(gps.buffer), 2000);
 80010de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010e2:	2228      	movs	r2, #40	; 0x28
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <GPS_GetData+0xbc>)
 80010e6:	4819      	ldr	r0, [pc, #100]	; (800114c <GPS_GetData+0x104>)
 80010e8:	f001 fa85 	bl	80025f6 <HAL_UART_Transmit>
		gps.flag = false;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <GPS_GetData+0xb4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200000a0 	.word	0x200000a0
 8001100:	08003ca8 	.word	0x08003ca8
 8001104:	200000a6 	.word	0x200000a6
 8001108:	200000d0 	.word	0x200000d0
 800110c:	20000114 	.word	0x20000114
 8001110:	20000110 	.word	0x20000110
 8001114:	2000010e 	.word	0x2000010e
 8001118:	20000104 	.word	0x20000104
 800111c:	20000100 	.word	0x20000100
 8001120:	200000fc 	.word	0x200000fc
 8001124:	200000fa 	.word	0x200000fa
 8001128:	200000f9 	.word	0x200000f9
 800112c:	200000f8 	.word	0x200000f8
 8001130:	200000ec 	.word	0x200000ec
 8001134:	200000e8 	.word	0x200000e8
 8001138:	200000d8 	.word	0x200000d8
 800113c:	200000d4 	.word	0x200000d4
 8001140:	200000d2 	.word	0x200000d2
 8001144:	200000d1 	.word	0x200000d1
 8001148:	08003cb0 	.word	0x08003cb0
 800114c:	20000158 	.word	0x20000158

08001150 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern GPS_Struct gps;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	GPS_Callback();
 8001158:	f7ff ff4e 	bl	8000ff8 <GPS_Callback>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fa5c 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f80b 	bl	8001186 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f8a2 	bl	80012b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001174:	f000 f84c 	bl	8001210 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001178:	f000 f874 	bl	8001264 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800117c:	f7ff ff2a 	bl	8000fd4 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_GetData();
 8001180:	f7ff ff62 	bl	8001048 <GPS_GetData>
 8001184:	e7fc      	b.n	8001180 <main+0x1c>

08001186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b090      	sub	sp, #64	; 0x40
 800118a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118c:	f107 0318 	add.w	r3, r7, #24
 8001190:	2228      	movs	r2, #40	; 0x28
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fe41 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b6:	2301      	movs	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fdaa 	bl	8001d28 <HAL_RCC_OscConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011da:	f000 f8b9 	bl	8001350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011de:	230f      	movs	r3, #15
 80011e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e2:	2302      	movs	r3, #2
 80011e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2102      	movs	r1, #2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 f815 	bl	8002228 <HAL_RCC_ClockConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001204:	f000 f8a4 	bl	8001350 <Error_Handler>
  }
}
 8001208:	bf00      	nop
 800120a:	3740      	adds	r7, #64	; 0x40
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_USART1_UART_Init+0x50>)
 8001218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <MX_USART1_UART_Init+0x4c>)
 800121c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART1_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART1_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART1_UART_Init+0x4c>)
 8001248:	f001 f988 	bl	800255c <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001252:	f000 f87d 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000118 	.word	0x20000118
 8001260:	40013800 	.word	0x40013800

08001264 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_USART2_UART_Init+0x50>)
 800126c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001270:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001274:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800128a:	220c      	movs	r2, #12
 800128c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x4c>)
 800129c:	f001 f95e 	bl	800255c <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012a6:	f000 f853 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000158 	.word	0x20000158
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_GPIO_Init+0x90>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <MX_GPIO_Init+0x90>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_GPIO_Init+0x90>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <MX_GPIO_Init+0x90>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <MX_GPIO_Init+0x90>)
 80012ea:	f043 0320 	orr.w	r3, r3, #32
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <MX_GPIO_Init+0x90>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_GPIO_Init+0x90>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a11      	ldr	r2, [pc, #68]	; (8001348 <MX_GPIO_Init+0x90>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_GPIO_Init+0x90>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_GPIO_Init+0x94>)
 800131c:	f000 fcec 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0310 	add.w	r3, r7, #16
 8001336:	4619      	mov	r1, r3
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_GPIO_Init+0x94>)
 800133a:	f000 fb59 	bl	80019f0 <HAL_GPIO_Init>

}
 800133e:	bf00      	nop
 8001340:	3720      	adds	r7, #32
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	40011000 	.word	0x40011000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_MspInit+0x5c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x5c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_MspInit+0x60>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_MspInit+0x60>)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0318 	add.w	r3, r7, #24
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a3f      	ldr	r2, [pc, #252]	; (80014d8 <HAL_UART_MspInit+0x118>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d13a      	bne.n	8001456 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e0:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_UART_MspInit+0x11c>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <HAL_UART_MspInit+0x11c>)
 80013e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b3b      	ldr	r3, [pc, #236]	; (80014dc <HAL_UART_MspInit+0x11c>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_UART_MspInit+0x11c>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a37      	ldr	r2, [pc, #220]	; (80014dc <HAL_UART_MspInit+0x11c>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <HAL_UART_MspInit+0x11c>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4619      	mov	r1, r3
 8001424:	482e      	ldr	r0, [pc, #184]	; (80014e0 <HAL_UART_MspInit+0x120>)
 8001426:	f000 fae3 	bl	80019f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	4619      	mov	r1, r3
 800143e:	4828      	ldr	r0, [pc, #160]	; (80014e0 <HAL_UART_MspInit+0x120>)
 8001440:	f000 fad6 	bl	80019f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2101      	movs	r1, #1
 8001448:	2025      	movs	r0, #37	; 0x25
 800144a:	f000 fa24 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800144e:	2025      	movs	r0, #37	; 0x25
 8001450:	f000 fa3d 	bl	80018ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001454:	e03c      	b.n	80014d0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a22      	ldr	r2, [pc, #136]	; (80014e4 <HAL_UART_MspInit+0x124>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d137      	bne.n	80014d0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_UART_MspInit+0x11c>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <HAL_UART_MspInit+0x11c>)
 8001466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146a:	61d3      	str	r3, [r2, #28]
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_UART_MspInit+0x11c>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_UART_MspInit+0x11c>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_UART_MspInit+0x11c>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6193      	str	r3, [r2, #24]
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_UART_MspInit+0x11c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001490:	2304      	movs	r3, #4
 8001492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4619      	mov	r1, r3
 80014a2:	480f      	ldr	r0, [pc, #60]	; (80014e0 <HAL_UART_MspInit+0x120>)
 80014a4:	f000 faa4 	bl	80019f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80014a8:	2308      	movs	r3, #8
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_UART_MspInit+0x120>)
 80014bc:	f000 fa98 	bl	80019f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	2026      	movs	r0, #38	; 0x26
 80014c6:	f000 f9e6 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014ca:	2026      	movs	r0, #38	; 0x26
 80014cc:	f000 f9ff 	bl	80018ce <HAL_NVIC_EnableIRQ>
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010800 	.word	0x40010800
 80014e4:	40004400 	.word	0x40004400

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 f8bf 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <USART1_IRQHandler+0x10>)
 800153e:	f001 f941 	bl	80027c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000118 	.word	0x20000118

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <USART2_IRQHandler+0x10>)
 8001552:	f001 f937 	bl	80027c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000158 	.word	0x20000158

08001560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <_sbrk+0x5c>)
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <_sbrk+0x60>)
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <_sbrk+0x64>)
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <_sbrk+0x68>)
 8001580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <_sbrk+0x64>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	429a      	cmp	r2, r3
 800158e:	d207      	bcs.n	80015a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001590:	f001 fc1a 	bl	8002dc8 <__errno>
 8001594:	4603      	mov	r3, r0
 8001596:	220c      	movs	r2, #12
 8001598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e009      	b.n	80015b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <_sbrk+0x64>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <_sbrk+0x64>)
 80015b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b2:	68fb      	ldr	r3, [r7, #12]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20005000 	.word	0x20005000
 80015c0:	00000400 	.word	0x00000400
 80015c4:	20000094 	.word	0x20000094
 80015c8:	200001b0 	.word	0x200001b0

080015cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015da:	e003      	b.n	80015e4 <LoopCopyDataInit>

080015dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015e2:	3104      	adds	r1, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015e4:	480a      	ldr	r0, [pc, #40]	; (8001610 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015ec:	d3f6      	bcc.n	80015dc <CopyDataInit>
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f0:	e002      	b.n	80015f8 <LoopFillZerobss>

080015f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015f4:	f842 3b04 	str.w	r3, [r2], #4

080015f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015fc:	d3f9      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015fe:	f7ff ffe5 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001602:	f001 fbe7 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7ff fdad 	bl	8001164 <main>
  bx lr
 800160a:	4770      	bx	lr
  ldr r3, =_sidata
 800160c:	08003ec8 	.word	0x08003ec8
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001614:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001618:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800161c:	200001ac 	.word	0x200001ac

08001620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC1_2_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x28>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x28>)
 800162e:	f043 0310 	orr.w	r3, r3, #16
 8001632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 f923 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fe8c 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40022000 	.word	0x40022000

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f93b 	bl	80018ea <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f903 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000198 	.word	0x20000198

080016d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_GetTick+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000198 	.word	0x20000198

080016e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800171a:	4a04      	ldr	r2, [pc, #16]	; (800172c <__NVIC_SetPriorityGrouping+0x44>)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	60d3      	str	r3, [r2, #12]
}
 8001720:	bf00      	nop
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4906      	ldr	r1, [pc, #24]	; (8001780 <__NVIC_EnableIRQ+0x34>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f7ff ff90 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff2d 	bl	80016e8 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff42 	bl	8001730 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff90 	bl	80017d8 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5f 	bl	8001784 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff35 	bl	800174c <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001916:	2b02      	cmp	r3, #2
 8001918:	d005      	beq.n	8001926 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2204      	movs	r2, #4
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e051      	b.n	80019ca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 020e 	bic.w	r2, r2, #14
 8001934:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0201 	bic.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a22      	ldr	r2, [pc, #136]	; (80019d4 <HAL_DMA_Abort_IT+0xd0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d029      	beq.n	80019a4 <HAL_DMA_Abort_IT+0xa0>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a20      	ldr	r2, [pc, #128]	; (80019d8 <HAL_DMA_Abort_IT+0xd4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d022      	beq.n	80019a0 <HAL_DMA_Abort_IT+0x9c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <HAL_DMA_Abort_IT+0xd8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d01a      	beq.n	800199a <HAL_DMA_Abort_IT+0x96>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_DMA_Abort_IT+0xdc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d012      	beq.n	8001994 <HAL_DMA_Abort_IT+0x90>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_DMA_Abort_IT+0xe0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00a      	beq.n	800198e <HAL_DMA_Abort_IT+0x8a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1a      	ldr	r2, [pc, #104]	; (80019e8 <HAL_DMA_Abort_IT+0xe4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d102      	bne.n	8001988 <HAL_DMA_Abort_IT+0x84>
 8001982:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001986:	e00e      	b.n	80019a6 <HAL_DMA_Abort_IT+0xa2>
 8001988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198c:	e00b      	b.n	80019a6 <HAL_DMA_Abort_IT+0xa2>
 800198e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001992:	e008      	b.n	80019a6 <HAL_DMA_Abort_IT+0xa2>
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	e005      	b.n	80019a6 <HAL_DMA_Abort_IT+0xa2>
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	e002      	b.n	80019a6 <HAL_DMA_Abort_IT+0xa2>
 80019a0:	2310      	movs	r3, #16
 80019a2:	e000      	b.n	80019a6 <HAL_DMA_Abort_IT+0xa2>
 80019a4:	2301      	movs	r3, #1
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_DMA_Abort_IT+0xe8>)
 80019a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
    } 
  }
  return status;
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40020008 	.word	0x40020008
 80019d8:	4002001c 	.word	0x4002001c
 80019dc:	40020030 	.word	0x40020030
 80019e0:	40020044 	.word	0x40020044
 80019e4:	40020058 	.word	0x40020058
 80019e8:	4002006c 	.word	0x4002006c
 80019ec:	40020000 	.word	0x40020000

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b08b      	sub	sp, #44	; 0x2c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019fe:	2300      	movs	r3, #0
 8001a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	e169      	b.n	8001cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a04:	2201      	movs	r2, #1
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69fa      	ldr	r2, [r7, #28]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f040 8158 	bne.w	8001cd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a9a      	ldr	r2, [pc, #616]	; (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d05e      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a2c:	4a98      	ldr	r2, [pc, #608]	; (8001c90 <HAL_GPIO_Init+0x2a0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d875      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a32:	4a98      	ldr	r2, [pc, #608]	; (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d058      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a38:	4a96      	ldr	r2, [pc, #600]	; (8001c94 <HAL_GPIO_Init+0x2a4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d86f      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a3e:	4a96      	ldr	r2, [pc, #600]	; (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d052      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a44:	4a94      	ldr	r2, [pc, #592]	; (8001c98 <HAL_GPIO_Init+0x2a8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d869      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a4a:	4a94      	ldr	r2, [pc, #592]	; (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d04c      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a50:	4a92      	ldr	r2, [pc, #584]	; (8001c9c <HAL_GPIO_Init+0x2ac>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d863      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a56:	4a92      	ldr	r2, [pc, #584]	; (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d046      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
 8001a5c:	4a90      	ldr	r2, [pc, #576]	; (8001ca0 <HAL_GPIO_Init+0x2b0>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d85d      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a62:	2b12      	cmp	r3, #18
 8001a64:	d82a      	bhi.n	8001abc <HAL_GPIO_Init+0xcc>
 8001a66:	2b12      	cmp	r3, #18
 8001a68:	d859      	bhi.n	8001b1e <HAL_GPIO_Init+0x12e>
 8001a6a:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <HAL_GPIO_Init+0x80>)
 8001a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001ac5 	.word	0x08001ac5
 8001a78:	08001ad7 	.word	0x08001ad7
 8001a7c:	08001b19 	.word	0x08001b19
 8001a80:	08001b1f 	.word	0x08001b1f
 8001a84:	08001b1f 	.word	0x08001b1f
 8001a88:	08001b1f 	.word	0x08001b1f
 8001a8c:	08001b1f 	.word	0x08001b1f
 8001a90:	08001b1f 	.word	0x08001b1f
 8001a94:	08001b1f 	.word	0x08001b1f
 8001a98:	08001b1f 	.word	0x08001b1f
 8001a9c:	08001b1f 	.word	0x08001b1f
 8001aa0:	08001b1f 	.word	0x08001b1f
 8001aa4:	08001b1f 	.word	0x08001b1f
 8001aa8:	08001b1f 	.word	0x08001b1f
 8001aac:	08001b1f 	.word	0x08001b1f
 8001ab0:	08001b1f 	.word	0x08001b1f
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001ae1 	.word	0x08001ae1
 8001abc:	4a79      	ldr	r2, [pc, #484]	; (8001ca4 <HAL_GPIO_Init+0x2b4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ac2:	e02c      	b.n	8001b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	623b      	str	r3, [r7, #32]
          break;
 8001aca:	e029      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	623b      	str	r3, [r7, #32]
          break;
 8001ad4:	e024      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	3308      	adds	r3, #8
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e01f      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	330c      	adds	r3, #12
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e01a      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001af2:	2304      	movs	r3, #4
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e013      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b00:	2308      	movs	r3, #8
 8001b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	611a      	str	r2, [r3, #16]
          break;
 8001b0a:	e009      	b.n	8001b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69fa      	ldr	r2, [r7, #28]
 8001b14:	615a      	str	r2, [r3, #20]
          break;
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x130>
          break;
 8001b1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2bff      	cmp	r3, #255	; 0xff
 8001b24:	d801      	bhi.n	8001b2a <HAL_GPIO_Init+0x13a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	e001      	b.n	8001b2e <HAL_GPIO_Init+0x13e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2bff      	cmp	r3, #255	; 0xff
 8001b34:	d802      	bhi.n	8001b3c <HAL_GPIO_Init+0x14c>
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	e002      	b.n	8001b42 <HAL_GPIO_Init+0x152>
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3b08      	subs	r3, #8
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	210f      	movs	r1, #15
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	401a      	ands	r2, r3
 8001b54:	6a39      	ldr	r1, [r7, #32]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 80b1 	beq.w	8001cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b70:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a4c      	ldr	r2, [pc, #304]	; (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_GPIO_Init+0x2b8>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b88:	4a48      	ldr	r2, [pc, #288]	; (8001cac <HAL_GPIO_Init+0x2bc>)
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a40      	ldr	r2, [pc, #256]	; (8001cb0 <HAL_GPIO_Init+0x2c0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d013      	beq.n	8001bdc <HAL_GPIO_Init+0x1ec>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3f      	ldr	r2, [pc, #252]	; (8001cb4 <HAL_GPIO_Init+0x2c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00d      	beq.n	8001bd8 <HAL_GPIO_Init+0x1e8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a3e      	ldr	r2, [pc, #248]	; (8001cb8 <HAL_GPIO_Init+0x2c8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <HAL_GPIO_Init+0x1e4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a3d      	ldr	r2, [pc, #244]	; (8001cbc <HAL_GPIO_Init+0x2cc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d101      	bne.n	8001bd0 <HAL_GPIO_Init+0x1e0>
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e006      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	e004      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e002      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_GPIO_Init+0x1ee>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	f002 0203 	and.w	r2, r2, #3
 8001be4:	0092      	lsls	r2, r2, #2
 8001be6:	4093      	lsls	r3, r2
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bee:	492f      	ldr	r1, [pc, #188]	; (8001cac <HAL_GPIO_Init+0x2bc>)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d006      	beq.n	8001c16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	492c      	ldr	r1, [pc, #176]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	4928      	ldr	r1, [pc, #160]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4922      	ldr	r1, [pc, #136]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	491e      	ldr	r1, [pc, #120]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4918      	ldr	r1, [pc, #96]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c66:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4914      	ldr	r1, [pc, #80]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d021      	beq.n	8001cc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60cb      	str	r3, [r1, #12]
 8001c8c:	e021      	b.n	8001cd2 <HAL_GPIO_Init+0x2e2>
 8001c8e:	bf00      	nop
 8001c90:	10320000 	.word	0x10320000
 8001c94:	10310000 	.word	0x10310000
 8001c98:	10220000 	.word	0x10220000
 8001c9c:	10210000 	.word	0x10210000
 8001ca0:	10120000 	.word	0x10120000
 8001ca4:	10110000 	.word	0x10110000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	40010c00 	.word	0x40010c00
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	40011400 	.word	0x40011400
 8001cc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4909      	ldr	r1, [pc, #36]	; (8001cf4 <HAL_GPIO_Init+0x304>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f47f ae8e 	bne.w	8001a04 <HAL_GPIO_Init+0x14>
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	372c      	adds	r7, #44	; 0x2c
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e26c      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8087 	beq.w	8001e56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d48:	4b92      	ldr	r3, [pc, #584]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d00c      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d54:	4b8f      	ldr	r3, [pc, #572]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d112      	bne.n	8001d86 <HAL_RCC_OscConfig+0x5e>
 8001d60:	4b8c      	ldr	r3, [pc, #560]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d10b      	bne.n	8001d86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6e:	4b89      	ldr	r3, [pc, #548]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x12c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d168      	bne.n	8001e54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e246      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x76>
 8001d90:	4b80      	ldr	r3, [pc, #512]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a7f      	ldr	r2, [pc, #508]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e02e      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x98>
 8001da6:	4b7b      	ldr	r3, [pc, #492]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a77      	ldr	r2, [pc, #476]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0xbc>
 8001dca:	4b72      	ldr	r3, [pc, #456]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a71      	ldr	r2, [pc, #452]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xd4>
 8001de4:	4b6b      	ldr	r3, [pc, #428]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a67      	ldr	r2, [pc, #412]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc66 	bl	80016d4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc62 	bl	80016d4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e1fa      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe4>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc52 	bl	80016d4 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fc4e 	bl	80016d4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1e6      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x10c>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d063      	beq.n	8001f2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e6e:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x18c>
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x176>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1ba      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4939      	ldr	r1, [pc, #228]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fc07 	bl	80016d4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc03 	bl	80016d4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e19b      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4927      	ldr	r1, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_OscConfig+0x270>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fbe6 	bl	80016d4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fbe2 	bl	80016d4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e17a      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03a      	beq.n	8001fac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d019      	beq.n	8001f72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCC_OscConfig+0x274>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7ff fbc6 	bl	80016d4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fbc2 	bl	80016d4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e15a      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f000 fad8 	bl	8002520 <RCC_Delay>
 8001f70:	e01c      	b.n	8001fac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_RCC_OscConfig+0x274>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f78:	f7ff fbac 	bl	80016d4 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7e:	e00f      	b.n	8001fa0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f80:	f7ff fba8 	bl	80016d4 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d908      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e140      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	42420000 	.word	0x42420000
 8001f9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	4b9e      	ldr	r3, [pc, #632]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e9      	bne.n	8001f80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a6 	beq.w	8002106 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbe:	4b97      	ldr	r3, [pc, #604]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10d      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b94      	ldr	r3, [pc, #592]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4a93      	ldr	r2, [pc, #588]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	61d3      	str	r3, [r2, #28]
 8001fd6:	4b91      	ldr	r3, [pc, #580]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	4b8e      	ldr	r3, [pc, #568]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d118      	bne.n	8002024 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff2:	4b8b      	ldr	r3, [pc, #556]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a8a      	ldr	r2, [pc, #552]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fb69 	bl	80016d4 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7ff fb65 	bl	80016d4 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b64      	cmp	r3, #100	; 0x64
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0fd      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x312>
 800202c:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6213      	str	r3, [r2, #32]
 8002038:	e02d      	b.n	8002096 <HAL_RCC_OscConfig+0x36e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x334>
 8002042:	4b76      	ldr	r3, [pc, #472]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	4a75      	ldr	r2, [pc, #468]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6213      	str	r3, [r2, #32]
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4a72      	ldr	r2, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002054:	f023 0304 	bic.w	r3, r3, #4
 8002058:	6213      	str	r3, [r2, #32]
 800205a:	e01c      	b.n	8002096 <HAL_RCC_OscConfig+0x36e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d10c      	bne.n	800207e <HAL_RCC_OscConfig+0x356>
 8002064:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a6c      	ldr	r2, [pc, #432]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4a69      	ldr	r2, [pc, #420]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6213      	str	r3, [r2, #32]
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0x36e>
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	4a66      	ldr	r2, [pc, #408]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6213      	str	r3, [r2, #32]
 800208a:	4b64      	ldr	r3, [pc, #400]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	4a63      	ldr	r2, [pc, #396]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d015      	beq.n	80020ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb19 	bl	80016d4 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff fb15 	bl	80016d4 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0ab      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	4b57      	ldr	r3, [pc, #348]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ee      	beq.n	80020a6 <HAL_RCC_OscConfig+0x37e>
 80020c8:	e014      	b.n	80020f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fb03 	bl	80016d4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff faff 	bl	80016d4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e095      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d105      	bne.n	8002106 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b48      	ldr	r3, [pc, #288]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a47      	ldr	r2, [pc, #284]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 8081 	beq.w	8002212 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d061      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d146      	bne.n	80021b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_OscConfig+0x4fc>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff fad3 	bl	80016d4 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff facf 	bl	80016d4 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e067      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d108      	bne.n	800216c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215a:	4b30      	ldr	r3, [pc, #192]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	492d      	ldr	r1, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a19      	ldr	r1, [r3, #32]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	430b      	orrs	r3, r1
 800217e:	4927      	ldr	r1, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x4fc>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218a:	f7ff faa3 	bl	80016d4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7ff fa9f 	bl	80016d4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e037      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x46a>
 80021b0:	e02f      	b.n	8002212 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <HAL_RCC_OscConfig+0x4fc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff fa8c 	bl	80016d4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff fa88 	bl	80016d4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e020      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x498>
 80021de:	e018      	b.n	8002212 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	42420060 	.word	0x42420060

08002228 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0d0      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d910      	bls.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f023 0207 	bic.w	r2, r3, #7
 8002252:	4965      	ldr	r1, [pc, #404]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d001      	beq.n	800226c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0b8      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002284:	4b59      	ldr	r3, [pc, #356]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a58      	ldr	r2, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800228e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4a52      	ldr	r2, [pc, #328]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a8:	4b50      	ldr	r3, [pc, #320]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	494d      	ldr	r1, [pc, #308]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d040      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d115      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e07f      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e073      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06b      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b39      	ldr	r3, [pc, #228]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4936      	ldr	r1, [pc, #216]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7ff f9dc 	bl	80016d4 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7ff f9d8 	bl	80016d4 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e053      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2d      	ldr	r3, [pc, #180]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d210      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b24      	ldr	r3, [pc, #144]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4922      	ldr	r1, [pc, #136]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e032      	b.n	80023de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4916      	ldr	r1, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	490e      	ldr	r1, [pc, #56]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023b6:	f000 f821 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023ba:	4602      	mov	r2, r0
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	490a      	ldr	r1, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	5ccb      	ldrb	r3, [r1, r3]
 80023ca:	fa22 f303 	lsr.w	r3, r2, r3
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1cc>)
 80023d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f93a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40022000 	.word	0x40022000
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003d18 	.word	0x08003d18
 80023f4:	20000000 	.word	0x20000000
 80023f8:	20000004 	.word	0x20000004

080023fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b490      	push	{r4, r7}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002404:	1d3c      	adds	r4, r7, #4
 8002406:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800240c:	f240 2301 	movw	r3, #513	; 0x201
 8002410:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002426:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x40>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x46>
 800243a:	e02d      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	e02d      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800244e:	4413      	add	r3, r2
 8002450:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002454:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c5b      	lsrs	r3, r3, #17
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800246e:	4413      	add	r3, r2
 8002470:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002474:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247a:	fb02 f203 	mul.w	r2, r2, r3
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	e004      	b.n	8002492 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800248c:	fb02 f303 	mul.w	r3, r2, r3
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	623b      	str	r3, [r7, #32]
      break;
 8002496:	e002      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249a:	623b      	str	r3, [r7, #32]
      break;
 800249c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800249e:	6a3b      	ldr	r3, [r7, #32]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3728      	adds	r7, #40	; 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc90      	pop	{r4, r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	08003cfc 	.word	0x08003cfc
 80024b0:	40021000 	.word	0x40021000
 80024b4:	007a1200 	.word	0x007a1200
 80024b8:	003d0900 	.word	0x003d0900

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <HAL_RCC_GetHCLKFreq+0x10>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000000 	.word	0x20000000

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d4:	f7ff fff2 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4903      	ldr	r1, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	08003d28 	.word	0x08003d28

080024f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024fc:	f7ff ffde 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0adb      	lsrs	r3, r3, #11
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4903      	ldr	r1, [pc, #12]	; (800251c <HAL_RCC_GetPCLK2Freq+0x24>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40021000 	.word	0x40021000
 800251c:	08003d28 	.word	0x08003d28

08002520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <RCC_Delay+0x34>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <RCC_Delay+0x38>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0a5b      	lsrs	r3, r3, #9
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800253c:	bf00      	nop
  }
  while (Delay --);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	1e5a      	subs	r2, r3, #1
 8002542:	60fa      	str	r2, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f9      	bne.n	800253c <RCC_Delay+0x1c>
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000000 	.word	0x20000000
 8002558:	10624dd3 	.word	0x10624dd3

0800255c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e03f      	b.n	80025ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe ff1c 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800259e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fb83 	bl	8002cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b08a      	sub	sp, #40	; 0x28
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	603b      	str	r3, [r7, #0]
 8002602:	4613      	mov	r3, r2
 8002604:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	d17c      	bne.n	8002710 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_UART_Transmit+0x2c>
 800261c:	88fb      	ldrh	r3, [r7, #6]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e075      	b.n	8002712 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_UART_Transmit+0x3e>
 8002630:	2302      	movs	r3, #2
 8002632:	e06e      	b.n	8002712 <HAL_UART_Transmit+0x11c>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2221      	movs	r2, #33	; 0x21
 8002646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800264a:	f7ff f843 	bl	80016d4 <HAL_GetTick>
 800264e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d108      	bne.n	8002678 <HAL_UART_Transmit+0x82>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e003      	b.n	8002680 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002688:	e02a      	b.n	80026e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f9a7 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e036      	b.n	8002712 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	3302      	adds	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]
 80026c0:	e007      	b.n	80026d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1cf      	bne.n	800268a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	2200      	movs	r2, #0
 80026f2:	2140      	movs	r1, #64	; 0x40
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f977 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e006      	b.n	8002712 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3720      	adds	r7, #32
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	4613      	mov	r3, r2
 8002726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b20      	cmp	r3, #32
 8002732:	d140      	bne.n	80027b6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <HAL_UART_Receive_IT+0x26>
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e039      	b.n	80027b8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_UART_Receive_IT+0x38>
 800274e:	2302      	movs	r3, #2
 8002750:	e032      	b.n	80027b8 <HAL_UART_Receive_IT+0x9e>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	88fa      	ldrh	r2, [r7, #6]
 8002764:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	88fa      	ldrh	r2, [r7, #6]
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2222      	movs	r2, #34	; 0x22
 8002776:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002790:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0220 	orr.w	r2, r2, #32
 80027b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80027b6:	2302      	movs	r3, #2
  }
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
	...

080027c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_UART_IRQHandler+0x52>
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9cc 	bl	8002bac <UART_Receive_IT>
      return;
 8002814:	e0d0      	b.n	80029b8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80b0 	beq.w	800297e <HAL_UART_IRQHandler+0x1ba>
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_UART_IRQHandler+0x70>
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80a5 	beq.w	800297e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_UART_IRQHandler+0x90>
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_UART_IRQHandler+0xb0>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_UART_IRQHandler+0xd0>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	f043 0204 	orr.w	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00f      	beq.n	80028be <HAL_UART_IRQHandler+0xfa>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_UART_IRQHandler+0xee>
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	f043 0208 	orr.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d077      	beq.n	80029b6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_UART_IRQHandler+0x11c>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f966 	bl	8002bac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <HAL_UART_IRQHandler+0x144>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d031      	beq.n	800296c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f8b7 	bl	8002a7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <HAL_UART_IRQHandler+0x1fc>)
 800293a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe ffdf 	bl	8001904 <HAL_DMA_Abort_IT>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d016      	beq.n	800297a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002956:	4610      	mov	r0, r2
 8002958:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295a:	e00e      	b.n	800297a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f83a 	bl	80029d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002962:	e00a      	b.n	800297a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f836 	bl	80029d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296a:	e006      	b.n	800297a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f832 	bl	80029d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002978:	e01d      	b.n	80029b6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800297a:	bf00      	nop
    return;
 800297c:	e01b      	b.n	80029b6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_UART_IRQHandler+0x1d6>
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8a3 	bl	8002ade <UART_Transmit_IT>
    return;
 8002998:	e00e      	b.n	80029b8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_UART_IRQHandler+0x1f4>
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8e4 	bl	8002b7c <UART_EndTransmit_IT>
    return;
 80029b4:	e000      	b.n	80029b8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80029b6:	bf00      	nop
  }
}
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	08002ab7 	.word	0x08002ab7

080029c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f8:	e02c      	b.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d028      	beq.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a08:	f7fe fe64 	bl	80016d4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d21d      	bcs.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e00f      	b.n	8002a74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d0c3      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff80 	bl	80029d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ad6:	bf00      	nop
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b21      	cmp	r3, #33	; 0x21
 8002af0:	d13e      	bne.n	8002b70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d114      	bne.n	8002b26 <UART_Transmit_IT+0x48>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d110      	bne.n	8002b26 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	1c9a      	adds	r2, r3, #2
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	e008      	b.n	8002b38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	1c59      	adds	r1, r3, #1
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6211      	str	r1, [r2, #32]
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4619      	mov	r1, r3
 8002b46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e000      	b.n	8002b72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b92:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff ff11 	bl	80029c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b22      	cmp	r3, #34	; 0x22
 8002bbe:	d170      	bne.n	8002ca2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	d117      	bne.n	8002bfa <UART_Receive_IT+0x4e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d113      	bne.n	8002bfa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	1c9a      	adds	r2, r3, #2
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf8:	e026      	b.n	8002c48 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c0c:	d007      	beq.n	8002c1e <UART_Receive_IT+0x72>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <UART_Receive_IT+0x80>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e008      	b.n	8002c3e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	4619      	mov	r1, r3
 8002c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d120      	bne.n	8002c9e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0220 	bic.w	r2, r2, #32
 8002c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fe fa5b 	bl	8001150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e002      	b.n	8002ca4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ce6:	f023 030c 	bic.w	r3, r3, #12
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <UART_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d14:	f7ff fbf0 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	e002      	b.n	8002d22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7ff fbd8 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8002d20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009a      	lsls	r2, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	0119      	lsls	r1, r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2064      	movs	r0, #100	; 0x64
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	3332      	adds	r3, #50	; 0x32
 8002d6c:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d78:	4419      	add	r1, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d92:	fba3 0302 	umull	r0, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2064      	movs	r0, #100	; 0x64
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	3332      	adds	r3, #50	; 0x32
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <UART_SetConfig+0x118>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	440a      	add	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	51eb851f 	.word	0x51eb851f

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2000000c 	.word	0x2000000c

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	4d0c      	ldr	r5, [pc, #48]	; (8002e0c <__libc_init_array+0x38>)
 8002dda:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	f000 ff52 	bl	8003c8c <_init>
 8002de8:	2600      	movs	r6, #0
 8002dea:	4d0a      	ldr	r5, [pc, #40]	; (8002e14 <__libc_init_array+0x40>)
 8002dec:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <__libc_init_array+0x44>)
 8002dee:	1b64      	subs	r4, r4, r5
 8002df0:	10a4      	asrs	r4, r4, #2
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08003ec0 	.word	0x08003ec0
 8002e10:	08003ec0 	.word	0x08003ec0
 8002e14:	08003ec0 	.word	0x08003ec0
 8002e18:	08003ec4 	.word	0x08003ec4

08002e1c <memset>:
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4402      	add	r2, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <siscanf>:
 8002e2c:	b40e      	push	{r1, r2, r3}
 8002e2e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002e32:	b530      	push	{r4, r5, lr}
 8002e34:	b09c      	sub	sp, #112	; 0x70
 8002e36:	ac1f      	add	r4, sp, #124	; 0x7c
 8002e38:	f854 5b04 	ldr.w	r5, [r4], #4
 8002e3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002e40:	9002      	str	r0, [sp, #8]
 8002e42:	9006      	str	r0, [sp, #24]
 8002e44:	f7fd f982 	bl	800014c <strlen>
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <siscanf+0x4c>)
 8002e4a:	9003      	str	r0, [sp, #12]
 8002e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e4e:	2300      	movs	r3, #0
 8002e50:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e52:	9314      	str	r3, [sp, #80]	; 0x50
 8002e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e58:	9007      	str	r0, [sp, #28]
 8002e5a:	4808      	ldr	r0, [pc, #32]	; (8002e7c <siscanf+0x50>)
 8002e5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e60:	462a      	mov	r2, r5
 8002e62:	4623      	mov	r3, r4
 8002e64:	a902      	add	r1, sp, #8
 8002e66:	6800      	ldr	r0, [r0, #0]
 8002e68:	9401      	str	r4, [sp, #4]
 8002e6a:	f000 f87d 	bl	8002f68 <__ssvfiscanf_r>
 8002e6e:	b01c      	add	sp, #112	; 0x70
 8002e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e74:	b003      	add	sp, #12
 8002e76:	4770      	bx	lr
 8002e78:	08002e81 	.word	0x08002e81
 8002e7c:	2000000c 	.word	0x2000000c

08002e80 <__seofread>:
 8002e80:	2000      	movs	r0, #0
 8002e82:	4770      	bx	lr

08002e84 <strstr>:
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	780c      	ldrb	r4, [r1, #0]
 8002e88:	b164      	cbz	r4, 8002ea4 <strstr+0x20>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	781a      	ldrb	r2, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	1c5e      	adds	r6, r3, #1
 8002e92:	b90a      	cbnz	r2, 8002e98 <strstr+0x14>
 8002e94:	4610      	mov	r0, r2
 8002e96:	e005      	b.n	8002ea4 <strstr+0x20>
 8002e98:	4294      	cmp	r4, r2
 8002e9a:	d108      	bne.n	8002eae <strstr+0x2a>
 8002e9c:	460d      	mov	r5, r1
 8002e9e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002ea2:	b902      	cbnz	r2, 8002ea6 <strstr+0x22>
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002eaa:	4297      	cmp	r7, r2
 8002eac:	d0f7      	beq.n	8002e9e <strstr+0x1a>
 8002eae:	4633      	mov	r3, r6
 8002eb0:	e7ec      	b.n	8002e8c <strstr+0x8>

08002eb2 <_sungetc_r>:
 8002eb2:	b538      	push	{r3, r4, r5, lr}
 8002eb4:	1c4b      	adds	r3, r1, #1
 8002eb6:	4614      	mov	r4, r2
 8002eb8:	d103      	bne.n	8002ec2 <_sungetc_r+0x10>
 8002eba:	f04f 35ff 	mov.w	r5, #4294967295
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	bd38      	pop	{r3, r4, r5, pc}
 8002ec2:	8993      	ldrh	r3, [r2, #12]
 8002ec4:	b2cd      	uxtb	r5, r1
 8002ec6:	f023 0320 	bic.w	r3, r3, #32
 8002eca:	8193      	strh	r3, [r2, #12]
 8002ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ece:	6852      	ldr	r2, [r2, #4]
 8002ed0:	b18b      	cbz	r3, 8002ef6 <_sungetc_r+0x44>
 8002ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	dd08      	ble.n	8002eea <_sungetc_r+0x38>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	6022      	str	r2, [r4, #0]
 8002ede:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	6063      	str	r3, [r4, #4]
 8002ee8:	e7e9      	b.n	8002ebe <_sungetc_r+0xc>
 8002eea:	4621      	mov	r1, r4
 8002eec:	f000 fc40 	bl	8003770 <__submore>
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	d0f1      	beq.n	8002ed8 <_sungetc_r+0x26>
 8002ef4:	e7e1      	b.n	8002eba <_sungetc_r+0x8>
 8002ef6:	6921      	ldr	r1, [r4, #16]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	b151      	cbz	r1, 8002f12 <_sungetc_r+0x60>
 8002efc:	4299      	cmp	r1, r3
 8002efe:	d208      	bcs.n	8002f12 <_sungetc_r+0x60>
 8002f00:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002f04:	42a9      	cmp	r1, r5
 8002f06:	d104      	bne.n	8002f12 <_sungetc_r+0x60>
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	3201      	adds	r2, #1
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	6062      	str	r2, [r4, #4]
 8002f10:	e7d5      	b.n	8002ebe <_sungetc_r+0xc>
 8002f12:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f1a:	6363      	str	r3, [r4, #52]	; 0x34
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f20:	4623      	mov	r3, r4
 8002f22:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002f26:	6023      	str	r3, [r4, #0]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e7dc      	b.n	8002ee6 <_sungetc_r+0x34>

08002f2c <__ssrefill_r>:
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	460c      	mov	r4, r1
 8002f30:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002f32:	b169      	cbz	r1, 8002f50 <__ssrefill_r+0x24>
 8002f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f38:	4299      	cmp	r1, r3
 8002f3a:	d001      	beq.n	8002f40 <__ssrefill_r+0x14>
 8002f3c:	f000 fc6e 	bl	800381c <_free_r>
 8002f40:	2000      	movs	r0, #0
 8002f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f44:	6360      	str	r0, [r4, #52]	; 0x34
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	b113      	cbz	r3, 8002f50 <__ssrefill_r+0x24>
 8002f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd10      	pop	{r4, pc}
 8002f50:	6923      	ldr	r3, [r4, #16]
 8002f52:	f04f 30ff 	mov.w	r0, #4294967295
 8002f56:	6023      	str	r3, [r4, #0]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	6063      	str	r3, [r4, #4]
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	f043 0320 	orr.w	r3, r3, #32
 8002f62:	81a3      	strh	r3, [r4, #12]
 8002f64:	e7f3      	b.n	8002f4e <__ssrefill_r+0x22>
	...

08002f68 <__ssvfiscanf_r>:
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	460c      	mov	r4, r1
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4606      	mov	r6, r0
 8002f72:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002f76:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002f7a:	49b3      	ldr	r1, [pc, #716]	; (8003248 <__ssvfiscanf_r+0x2e0>)
 8002f7c:	f10d 0804 	add.w	r8, sp, #4
 8002f80:	91a0      	str	r1, [sp, #640]	; 0x280
 8002f82:	49b2      	ldr	r1, [pc, #712]	; (800324c <__ssvfiscanf_r+0x2e4>)
 8002f84:	4fb2      	ldr	r7, [pc, #712]	; (8003250 <__ssvfiscanf_r+0x2e8>)
 8002f86:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8003254 <__ssvfiscanf_r+0x2ec>
 8002f8a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002f8e:	91a1      	str	r1, [sp, #644]	; 0x284
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	f892 a000 	ldrb.w	sl, [r2]
 8002f96:	f1ba 0f00 	cmp.w	sl, #0
 8002f9a:	f000 8153 	beq.w	8003244 <__ssvfiscanf_r+0x2dc>
 8002f9e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8002fa2:	1c55      	adds	r5, r2, #1
 8002fa4:	f013 0308 	ands.w	r3, r3, #8
 8002fa8:	d019      	beq.n	8002fde <__ssvfiscanf_r+0x76>
 8002faa:	6863      	ldr	r3, [r4, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	dd0f      	ble.n	8002fd0 <__ssvfiscanf_r+0x68>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	781a      	ldrb	r2, [r3, #0]
 8002fb4:	5cba      	ldrb	r2, [r7, r2]
 8002fb6:	0712      	lsls	r2, r2, #28
 8002fb8:	d401      	bmi.n	8002fbe <__ssvfiscanf_r+0x56>
 8002fba:	462a      	mov	r2, r5
 8002fbc:	e7e9      	b.n	8002f92 <__ssvfiscanf_r+0x2a>
 8002fbe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	3201      	adds	r2, #1
 8002fc4:	9245      	str	r2, [sp, #276]	; 0x114
 8002fc6:	6862      	ldr	r2, [r4, #4]
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	3a01      	subs	r2, #1
 8002fcc:	6062      	str	r2, [r4, #4]
 8002fce:	e7ec      	b.n	8002faa <__ssvfiscanf_r+0x42>
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002fd6:	4798      	blx	r3
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d0e9      	beq.n	8002fb0 <__ssvfiscanf_r+0x48>
 8002fdc:	e7ed      	b.n	8002fba <__ssvfiscanf_r+0x52>
 8002fde:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8002fe2:	f040 8086 	bne.w	80030f2 <__ssvfiscanf_r+0x18a>
 8002fe6:	9341      	str	r3, [sp, #260]	; 0x104
 8002fe8:	9343      	str	r3, [sp, #268]	; 0x10c
 8002fea:	7853      	ldrb	r3, [r2, #1]
 8002fec:	2b2a      	cmp	r3, #42	; 0x2a
 8002fee:	bf04      	itt	eq
 8002ff0:	2310      	moveq	r3, #16
 8002ff2:	1c95      	addeq	r5, r2, #2
 8002ff4:	f04f 020a 	mov.w	r2, #10
 8002ff8:	bf08      	it	eq
 8002ffa:	9341      	streq	r3, [sp, #260]	; 0x104
 8002ffc:	46ab      	mov	fp, r5
 8002ffe:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003002:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003006:	2b09      	cmp	r3, #9
 8003008:	d91d      	bls.n	8003046 <__ssvfiscanf_r+0xde>
 800300a:	2203      	movs	r2, #3
 800300c:	4891      	ldr	r0, [pc, #580]	; (8003254 <__ssvfiscanf_r+0x2ec>)
 800300e:	f000 fbe9 	bl	80037e4 <memchr>
 8003012:	b140      	cbz	r0, 8003026 <__ssvfiscanf_r+0xbe>
 8003014:	2301      	movs	r3, #1
 8003016:	465d      	mov	r5, fp
 8003018:	eba0 0009 	sub.w	r0, r0, r9
 800301c:	fa03 f000 	lsl.w	r0, r3, r0
 8003020:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003022:	4318      	orrs	r0, r3
 8003024:	9041      	str	r0, [sp, #260]	; 0x104
 8003026:	f815 3b01 	ldrb.w	r3, [r5], #1
 800302a:	2b78      	cmp	r3, #120	; 0x78
 800302c:	d806      	bhi.n	800303c <__ssvfiscanf_r+0xd4>
 800302e:	2b57      	cmp	r3, #87	; 0x57
 8003030:	d810      	bhi.n	8003054 <__ssvfiscanf_r+0xec>
 8003032:	2b25      	cmp	r3, #37	; 0x25
 8003034:	d05d      	beq.n	80030f2 <__ssvfiscanf_r+0x18a>
 8003036:	d857      	bhi.n	80030e8 <__ssvfiscanf_r+0x180>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d075      	beq.n	8003128 <__ssvfiscanf_r+0x1c0>
 800303c:	2303      	movs	r3, #3
 800303e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003040:	230a      	movs	r3, #10
 8003042:	9342      	str	r3, [sp, #264]	; 0x108
 8003044:	e082      	b.n	800314c <__ssvfiscanf_r+0x1e4>
 8003046:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003048:	465d      	mov	r5, fp
 800304a:	fb02 1303 	mla	r3, r2, r3, r1
 800304e:	3b30      	subs	r3, #48	; 0x30
 8003050:	9343      	str	r3, [sp, #268]	; 0x10c
 8003052:	e7d3      	b.n	8002ffc <__ssvfiscanf_r+0x94>
 8003054:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003058:	2a20      	cmp	r2, #32
 800305a:	d8ef      	bhi.n	800303c <__ssvfiscanf_r+0xd4>
 800305c:	a101      	add	r1, pc, #4	; (adr r1, 8003064 <__ssvfiscanf_r+0xfc>)
 800305e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003137 	.word	0x08003137
 8003068:	0800303d 	.word	0x0800303d
 800306c:	0800303d 	.word	0x0800303d
 8003070:	08003195 	.word	0x08003195
 8003074:	0800303d 	.word	0x0800303d
 8003078:	0800303d 	.word	0x0800303d
 800307c:	0800303d 	.word	0x0800303d
 8003080:	0800303d 	.word	0x0800303d
 8003084:	0800303d 	.word	0x0800303d
 8003088:	0800303d 	.word	0x0800303d
 800308c:	0800303d 	.word	0x0800303d
 8003090:	080031ab 	.word	0x080031ab
 8003094:	08003181 	.word	0x08003181
 8003098:	080030ef 	.word	0x080030ef
 800309c:	080030ef 	.word	0x080030ef
 80030a0:	080030ef 	.word	0x080030ef
 80030a4:	0800303d 	.word	0x0800303d
 80030a8:	08003185 	.word	0x08003185
 80030ac:	0800303d 	.word	0x0800303d
 80030b0:	0800303d 	.word	0x0800303d
 80030b4:	0800303d 	.word	0x0800303d
 80030b8:	0800303d 	.word	0x0800303d
 80030bc:	080031bb 	.word	0x080031bb
 80030c0:	0800318d 	.word	0x0800318d
 80030c4:	0800312f 	.word	0x0800312f
 80030c8:	0800303d 	.word	0x0800303d
 80030cc:	0800303d 	.word	0x0800303d
 80030d0:	080031b7 	.word	0x080031b7
 80030d4:	0800303d 	.word	0x0800303d
 80030d8:	08003181 	.word	0x08003181
 80030dc:	0800303d 	.word	0x0800303d
 80030e0:	0800303d 	.word	0x0800303d
 80030e4:	08003137 	.word	0x08003137
 80030e8:	3b45      	subs	r3, #69	; 0x45
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d8a6      	bhi.n	800303c <__ssvfiscanf_r+0xd4>
 80030ee:	2305      	movs	r3, #5
 80030f0:	e02b      	b.n	800314a <__ssvfiscanf_r+0x1e2>
 80030f2:	6863      	ldr	r3, [r4, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	dd0d      	ble.n	8003114 <__ssvfiscanf_r+0x1ac>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	4552      	cmp	r2, sl
 80030fe:	f040 80a1 	bne.w	8003244 <__ssvfiscanf_r+0x2dc>
 8003102:	3301      	adds	r3, #1
 8003104:	6862      	ldr	r2, [r4, #4]
 8003106:	6023      	str	r3, [r4, #0]
 8003108:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800310a:	3a01      	subs	r2, #1
 800310c:	3301      	adds	r3, #1
 800310e:	6062      	str	r2, [r4, #4]
 8003110:	9345      	str	r3, [sp, #276]	; 0x114
 8003112:	e752      	b.n	8002fba <__ssvfiscanf_r+0x52>
 8003114:	4621      	mov	r1, r4
 8003116:	4630      	mov	r0, r6
 8003118:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800311a:	4798      	blx	r3
 800311c:	2800      	cmp	r0, #0
 800311e:	d0eb      	beq.n	80030f8 <__ssvfiscanf_r+0x190>
 8003120:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 8084 	bne.w	8003230 <__ssvfiscanf_r+0x2c8>
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	e086      	b.n	800323c <__ssvfiscanf_r+0x2d4>
 800312e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	9241      	str	r2, [sp, #260]	; 0x104
 8003136:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	9241      	str	r2, [sp, #260]	; 0x104
 800313e:	2210      	movs	r2, #16
 8003140:	2b6f      	cmp	r3, #111	; 0x6f
 8003142:	bf34      	ite	cc
 8003144:	2303      	movcc	r3, #3
 8003146:	2304      	movcs	r3, #4
 8003148:	9242      	str	r2, [sp, #264]	; 0x108
 800314a:	9347      	str	r3, [sp, #284]	; 0x11c
 800314c:	6863      	ldr	r3, [r4, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	dd41      	ble.n	80031d6 <__ssvfiscanf_r+0x26e>
 8003152:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003154:	0659      	lsls	r1, r3, #25
 8003156:	d404      	bmi.n	8003162 <__ssvfiscanf_r+0x1fa>
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	5cba      	ldrb	r2, [r7, r2]
 800315e:	0712      	lsls	r2, r2, #28
 8003160:	d440      	bmi.n	80031e4 <__ssvfiscanf_r+0x27c>
 8003162:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003164:	2b02      	cmp	r3, #2
 8003166:	dc4f      	bgt.n	8003208 <__ssvfiscanf_r+0x2a0>
 8003168:	466b      	mov	r3, sp
 800316a:	4622      	mov	r2, r4
 800316c:	4630      	mov	r0, r6
 800316e:	a941      	add	r1, sp, #260	; 0x104
 8003170:	f000 f874 	bl	800325c <_scanf_chars>
 8003174:	2801      	cmp	r0, #1
 8003176:	d065      	beq.n	8003244 <__ssvfiscanf_r+0x2dc>
 8003178:	2802      	cmp	r0, #2
 800317a:	f47f af1e 	bne.w	8002fba <__ssvfiscanf_r+0x52>
 800317e:	e7cf      	b.n	8003120 <__ssvfiscanf_r+0x1b8>
 8003180:	220a      	movs	r2, #10
 8003182:	e7dd      	b.n	8003140 <__ssvfiscanf_r+0x1d8>
 8003184:	2300      	movs	r3, #0
 8003186:	9342      	str	r3, [sp, #264]	; 0x108
 8003188:	2303      	movs	r3, #3
 800318a:	e7de      	b.n	800314a <__ssvfiscanf_r+0x1e2>
 800318c:	2308      	movs	r3, #8
 800318e:	9342      	str	r3, [sp, #264]	; 0x108
 8003190:	2304      	movs	r3, #4
 8003192:	e7da      	b.n	800314a <__ssvfiscanf_r+0x1e2>
 8003194:	4629      	mov	r1, r5
 8003196:	4640      	mov	r0, r8
 8003198:	f000 f9aa 	bl	80034f0 <__sccl>
 800319c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800319e:	4605      	mov	r5, r0
 80031a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a4:	9341      	str	r3, [sp, #260]	; 0x104
 80031a6:	2301      	movs	r3, #1
 80031a8:	e7cf      	b.n	800314a <__ssvfiscanf_r+0x1e2>
 80031aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80031ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b0:	9341      	str	r3, [sp, #260]	; 0x104
 80031b2:	2300      	movs	r3, #0
 80031b4:	e7c9      	b.n	800314a <__ssvfiscanf_r+0x1e2>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e7c7      	b.n	800314a <__ssvfiscanf_r+0x1e2>
 80031ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80031bc:	06c3      	lsls	r3, r0, #27
 80031be:	f53f aefc 	bmi.w	8002fba <__ssvfiscanf_r+0x52>
 80031c2:	9b00      	ldr	r3, [sp, #0]
 80031c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80031c6:	1d19      	adds	r1, r3, #4
 80031c8:	9100      	str	r1, [sp, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	07c0      	lsls	r0, r0, #31
 80031ce:	bf4c      	ite	mi
 80031d0:	801a      	strhmi	r2, [r3, #0]
 80031d2:	601a      	strpl	r2, [r3, #0]
 80031d4:	e6f1      	b.n	8002fba <__ssvfiscanf_r+0x52>
 80031d6:	4621      	mov	r1, r4
 80031d8:	4630      	mov	r0, r6
 80031da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80031dc:	4798      	blx	r3
 80031de:	2800      	cmp	r0, #0
 80031e0:	d0b7      	beq.n	8003152 <__ssvfiscanf_r+0x1ea>
 80031e2:	e79d      	b.n	8003120 <__ssvfiscanf_r+0x1b8>
 80031e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80031e6:	3201      	adds	r2, #1
 80031e8:	9245      	str	r2, [sp, #276]	; 0x114
 80031ea:	6862      	ldr	r2, [r4, #4]
 80031ec:	3a01      	subs	r2, #1
 80031ee:	2a00      	cmp	r2, #0
 80031f0:	6062      	str	r2, [r4, #4]
 80031f2:	dd02      	ble.n	80031fa <__ssvfiscanf_r+0x292>
 80031f4:	3301      	adds	r3, #1
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	e7ae      	b.n	8003158 <__ssvfiscanf_r+0x1f0>
 80031fa:	4621      	mov	r1, r4
 80031fc:	4630      	mov	r0, r6
 80031fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003200:	4798      	blx	r3
 8003202:	2800      	cmp	r0, #0
 8003204:	d0a8      	beq.n	8003158 <__ssvfiscanf_r+0x1f0>
 8003206:	e78b      	b.n	8003120 <__ssvfiscanf_r+0x1b8>
 8003208:	2b04      	cmp	r3, #4
 800320a:	dc06      	bgt.n	800321a <__ssvfiscanf_r+0x2b2>
 800320c:	466b      	mov	r3, sp
 800320e:	4622      	mov	r2, r4
 8003210:	4630      	mov	r0, r6
 8003212:	a941      	add	r1, sp, #260	; 0x104
 8003214:	f000 f87a 	bl	800330c <_scanf_i>
 8003218:	e7ac      	b.n	8003174 <__ssvfiscanf_r+0x20c>
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <__ssvfiscanf_r+0x2f0>)
 800321c:	2b00      	cmp	r3, #0
 800321e:	f43f aecc 	beq.w	8002fba <__ssvfiscanf_r+0x52>
 8003222:	466b      	mov	r3, sp
 8003224:	4622      	mov	r2, r4
 8003226:	4630      	mov	r0, r6
 8003228:	a941      	add	r1, sp, #260	; 0x104
 800322a:	f3af 8000 	nop.w
 800322e:	e7a1      	b.n	8003174 <__ssvfiscanf_r+0x20c>
 8003230:	89a3      	ldrh	r3, [r4, #12]
 8003232:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003236:	bf18      	it	ne
 8003238:	f04f 30ff 	movne.w	r0, #4294967295
 800323c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003244:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003246:	e7f9      	b.n	800323c <__ssvfiscanf_r+0x2d4>
 8003248:	08002eb3 	.word	0x08002eb3
 800324c:	08002f2d 	.word	0x08002f2d
 8003250:	08003d50 	.word	0x08003d50
 8003254:	08003d30 	.word	0x08003d30
 8003258:	00000000 	.word	0x00000000

0800325c <_scanf_chars>:
 800325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003260:	4615      	mov	r5, r2
 8003262:	688a      	ldr	r2, [r1, #8]
 8003264:	4680      	mov	r8, r0
 8003266:	460c      	mov	r4, r1
 8003268:	b932      	cbnz	r2, 8003278 <_scanf_chars+0x1c>
 800326a:	698a      	ldr	r2, [r1, #24]
 800326c:	2a00      	cmp	r2, #0
 800326e:	bf0c      	ite	eq
 8003270:	2201      	moveq	r2, #1
 8003272:	f04f 32ff 	movne.w	r2, #4294967295
 8003276:	608a      	str	r2, [r1, #8]
 8003278:	2700      	movs	r7, #0
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003308 <_scanf_chars+0xac>
 8003280:	06d1      	lsls	r1, r2, #27
 8003282:	bf5f      	itttt	pl
 8003284:	681a      	ldrpl	r2, [r3, #0]
 8003286:	1d11      	addpl	r1, r2, #4
 8003288:	6019      	strpl	r1, [r3, #0]
 800328a:	6816      	ldrpl	r6, [r2, #0]
 800328c:	69a0      	ldr	r0, [r4, #24]
 800328e:	b188      	cbz	r0, 80032b4 <_scanf_chars+0x58>
 8003290:	2801      	cmp	r0, #1
 8003292:	d107      	bne.n	80032a4 <_scanf_chars+0x48>
 8003294:	682b      	ldr	r3, [r5, #0]
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	6963      	ldr	r3, [r4, #20]
 800329a:	5c9b      	ldrb	r3, [r3, r2]
 800329c:	b953      	cbnz	r3, 80032b4 <_scanf_chars+0x58>
 800329e:	bb27      	cbnz	r7, 80032ea <_scanf_chars+0x8e>
 80032a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032a4:	2802      	cmp	r0, #2
 80032a6:	d120      	bne.n	80032ea <_scanf_chars+0x8e>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f813 3009 	ldrb.w	r3, [r3, r9]
 80032b0:	071b      	lsls	r3, r3, #28
 80032b2:	d41a      	bmi.n	80032ea <_scanf_chars+0x8e>
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	3701      	adds	r7, #1
 80032b8:	06da      	lsls	r2, r3, #27
 80032ba:	bf5e      	ittt	pl
 80032bc:	682b      	ldrpl	r3, [r5, #0]
 80032be:	781b      	ldrbpl	r3, [r3, #0]
 80032c0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80032c4:	682a      	ldr	r2, [r5, #0]
 80032c6:	686b      	ldr	r3, [r5, #4]
 80032c8:	3201      	adds	r2, #1
 80032ca:	602a      	str	r2, [r5, #0]
 80032cc:	68a2      	ldr	r2, [r4, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	606b      	str	r3, [r5, #4]
 80032d4:	60a2      	str	r2, [r4, #8]
 80032d6:	b142      	cbz	r2, 80032ea <_scanf_chars+0x8e>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dcd7      	bgt.n	800328c <_scanf_chars+0x30>
 80032dc:	4629      	mov	r1, r5
 80032de:	4640      	mov	r0, r8
 80032e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80032e4:	4798      	blx	r3
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d0d0      	beq.n	800328c <_scanf_chars+0x30>
 80032ea:	6823      	ldr	r3, [r4, #0]
 80032ec:	f013 0310 	ands.w	r3, r3, #16
 80032f0:	d105      	bne.n	80032fe <_scanf_chars+0xa2>
 80032f2:	68e2      	ldr	r2, [r4, #12]
 80032f4:	3201      	adds	r2, #1
 80032f6:	60e2      	str	r2, [r4, #12]
 80032f8:	69a2      	ldr	r2, [r4, #24]
 80032fa:	b102      	cbz	r2, 80032fe <_scanf_chars+0xa2>
 80032fc:	7033      	strb	r3, [r6, #0]
 80032fe:	6923      	ldr	r3, [r4, #16]
 8003300:	2000      	movs	r0, #0
 8003302:	441f      	add	r7, r3
 8003304:	6127      	str	r7, [r4, #16]
 8003306:	e7cb      	b.n	80032a0 <_scanf_chars+0x44>
 8003308:	08003d50 	.word	0x08003d50

0800330c <_scanf_i>:
 800330c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003310:	460c      	mov	r4, r1
 8003312:	4698      	mov	r8, r3
 8003314:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <_scanf_i+0x1d4>)
 8003316:	b087      	sub	sp, #28
 8003318:	4682      	mov	sl, r0
 800331a:	4616      	mov	r6, r2
 800331c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003320:	ab03      	add	r3, sp, #12
 8003322:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003326:	4b6f      	ldr	r3, [pc, #444]	; (80034e4 <_scanf_i+0x1d8>)
 8003328:	69a1      	ldr	r1, [r4, #24]
 800332a:	4a6f      	ldr	r2, [pc, #444]	; (80034e8 <_scanf_i+0x1dc>)
 800332c:	4627      	mov	r7, r4
 800332e:	2903      	cmp	r1, #3
 8003330:	bf18      	it	ne
 8003332:	461a      	movne	r2, r3
 8003334:	68a3      	ldr	r3, [r4, #8]
 8003336:	9201      	str	r2, [sp, #4]
 8003338:	1e5a      	subs	r2, r3, #1
 800333a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800333e:	bf81      	itttt	hi
 8003340:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003344:	eb03 0905 	addhi.w	r9, r3, r5
 8003348:	f240 135d 	movwhi	r3, #349	; 0x15d
 800334c:	60a3      	strhi	r3, [r4, #8]
 800334e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003352:	bf98      	it	ls
 8003354:	f04f 0900 	movls.w	r9, #0
 8003358:	463d      	mov	r5, r7
 800335a:	f04f 0b00 	mov.w	fp, #0
 800335e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003362:	6023      	str	r3, [r4, #0]
 8003364:	6831      	ldr	r1, [r6, #0]
 8003366:	ab03      	add	r3, sp, #12
 8003368:	2202      	movs	r2, #2
 800336a:	7809      	ldrb	r1, [r1, #0]
 800336c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003370:	f000 fa38 	bl	80037e4 <memchr>
 8003374:	b328      	cbz	r0, 80033c2 <_scanf_i+0xb6>
 8003376:	f1bb 0f01 	cmp.w	fp, #1
 800337a:	d159      	bne.n	8003430 <_scanf_i+0x124>
 800337c:	6862      	ldr	r2, [r4, #4]
 800337e:	b92a      	cbnz	r2, 800338c <_scanf_i+0x80>
 8003380:	2308      	movs	r3, #8
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	6063      	str	r3, [r4, #4]
 8003386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800338a:	6022      	str	r2, [r4, #0]
 800338c:	6822      	ldr	r2, [r4, #0]
 800338e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003392:	6022      	str	r2, [r4, #0]
 8003394:	68a2      	ldr	r2, [r4, #8]
 8003396:	1e51      	subs	r1, r2, #1
 8003398:	60a1      	str	r1, [r4, #8]
 800339a:	b192      	cbz	r2, 80033c2 <_scanf_i+0xb6>
 800339c:	6832      	ldr	r2, [r6, #0]
 800339e:	1c51      	adds	r1, r2, #1
 80033a0:	6031      	str	r1, [r6, #0]
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	f805 2b01 	strb.w	r2, [r5], #1
 80033a8:	6872      	ldr	r2, [r6, #4]
 80033aa:	3a01      	subs	r2, #1
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	6072      	str	r2, [r6, #4]
 80033b0:	dc07      	bgt.n	80033c2 <_scanf_i+0xb6>
 80033b2:	4631      	mov	r1, r6
 80033b4:	4650      	mov	r0, sl
 80033b6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80033ba:	4790      	blx	r2
 80033bc:	2800      	cmp	r0, #0
 80033be:	f040 8085 	bne.w	80034cc <_scanf_i+0x1c0>
 80033c2:	f10b 0b01 	add.w	fp, fp, #1
 80033c6:	f1bb 0f03 	cmp.w	fp, #3
 80033ca:	d1cb      	bne.n	8003364 <_scanf_i+0x58>
 80033cc:	6863      	ldr	r3, [r4, #4]
 80033ce:	b90b      	cbnz	r3, 80033d4 <_scanf_i+0xc8>
 80033d0:	230a      	movs	r3, #10
 80033d2:	6063      	str	r3, [r4, #4]
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	4945      	ldr	r1, [pc, #276]	; (80034ec <_scanf_i+0x1e0>)
 80033d8:	6960      	ldr	r0, [r4, #20]
 80033da:	1ac9      	subs	r1, r1, r3
 80033dc:	f000 f888 	bl	80034f0 <__sccl>
 80033e0:	f04f 0b00 	mov.w	fp, #0
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03d      	beq.n	8003468 <_scanf_i+0x15c>
 80033ec:	6831      	ldr	r1, [r6, #0]
 80033ee:	6960      	ldr	r0, [r4, #20]
 80033f0:	f891 c000 	ldrb.w	ip, [r1]
 80033f4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d035      	beq.n	8003468 <_scanf_i+0x15c>
 80033fc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003400:	d124      	bne.n	800344c <_scanf_i+0x140>
 8003402:	0510      	lsls	r0, r2, #20
 8003404:	d522      	bpl.n	800344c <_scanf_i+0x140>
 8003406:	f10b 0b01 	add.w	fp, fp, #1
 800340a:	f1b9 0f00 	cmp.w	r9, #0
 800340e:	d003      	beq.n	8003418 <_scanf_i+0x10c>
 8003410:	3301      	adds	r3, #1
 8003412:	f109 39ff 	add.w	r9, r9, #4294967295
 8003416:	60a3      	str	r3, [r4, #8]
 8003418:	6873      	ldr	r3, [r6, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	6073      	str	r3, [r6, #4]
 8003420:	dd1b      	ble.n	800345a <_scanf_i+0x14e>
 8003422:	6833      	ldr	r3, [r6, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	6033      	str	r3, [r6, #0]
 8003428:	68a3      	ldr	r3, [r4, #8]
 800342a:	3b01      	subs	r3, #1
 800342c:	60a3      	str	r3, [r4, #8]
 800342e:	e7d9      	b.n	80033e4 <_scanf_i+0xd8>
 8003430:	f1bb 0f02 	cmp.w	fp, #2
 8003434:	d1ae      	bne.n	8003394 <_scanf_i+0x88>
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800343c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003440:	d1bf      	bne.n	80033c2 <_scanf_i+0xb6>
 8003442:	2310      	movs	r3, #16
 8003444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003448:	6063      	str	r3, [r4, #4]
 800344a:	e7a2      	b.n	8003392 <_scanf_i+0x86>
 800344c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003450:	6022      	str	r2, [r4, #0]
 8003452:	780b      	ldrb	r3, [r1, #0]
 8003454:	f805 3b01 	strb.w	r3, [r5], #1
 8003458:	e7de      	b.n	8003418 <_scanf_i+0x10c>
 800345a:	4631      	mov	r1, r6
 800345c:	4650      	mov	r0, sl
 800345e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003462:	4798      	blx	r3
 8003464:	2800      	cmp	r0, #0
 8003466:	d0df      	beq.n	8003428 <_scanf_i+0x11c>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	05d9      	lsls	r1, r3, #23
 800346c:	d50d      	bpl.n	800348a <_scanf_i+0x17e>
 800346e:	42bd      	cmp	r5, r7
 8003470:	d909      	bls.n	8003486 <_scanf_i+0x17a>
 8003472:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003476:	4632      	mov	r2, r6
 8003478:	4650      	mov	r0, sl
 800347a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800347e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003482:	4798      	blx	r3
 8003484:	464d      	mov	r5, r9
 8003486:	42bd      	cmp	r5, r7
 8003488:	d028      	beq.n	80034dc <_scanf_i+0x1d0>
 800348a:	6822      	ldr	r2, [r4, #0]
 800348c:	f012 0210 	ands.w	r2, r2, #16
 8003490:	d113      	bne.n	80034ba <_scanf_i+0x1ae>
 8003492:	702a      	strb	r2, [r5, #0]
 8003494:	4639      	mov	r1, r7
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	4650      	mov	r0, sl
 800349a:	9e01      	ldr	r6, [sp, #4]
 800349c:	47b0      	blx	r6
 800349e:	f8d8 3000 	ldr.w	r3, [r8]
 80034a2:	6821      	ldr	r1, [r4, #0]
 80034a4:	1d1a      	adds	r2, r3, #4
 80034a6:	f8c8 2000 	str.w	r2, [r8]
 80034aa:	f011 0f20 	tst.w	r1, #32
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	d00f      	beq.n	80034d2 <_scanf_i+0x1c6>
 80034b2:	6018      	str	r0, [r3, #0]
 80034b4:	68e3      	ldr	r3, [r4, #12]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60e3      	str	r3, [r4, #12]
 80034ba:	2000      	movs	r0, #0
 80034bc:	1bed      	subs	r5, r5, r7
 80034be:	44ab      	add	fp, r5
 80034c0:	6925      	ldr	r5, [r4, #16]
 80034c2:	445d      	add	r5, fp
 80034c4:	6125      	str	r5, [r4, #16]
 80034c6:	b007      	add	sp, #28
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	f04f 0b00 	mov.w	fp, #0
 80034d0:	e7ca      	b.n	8003468 <_scanf_i+0x15c>
 80034d2:	07ca      	lsls	r2, r1, #31
 80034d4:	bf4c      	ite	mi
 80034d6:	8018      	strhmi	r0, [r3, #0]
 80034d8:	6018      	strpl	r0, [r3, #0]
 80034da:	e7eb      	b.n	80034b4 <_scanf_i+0x1a8>
 80034dc:	2001      	movs	r0, #1
 80034de:	e7f2      	b.n	80034c6 <_scanf_i+0x1ba>
 80034e0:	08003d0c 	.word	0x08003d0c
 80034e4:	0800376d 	.word	0x0800376d
 80034e8:	08003671 	.word	0x08003671
 80034ec:	08003d4d 	.word	0x08003d4d

080034f0 <__sccl>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	780b      	ldrb	r3, [r1, #0]
 80034f4:	4604      	mov	r4, r0
 80034f6:	2b5e      	cmp	r3, #94	; 0x5e
 80034f8:	bf13      	iteet	ne
 80034fa:	2200      	movne	r2, #0
 80034fc:	2201      	moveq	r2, #1
 80034fe:	784b      	ldrbeq	r3, [r1, #1]
 8003500:	1c48      	addne	r0, r1, #1
 8003502:	bf08      	it	eq
 8003504:	1c88      	addeq	r0, r1, #2
 8003506:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800350a:	1e61      	subs	r1, r4, #1
 800350c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003510:	42a9      	cmp	r1, r5
 8003512:	d1fb      	bne.n	800350c <__sccl+0x1c>
 8003514:	b90b      	cbnz	r3, 800351a <__sccl+0x2a>
 8003516:	3801      	subs	r0, #1
 8003518:	bd70      	pop	{r4, r5, r6, pc}
 800351a:	f082 0101 	eor.w	r1, r2, #1
 800351e:	54e1      	strb	r1, [r4, r3]
 8003520:	1c42      	adds	r2, r0, #1
 8003522:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003526:	4610      	mov	r0, r2
 8003528:	2d2d      	cmp	r5, #45	; 0x2d
 800352a:	f102 36ff 	add.w	r6, r2, #4294967295
 800352e:	d006      	beq.n	800353e <__sccl+0x4e>
 8003530:	2d5d      	cmp	r5, #93	; 0x5d
 8003532:	d0f1      	beq.n	8003518 <__sccl+0x28>
 8003534:	b90d      	cbnz	r5, 800353a <__sccl+0x4a>
 8003536:	4630      	mov	r0, r6
 8003538:	e7ee      	b.n	8003518 <__sccl+0x28>
 800353a:	462b      	mov	r3, r5
 800353c:	e7ef      	b.n	800351e <__sccl+0x2e>
 800353e:	7816      	ldrb	r6, [r2, #0]
 8003540:	2e5d      	cmp	r6, #93	; 0x5d
 8003542:	d0fa      	beq.n	800353a <__sccl+0x4a>
 8003544:	42b3      	cmp	r3, r6
 8003546:	dcf8      	bgt.n	800353a <__sccl+0x4a>
 8003548:	4618      	mov	r0, r3
 800354a:	3001      	adds	r0, #1
 800354c:	4286      	cmp	r6, r0
 800354e:	5421      	strb	r1, [r4, r0]
 8003550:	dcfb      	bgt.n	800354a <__sccl+0x5a>
 8003552:	43d8      	mvns	r0, r3
 8003554:	4430      	add	r0, r6
 8003556:	42b3      	cmp	r3, r6
 8003558:	bfa8      	it	ge
 800355a:	2000      	movge	r0, #0
 800355c:	1c5d      	adds	r5, r3, #1
 800355e:	182b      	adds	r3, r5, r0
 8003560:	3202      	adds	r2, #2
 8003562:	e7de      	b.n	8003522 <__sccl+0x32>

08003564 <_strtol_l.isra.0>:
 8003564:	2b01      	cmp	r3, #1
 8003566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356a:	4686      	mov	lr, r0
 800356c:	d001      	beq.n	8003572 <_strtol_l.isra.0+0xe>
 800356e:	2b24      	cmp	r3, #36	; 0x24
 8003570:	d906      	bls.n	8003580 <_strtol_l.isra.0+0x1c>
 8003572:	f7ff fc29 	bl	8002dc8 <__errno>
 8003576:	2316      	movs	r3, #22
 8003578:	6003      	str	r3, [r0, #0]
 800357a:	2000      	movs	r0, #0
 800357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003580:	468c      	mov	ip, r1
 8003582:	4e3a      	ldr	r6, [pc, #232]	; (800366c <_strtol_l.isra.0+0x108>)
 8003584:	4660      	mov	r0, ip
 8003586:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800358a:	5da5      	ldrb	r5, [r4, r6]
 800358c:	f015 0508 	ands.w	r5, r5, #8
 8003590:	d1f8      	bne.n	8003584 <_strtol_l.isra.0+0x20>
 8003592:	2c2d      	cmp	r4, #45	; 0x2d
 8003594:	d133      	bne.n	80035fe <_strtol_l.isra.0+0x9a>
 8003596:	f04f 0801 	mov.w	r8, #1
 800359a:	f89c 4000 	ldrb.w	r4, [ip]
 800359e:	f100 0c02 	add.w	ip, r0, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d05d      	beq.n	8003662 <_strtol_l.isra.0+0xfe>
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d10c      	bne.n	80035c4 <_strtol_l.isra.0+0x60>
 80035aa:	2c30      	cmp	r4, #48	; 0x30
 80035ac:	d10a      	bne.n	80035c4 <_strtol_l.isra.0+0x60>
 80035ae:	f89c 0000 	ldrb.w	r0, [ip]
 80035b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80035b6:	2858      	cmp	r0, #88	; 0x58
 80035b8:	d14e      	bne.n	8003658 <_strtol_l.isra.0+0xf4>
 80035ba:	2310      	movs	r3, #16
 80035bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80035c0:	f10c 0c02 	add.w	ip, ip, #2
 80035c4:	2500      	movs	r5, #0
 80035c6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80035ca:	3f01      	subs	r7, #1
 80035cc:	fbb7 f9f3 	udiv	r9, r7, r3
 80035d0:	4628      	mov	r0, r5
 80035d2:	fb03 7a19 	mls	sl, r3, r9, r7
 80035d6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80035da:	2e09      	cmp	r6, #9
 80035dc:	d818      	bhi.n	8003610 <_strtol_l.isra.0+0xac>
 80035de:	4634      	mov	r4, r6
 80035e0:	42a3      	cmp	r3, r4
 80035e2:	dd24      	ble.n	800362e <_strtol_l.isra.0+0xca>
 80035e4:	2d00      	cmp	r5, #0
 80035e6:	db1f      	blt.n	8003628 <_strtol_l.isra.0+0xc4>
 80035e8:	4581      	cmp	r9, r0
 80035ea:	d31d      	bcc.n	8003628 <_strtol_l.isra.0+0xc4>
 80035ec:	d101      	bne.n	80035f2 <_strtol_l.isra.0+0x8e>
 80035ee:	45a2      	cmp	sl, r4
 80035f0:	db1a      	blt.n	8003628 <_strtol_l.isra.0+0xc4>
 80035f2:	2501      	movs	r5, #1
 80035f4:	fb00 4003 	mla	r0, r0, r3, r4
 80035f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80035fc:	e7eb      	b.n	80035d6 <_strtol_l.isra.0+0x72>
 80035fe:	2c2b      	cmp	r4, #43	; 0x2b
 8003600:	bf08      	it	eq
 8003602:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003606:	46a8      	mov	r8, r5
 8003608:	bf08      	it	eq
 800360a:	f100 0c02 	addeq.w	ip, r0, #2
 800360e:	e7c8      	b.n	80035a2 <_strtol_l.isra.0+0x3e>
 8003610:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003614:	2e19      	cmp	r6, #25
 8003616:	d801      	bhi.n	800361c <_strtol_l.isra.0+0xb8>
 8003618:	3c37      	subs	r4, #55	; 0x37
 800361a:	e7e1      	b.n	80035e0 <_strtol_l.isra.0+0x7c>
 800361c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003620:	2e19      	cmp	r6, #25
 8003622:	d804      	bhi.n	800362e <_strtol_l.isra.0+0xca>
 8003624:	3c57      	subs	r4, #87	; 0x57
 8003626:	e7db      	b.n	80035e0 <_strtol_l.isra.0+0x7c>
 8003628:	f04f 35ff 	mov.w	r5, #4294967295
 800362c:	e7e4      	b.n	80035f8 <_strtol_l.isra.0+0x94>
 800362e:	2d00      	cmp	r5, #0
 8003630:	da08      	bge.n	8003644 <_strtol_l.isra.0+0xe0>
 8003632:	2322      	movs	r3, #34	; 0x22
 8003634:	4638      	mov	r0, r7
 8003636:	f8ce 3000 	str.w	r3, [lr]
 800363a:	2a00      	cmp	r2, #0
 800363c:	d09e      	beq.n	800357c <_strtol_l.isra.0+0x18>
 800363e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003642:	e007      	b.n	8003654 <_strtol_l.isra.0+0xf0>
 8003644:	f1b8 0f00 	cmp.w	r8, #0
 8003648:	d000      	beq.n	800364c <_strtol_l.isra.0+0xe8>
 800364a:	4240      	negs	r0, r0
 800364c:	2a00      	cmp	r2, #0
 800364e:	d095      	beq.n	800357c <_strtol_l.isra.0+0x18>
 8003650:	2d00      	cmp	r5, #0
 8003652:	d1f4      	bne.n	800363e <_strtol_l.isra.0+0xda>
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	e791      	b.n	800357c <_strtol_l.isra.0+0x18>
 8003658:	2430      	movs	r4, #48	; 0x30
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1b2      	bne.n	80035c4 <_strtol_l.isra.0+0x60>
 800365e:	2308      	movs	r3, #8
 8003660:	e7b0      	b.n	80035c4 <_strtol_l.isra.0+0x60>
 8003662:	2c30      	cmp	r4, #48	; 0x30
 8003664:	d0a3      	beq.n	80035ae <_strtol_l.isra.0+0x4a>
 8003666:	230a      	movs	r3, #10
 8003668:	e7ac      	b.n	80035c4 <_strtol_l.isra.0+0x60>
 800366a:	bf00      	nop
 800366c:	08003d50 	.word	0x08003d50

08003670 <_strtol_r>:
 8003670:	f7ff bf78 	b.w	8003564 <_strtol_l.isra.0>

08003674 <_strtoul_l.isra.0>:
 8003674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003678:	468c      	mov	ip, r1
 800367a:	4686      	mov	lr, r0
 800367c:	4e3a      	ldr	r6, [pc, #232]	; (8003768 <_strtoul_l.isra.0+0xf4>)
 800367e:	4660      	mov	r0, ip
 8003680:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003684:	5da5      	ldrb	r5, [r4, r6]
 8003686:	f015 0508 	ands.w	r5, r5, #8
 800368a:	d1f8      	bne.n	800367e <_strtoul_l.isra.0+0xa>
 800368c:	2c2d      	cmp	r4, #45	; 0x2d
 800368e:	d134      	bne.n	80036fa <_strtoul_l.isra.0+0x86>
 8003690:	f04f 0801 	mov.w	r8, #1
 8003694:	f89c 4000 	ldrb.w	r4, [ip]
 8003698:	f100 0c02 	add.w	ip, r0, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05e      	beq.n	800375e <_strtoul_l.isra.0+0xea>
 80036a0:	2b10      	cmp	r3, #16
 80036a2:	d10c      	bne.n	80036be <_strtoul_l.isra.0+0x4a>
 80036a4:	2c30      	cmp	r4, #48	; 0x30
 80036a6:	d10a      	bne.n	80036be <_strtoul_l.isra.0+0x4a>
 80036a8:	f89c 0000 	ldrb.w	r0, [ip]
 80036ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80036b0:	2858      	cmp	r0, #88	; 0x58
 80036b2:	d14f      	bne.n	8003754 <_strtoul_l.isra.0+0xe0>
 80036b4:	2310      	movs	r3, #16
 80036b6:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80036ba:	f10c 0c02 	add.w	ip, ip, #2
 80036be:	f04f 37ff 	mov.w	r7, #4294967295
 80036c2:	fbb7 f7f3 	udiv	r7, r7, r3
 80036c6:	2500      	movs	r5, #0
 80036c8:	fb03 f907 	mul.w	r9, r3, r7
 80036cc:	4628      	mov	r0, r5
 80036ce:	ea6f 0909 	mvn.w	r9, r9
 80036d2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80036d6:	2e09      	cmp	r6, #9
 80036d8:	d818      	bhi.n	800370c <_strtoul_l.isra.0+0x98>
 80036da:	4634      	mov	r4, r6
 80036dc:	42a3      	cmp	r3, r4
 80036de:	dd24      	ble.n	800372a <_strtoul_l.isra.0+0xb6>
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	db1f      	blt.n	8003724 <_strtoul_l.isra.0+0xb0>
 80036e4:	4287      	cmp	r7, r0
 80036e6:	d31d      	bcc.n	8003724 <_strtoul_l.isra.0+0xb0>
 80036e8:	d101      	bne.n	80036ee <_strtoul_l.isra.0+0x7a>
 80036ea:	45a1      	cmp	r9, r4
 80036ec:	db1a      	blt.n	8003724 <_strtoul_l.isra.0+0xb0>
 80036ee:	2501      	movs	r5, #1
 80036f0:	fb00 4003 	mla	r0, r0, r3, r4
 80036f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80036f8:	e7eb      	b.n	80036d2 <_strtoul_l.isra.0+0x5e>
 80036fa:	2c2b      	cmp	r4, #43	; 0x2b
 80036fc:	bf08      	it	eq
 80036fe:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003702:	46a8      	mov	r8, r5
 8003704:	bf08      	it	eq
 8003706:	f100 0c02 	addeq.w	ip, r0, #2
 800370a:	e7c7      	b.n	800369c <_strtoul_l.isra.0+0x28>
 800370c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003710:	2e19      	cmp	r6, #25
 8003712:	d801      	bhi.n	8003718 <_strtoul_l.isra.0+0xa4>
 8003714:	3c37      	subs	r4, #55	; 0x37
 8003716:	e7e1      	b.n	80036dc <_strtoul_l.isra.0+0x68>
 8003718:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800371c:	2e19      	cmp	r6, #25
 800371e:	d804      	bhi.n	800372a <_strtoul_l.isra.0+0xb6>
 8003720:	3c57      	subs	r4, #87	; 0x57
 8003722:	e7db      	b.n	80036dc <_strtoul_l.isra.0+0x68>
 8003724:	f04f 35ff 	mov.w	r5, #4294967295
 8003728:	e7e4      	b.n	80036f4 <_strtoul_l.isra.0+0x80>
 800372a:	2d00      	cmp	r5, #0
 800372c:	da07      	bge.n	800373e <_strtoul_l.isra.0+0xca>
 800372e:	2322      	movs	r3, #34	; 0x22
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f8ce 3000 	str.w	r3, [lr]
 8003738:	b942      	cbnz	r2, 800374c <_strtoul_l.isra.0+0xd8>
 800373a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800373e:	f1b8 0f00 	cmp.w	r8, #0
 8003742:	d000      	beq.n	8003746 <_strtoul_l.isra.0+0xd2>
 8003744:	4240      	negs	r0, r0
 8003746:	2a00      	cmp	r2, #0
 8003748:	d0f7      	beq.n	800373a <_strtoul_l.isra.0+0xc6>
 800374a:	b10d      	cbz	r5, 8003750 <_strtoul_l.isra.0+0xdc>
 800374c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	e7f2      	b.n	800373a <_strtoul_l.isra.0+0xc6>
 8003754:	2430      	movs	r4, #48	; 0x30
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1b1      	bne.n	80036be <_strtoul_l.isra.0+0x4a>
 800375a:	2308      	movs	r3, #8
 800375c:	e7af      	b.n	80036be <_strtoul_l.isra.0+0x4a>
 800375e:	2c30      	cmp	r4, #48	; 0x30
 8003760:	d0a2      	beq.n	80036a8 <_strtoul_l.isra.0+0x34>
 8003762:	230a      	movs	r3, #10
 8003764:	e7ab      	b.n	80036be <_strtoul_l.isra.0+0x4a>
 8003766:	bf00      	nop
 8003768:	08003d50 	.word	0x08003d50

0800376c <_strtoul_r>:
 800376c:	f7ff bf82 	b.w	8003674 <_strtoul_l.isra.0>

08003770 <__submore>:
 8003770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003774:	460c      	mov	r4, r1
 8003776:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800377c:	4299      	cmp	r1, r3
 800377e:	d11b      	bne.n	80037b8 <__submore+0x48>
 8003780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003784:	f000 f896 	bl	80038b4 <_malloc_r>
 8003788:	b918      	cbnz	r0, 8003792 <__submore+0x22>
 800378a:	f04f 30ff 	mov.w	r0, #4294967295
 800378e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003796:	63a3      	str	r3, [r4, #56]	; 0x38
 8003798:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800379c:	6360      	str	r0, [r4, #52]	; 0x34
 800379e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80037a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80037a6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80037aa:	7043      	strb	r3, [r0, #1]
 80037ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80037b0:	7003      	strb	r3, [r0, #0]
 80037b2:	6020      	str	r0, [r4, #0]
 80037b4:	2000      	movs	r0, #0
 80037b6:	e7ea      	b.n	800378e <__submore+0x1e>
 80037b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80037ba:	0077      	lsls	r7, r6, #1
 80037bc:	463a      	mov	r2, r7
 80037be:	f000 f8d3 	bl	8003968 <_realloc_r>
 80037c2:	4605      	mov	r5, r0
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d0e0      	beq.n	800378a <__submore+0x1a>
 80037c8:	eb00 0806 	add.w	r8, r0, r6
 80037cc:	4601      	mov	r1, r0
 80037ce:	4632      	mov	r2, r6
 80037d0:	4640      	mov	r0, r8
 80037d2:	f000 f815 	bl	8003800 <memcpy>
 80037d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80037da:	f8c4 8000 	str.w	r8, [r4]
 80037de:	e7e9      	b.n	80037b4 <__submore+0x44>

080037e0 <__retarget_lock_acquire_recursive>:
 80037e0:	4770      	bx	lr

080037e2 <__retarget_lock_release_recursive>:
 80037e2:	4770      	bx	lr

080037e4 <memchr>:
 80037e4:	4603      	mov	r3, r0
 80037e6:	b510      	push	{r4, lr}
 80037e8:	b2c9      	uxtb	r1, r1
 80037ea:	4402      	add	r2, r0
 80037ec:	4293      	cmp	r3, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	d101      	bne.n	80037f6 <memchr+0x12>
 80037f2:	2000      	movs	r0, #0
 80037f4:	e003      	b.n	80037fe <memchr+0x1a>
 80037f6:	7804      	ldrb	r4, [r0, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	428c      	cmp	r4, r1
 80037fc:	d1f6      	bne.n	80037ec <memchr+0x8>
 80037fe:	bd10      	pop	{r4, pc}

08003800 <memcpy>:
 8003800:	440a      	add	r2, r1
 8003802:	4291      	cmp	r1, r2
 8003804:	f100 33ff 	add.w	r3, r0, #4294967295
 8003808:	d100      	bne.n	800380c <memcpy+0xc>
 800380a:	4770      	bx	lr
 800380c:	b510      	push	{r4, lr}
 800380e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003812:	4291      	cmp	r1, r2
 8003814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003818:	d1f9      	bne.n	800380e <memcpy+0xe>
 800381a:	bd10      	pop	{r4, pc}

0800381c <_free_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4605      	mov	r5, r0
 8003820:	2900      	cmp	r1, #0
 8003822:	d043      	beq.n	80038ac <_free_r+0x90>
 8003824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003828:	1f0c      	subs	r4, r1, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfb8      	it	lt
 800382e:	18e4      	addlt	r4, r4, r3
 8003830:	f000 f8d0 	bl	80039d4 <__malloc_lock>
 8003834:	4a1e      	ldr	r2, [pc, #120]	; (80038b0 <_free_r+0x94>)
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	4610      	mov	r0, r2
 800383a:	b933      	cbnz	r3, 800384a <_free_r+0x2e>
 800383c:	6063      	str	r3, [r4, #4]
 800383e:	6014      	str	r4, [r2, #0]
 8003840:	4628      	mov	r0, r5
 8003842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003846:	f000 b8cb 	b.w	80039e0 <__malloc_unlock>
 800384a:	42a3      	cmp	r3, r4
 800384c:	d90a      	bls.n	8003864 <_free_r+0x48>
 800384e:	6821      	ldr	r1, [r4, #0]
 8003850:	1862      	adds	r2, r4, r1
 8003852:	4293      	cmp	r3, r2
 8003854:	bf01      	itttt	eq
 8003856:	681a      	ldreq	r2, [r3, #0]
 8003858:	685b      	ldreq	r3, [r3, #4]
 800385a:	1852      	addeq	r2, r2, r1
 800385c:	6022      	streq	r2, [r4, #0]
 800385e:	6063      	str	r3, [r4, #4]
 8003860:	6004      	str	r4, [r0, #0]
 8003862:	e7ed      	b.n	8003840 <_free_r+0x24>
 8003864:	461a      	mov	r2, r3
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	b10b      	cbz	r3, 800386e <_free_r+0x52>
 800386a:	42a3      	cmp	r3, r4
 800386c:	d9fa      	bls.n	8003864 <_free_r+0x48>
 800386e:	6811      	ldr	r1, [r2, #0]
 8003870:	1850      	adds	r0, r2, r1
 8003872:	42a0      	cmp	r0, r4
 8003874:	d10b      	bne.n	800388e <_free_r+0x72>
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	4401      	add	r1, r0
 800387a:	1850      	adds	r0, r2, r1
 800387c:	4283      	cmp	r3, r0
 800387e:	6011      	str	r1, [r2, #0]
 8003880:	d1de      	bne.n	8003840 <_free_r+0x24>
 8003882:	6818      	ldr	r0, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4401      	add	r1, r0
 8003888:	6011      	str	r1, [r2, #0]
 800388a:	6053      	str	r3, [r2, #4]
 800388c:	e7d8      	b.n	8003840 <_free_r+0x24>
 800388e:	d902      	bls.n	8003896 <_free_r+0x7a>
 8003890:	230c      	movs	r3, #12
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	e7d4      	b.n	8003840 <_free_r+0x24>
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	1821      	adds	r1, r4, r0
 800389a:	428b      	cmp	r3, r1
 800389c:	bf01      	itttt	eq
 800389e:	6819      	ldreq	r1, [r3, #0]
 80038a0:	685b      	ldreq	r3, [r3, #4]
 80038a2:	1809      	addeq	r1, r1, r0
 80038a4:	6021      	streq	r1, [r4, #0]
 80038a6:	6063      	str	r3, [r4, #4]
 80038a8:	6054      	str	r4, [r2, #4]
 80038aa:	e7c9      	b.n	8003840 <_free_r+0x24>
 80038ac:	bd38      	pop	{r3, r4, r5, pc}
 80038ae:	bf00      	nop
 80038b0:	20000098 	.word	0x20000098

080038b4 <_malloc_r>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	1ccd      	adds	r5, r1, #3
 80038b8:	f025 0503 	bic.w	r5, r5, #3
 80038bc:	3508      	adds	r5, #8
 80038be:	2d0c      	cmp	r5, #12
 80038c0:	bf38      	it	cc
 80038c2:	250c      	movcc	r5, #12
 80038c4:	2d00      	cmp	r5, #0
 80038c6:	4606      	mov	r6, r0
 80038c8:	db01      	blt.n	80038ce <_malloc_r+0x1a>
 80038ca:	42a9      	cmp	r1, r5
 80038cc:	d903      	bls.n	80038d6 <_malloc_r+0x22>
 80038ce:	230c      	movs	r3, #12
 80038d0:	6033      	str	r3, [r6, #0]
 80038d2:	2000      	movs	r0, #0
 80038d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038d6:	f000 f87d 	bl	80039d4 <__malloc_lock>
 80038da:	4921      	ldr	r1, [pc, #132]	; (8003960 <_malloc_r+0xac>)
 80038dc:	680a      	ldr	r2, [r1, #0]
 80038de:	4614      	mov	r4, r2
 80038e0:	b99c      	cbnz	r4, 800390a <_malloc_r+0x56>
 80038e2:	4f20      	ldr	r7, [pc, #128]	; (8003964 <_malloc_r+0xb0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b923      	cbnz	r3, 80038f2 <_malloc_r+0x3e>
 80038e8:	4621      	mov	r1, r4
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 f862 	bl	80039b4 <_sbrk_r>
 80038f0:	6038      	str	r0, [r7, #0]
 80038f2:	4629      	mov	r1, r5
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f85d 	bl	80039b4 <_sbrk_r>
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	d123      	bne.n	8003946 <_malloc_r+0x92>
 80038fe:	230c      	movs	r3, #12
 8003900:	4630      	mov	r0, r6
 8003902:	6033      	str	r3, [r6, #0]
 8003904:	f000 f86c 	bl	80039e0 <__malloc_unlock>
 8003908:	e7e3      	b.n	80038d2 <_malloc_r+0x1e>
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	1b5b      	subs	r3, r3, r5
 800390e:	d417      	bmi.n	8003940 <_malloc_r+0x8c>
 8003910:	2b0b      	cmp	r3, #11
 8003912:	d903      	bls.n	800391c <_malloc_r+0x68>
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	441c      	add	r4, r3
 8003918:	6025      	str	r5, [r4, #0]
 800391a:	e004      	b.n	8003926 <_malloc_r+0x72>
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	42a2      	cmp	r2, r4
 8003920:	bf0c      	ite	eq
 8003922:	600b      	streq	r3, [r1, #0]
 8003924:	6053      	strne	r3, [r2, #4]
 8003926:	4630      	mov	r0, r6
 8003928:	f000 f85a 	bl	80039e0 <__malloc_unlock>
 800392c:	f104 000b 	add.w	r0, r4, #11
 8003930:	1d23      	adds	r3, r4, #4
 8003932:	f020 0007 	bic.w	r0, r0, #7
 8003936:	1ac2      	subs	r2, r0, r3
 8003938:	d0cc      	beq.n	80038d4 <_malloc_r+0x20>
 800393a:	1a1b      	subs	r3, r3, r0
 800393c:	50a3      	str	r3, [r4, r2]
 800393e:	e7c9      	b.n	80038d4 <_malloc_r+0x20>
 8003940:	4622      	mov	r2, r4
 8003942:	6864      	ldr	r4, [r4, #4]
 8003944:	e7cc      	b.n	80038e0 <_malloc_r+0x2c>
 8003946:	1cc4      	adds	r4, r0, #3
 8003948:	f024 0403 	bic.w	r4, r4, #3
 800394c:	42a0      	cmp	r0, r4
 800394e:	d0e3      	beq.n	8003918 <_malloc_r+0x64>
 8003950:	1a21      	subs	r1, r4, r0
 8003952:	4630      	mov	r0, r6
 8003954:	f000 f82e 	bl	80039b4 <_sbrk_r>
 8003958:	3001      	adds	r0, #1
 800395a:	d1dd      	bne.n	8003918 <_malloc_r+0x64>
 800395c:	e7cf      	b.n	80038fe <_malloc_r+0x4a>
 800395e:	bf00      	nop
 8003960:	20000098 	.word	0x20000098
 8003964:	2000009c 	.word	0x2000009c

08003968 <_realloc_r>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	4607      	mov	r7, r0
 800396c:	4614      	mov	r4, r2
 800396e:	460e      	mov	r6, r1
 8003970:	b921      	cbnz	r1, 800397c <_realloc_r+0x14>
 8003972:	4611      	mov	r1, r2
 8003974:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003978:	f7ff bf9c 	b.w	80038b4 <_malloc_r>
 800397c:	b922      	cbnz	r2, 8003988 <_realloc_r+0x20>
 800397e:	f7ff ff4d 	bl	800381c <_free_r>
 8003982:	4625      	mov	r5, r4
 8003984:	4628      	mov	r0, r5
 8003986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003988:	f000 f830 	bl	80039ec <_malloc_usable_size_r>
 800398c:	42a0      	cmp	r0, r4
 800398e:	d20f      	bcs.n	80039b0 <_realloc_r+0x48>
 8003990:	4621      	mov	r1, r4
 8003992:	4638      	mov	r0, r7
 8003994:	f7ff ff8e 	bl	80038b4 <_malloc_r>
 8003998:	4605      	mov	r5, r0
 800399a:	2800      	cmp	r0, #0
 800399c:	d0f2      	beq.n	8003984 <_realloc_r+0x1c>
 800399e:	4631      	mov	r1, r6
 80039a0:	4622      	mov	r2, r4
 80039a2:	f7ff ff2d 	bl	8003800 <memcpy>
 80039a6:	4631      	mov	r1, r6
 80039a8:	4638      	mov	r0, r7
 80039aa:	f7ff ff37 	bl	800381c <_free_r>
 80039ae:	e7e9      	b.n	8003984 <_realloc_r+0x1c>
 80039b0:	4635      	mov	r5, r6
 80039b2:	e7e7      	b.n	8003984 <_realloc_r+0x1c>

080039b4 <_sbrk_r>:
 80039b4:	b538      	push	{r3, r4, r5, lr}
 80039b6:	2300      	movs	r3, #0
 80039b8:	4d05      	ldr	r5, [pc, #20]	; (80039d0 <_sbrk_r+0x1c>)
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	602b      	str	r3, [r5, #0]
 80039c0:	f7fd fdce 	bl	8001560 <_sbrk>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_sbrk_r+0x1a>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_sbrk_r+0x1a>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	2000019c 	.word	0x2000019c

080039d4 <__malloc_lock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__malloc_lock+0x8>)
 80039d6:	f7ff bf03 	b.w	80037e0 <__retarget_lock_acquire_recursive>
 80039da:	bf00      	nop
 80039dc:	200001a4 	.word	0x200001a4

080039e0 <__malloc_unlock>:
 80039e0:	4801      	ldr	r0, [pc, #4]	; (80039e8 <__malloc_unlock+0x8>)
 80039e2:	f7ff befe 	b.w	80037e2 <__retarget_lock_release_recursive>
 80039e6:	bf00      	nop
 80039e8:	200001a4 	.word	0x200001a4

080039ec <_malloc_usable_size_r>:
 80039ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039f0:	1f18      	subs	r0, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfbc      	itt	lt
 80039f6:	580b      	ldrlt	r3, [r1, r0]
 80039f8:	18c0      	addlt	r0, r0, r3
 80039fa:	4770      	bx	lr

080039fc <fmod>:
 80039fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a00:	461f      	mov	r7, r3
 8003a02:	4680      	mov	r8, r0
 8003a04:	4689      	mov	r9, r1
 8003a06:	4616      	mov	r6, r2
 8003a08:	f000 f82e 	bl	8003a68 <__ieee754_fmod>
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <fmod+0x68>)
 8003a0e:	4604      	mov	r4, r0
 8003a10:	f993 3000 	ldrsb.w	r3, [r3]
 8003a14:	460d      	mov	r5, r1
 8003a16:	3301      	adds	r3, #1
 8003a18:	d020      	beq.n	8003a5c <fmod+0x60>
 8003a1a:	4632      	mov	r2, r6
 8003a1c:	463b      	mov	r3, r7
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4639      	mov	r1, r7
 8003a22:	f7fc fff1 	bl	8000a08 <__aeabi_dcmpun>
 8003a26:	b9c8      	cbnz	r0, 8003a5c <fmod+0x60>
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	4640      	mov	r0, r8
 8003a2e:	4649      	mov	r1, r9
 8003a30:	f7fc ffea 	bl	8000a08 <__aeabi_dcmpun>
 8003a34:	b990      	cbnz	r0, 8003a5c <fmod+0x60>
 8003a36:	2200      	movs	r2, #0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	4639      	mov	r1, r7
 8003a3e:	f7fc ffb1 	bl	80009a4 <__aeabi_dcmpeq>
 8003a42:	b158      	cbz	r0, 8003a5c <fmod+0x60>
 8003a44:	f7ff f9c0 	bl	8002dc8 <__errno>
 8003a48:	2321      	movs	r3, #33	; 0x21
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	6003      	str	r3, [r0, #0]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	f7fc fe68 	bl	8000728 <__aeabi_ddiv>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	4629      	mov	r1, r5
 8003a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a64:	20000070 	.word	0x20000070

08003a68 <__ieee754_fmod>:
 8003a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8003a70:	4607      	mov	r7, r0
 8003a72:	461d      	mov	r5, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	ea58 0302 	orrs.w	r3, r8, r2
 8003a7a:	460e      	mov	r6, r1
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	4694      	mov	ip, r2
 8003a80:	4696      	mov	lr, r2
 8003a82:	d00d      	beq.n	8003aa0 <__ieee754_fmod+0x38>
 8003a84:	4a7b      	ldr	r2, [pc, #492]	; (8003c74 <__ieee754_fmod+0x20c>)
 8003a86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	468a      	mov	sl, r1
 8003a8e:	dc07      	bgt.n	8003aa0 <__ieee754_fmod+0x38>
 8003a90:	4262      	negs	r2, r4
 8003a92:	4979      	ldr	r1, [pc, #484]	; (8003c78 <__ieee754_fmod+0x210>)
 8003a94:	4322      	orrs	r2, r4
 8003a96:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 8003a9a:	428a      	cmp	r2, r1
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	d90c      	bls.n	8003aba <__ieee754_fmod+0x52>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	f7fc fd14 	bl	80004d4 <__aeabi_dmul>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	f7fc fe3a 	bl	8000728 <__aeabi_ddiv>
 8003ab4:	4607      	mov	r7, r0
 8003ab6:	460e      	mov	r6, r1
 8003ab8:	e00f      	b.n	8003ada <__ieee754_fmod+0x72>
 8003aba:	4543      	cmp	r3, r8
 8003abc:	46b9      	mov	r9, r7
 8003abe:	4639      	mov	r1, r7
 8003ac0:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 8003ac4:	dc0d      	bgt.n	8003ae2 <__ieee754_fmod+0x7a>
 8003ac6:	db08      	blt.n	8003ada <__ieee754_fmod+0x72>
 8003ac8:	4567      	cmp	r7, ip
 8003aca:	d306      	bcc.n	8003ada <__ieee754_fmod+0x72>
 8003acc:	d109      	bne.n	8003ae2 <__ieee754_fmod+0x7a>
 8003ace:	4a6b      	ldr	r2, [pc, #428]	; (8003c7c <__ieee754_fmod+0x214>)
 8003ad0:	0fe4      	lsrs	r4, r4, #31
 8003ad2:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8003ad6:	e9d4 7600 	ldrd	r7, r6, [r4]
 8003ada:	4638      	mov	r0, r7
 8003adc:	4631      	mov	r1, r6
 8003ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae2:	ea1a 0f02 	tst.w	sl, r2
 8003ae6:	d14a      	bne.n	8003b7e <__ieee754_fmod+0x116>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d141      	bne.n	8003b70 <__ieee754_fmod+0x108>
 8003aec:	464a      	mov	r2, r9
 8003aee:	4864      	ldr	r0, [pc, #400]	; (8003c80 <__ieee754_fmod+0x218>)
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	dc3a      	bgt.n	8003b6a <__ieee754_fmod+0x102>
 8003af4:	4a60      	ldr	r2, [pc, #384]	; (8003c78 <__ieee754_fmod+0x210>)
 8003af6:	402a      	ands	r2, r5
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	d14f      	bne.n	8003b9c <__ieee754_fmod+0x134>
 8003afc:	f1b8 0f00 	cmp.w	r8, #0
 8003b00:	d144      	bne.n	8003b8c <__ieee754_fmod+0x124>
 8003b02:	4666      	mov	r6, ip
 8003b04:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003b08:	2e00      	cmp	r6, #0
 8003b0a:	dc3c      	bgt.n	8003b86 <__ieee754_fmod+0x11e>
 8003b0c:	4e5d      	ldr	r6, [pc, #372]	; (8003c84 <__ieee754_fmod+0x21c>)
 8003b0e:	42b0      	cmp	r0, r6
 8003b10:	db49      	blt.n	8003ba6 <__ieee754_fmod+0x13e>
 8003b12:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8003b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b1a:	4e5a      	ldr	r6, [pc, #360]	; (8003c84 <__ieee754_fmod+0x21c>)
 8003b1c:	42b2      	cmp	r2, r6
 8003b1e:	db54      	blt.n	8003bca <__ieee754_fmod+0x162>
 8003b20:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003b24:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8003b28:	1a80      	subs	r0, r0, r2
 8003b2a:	1b5e      	subs	r6, r3, r5
 8003b2c:	eba1 070e 	sub.w	r7, r1, lr
 8003b30:	2800      	cmp	r0, #0
 8003b32:	d161      	bne.n	8003bf8 <__ieee754_fmod+0x190>
 8003b34:	4571      	cmp	r1, lr
 8003b36:	bf38      	it	cc
 8003b38:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8003b3c:	2e00      	cmp	r6, #0
 8003b3e:	bfa4      	itt	ge
 8003b40:	4639      	movge	r1, r7
 8003b42:	4633      	movge	r3, r6
 8003b44:	ea53 0001 	orrs.w	r0, r3, r1
 8003b48:	d0c1      	beq.n	8003ace <__ieee754_fmod+0x66>
 8003b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b4e:	db68      	blt.n	8003c22 <__ieee754_fmod+0x1ba>
 8003b50:	484c      	ldr	r0, [pc, #304]	; (8003c84 <__ieee754_fmod+0x21c>)
 8003b52:	4282      	cmp	r2, r0
 8003b54:	db6b      	blt.n	8003c2e <__ieee754_fmod+0x1c6>
 8003b56:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003b5a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003b5e:	431c      	orrs	r4, r3
 8003b60:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 8003b64:	460f      	mov	r7, r1
 8003b66:	464e      	mov	r6, r9
 8003b68:	e7b7      	b.n	8003ada <__ieee754_fmod+0x72>
 8003b6a:	3801      	subs	r0, #1
 8003b6c:	0052      	lsls	r2, r2, #1
 8003b6e:	e7bf      	b.n	8003af0 <__ieee754_fmod+0x88>
 8003b70:	4844      	ldr	r0, [pc, #272]	; (8003c84 <__ieee754_fmod+0x21c>)
 8003b72:	02da      	lsls	r2, r3, #11
 8003b74:	2a00      	cmp	r2, #0
 8003b76:	ddbd      	ble.n	8003af4 <__ieee754_fmod+0x8c>
 8003b78:	3801      	subs	r0, #1
 8003b7a:	0052      	lsls	r2, r2, #1
 8003b7c:	e7fa      	b.n	8003b74 <__ieee754_fmod+0x10c>
 8003b7e:	1518      	asrs	r0, r3, #20
 8003b80:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003b84:	e7b6      	b.n	8003af4 <__ieee754_fmod+0x8c>
 8003b86:	3a01      	subs	r2, #1
 8003b88:	0076      	lsls	r6, r6, #1
 8003b8a:	e7bd      	b.n	8003b08 <__ieee754_fmod+0xa0>
 8003b8c:	4a3d      	ldr	r2, [pc, #244]	; (8003c84 <__ieee754_fmod+0x21c>)
 8003b8e:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 8003b92:	2e00      	cmp	r6, #0
 8003b94:	ddba      	ble.n	8003b0c <__ieee754_fmod+0xa4>
 8003b96:	3a01      	subs	r2, #1
 8003b98:	0076      	lsls	r6, r6, #1
 8003b9a:	e7fa      	b.n	8003b92 <__ieee754_fmod+0x12a>
 8003b9c:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003ba0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003ba4:	e7b2      	b.n	8003b0c <__ieee754_fmod+0xa4>
 8003ba6:	1a31      	subs	r1, r6, r0
 8003ba8:	291f      	cmp	r1, #31
 8003baa:	dc08      	bgt.n	8003bbe <__ieee754_fmod+0x156>
 8003bac:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 8003bb0:	408b      	lsls	r3, r1
 8003bb2:	fa29 f606 	lsr.w	r6, r9, r6
 8003bb6:	4333      	orrs	r3, r6
 8003bb8:	fa09 f101 	lsl.w	r1, r9, r1
 8003bbc:	e7ad      	b.n	8003b1a <__ieee754_fmod+0xb2>
 8003bbe:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <__ieee754_fmod+0x220>)
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	1a1b      	subs	r3, r3, r0
 8003bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc8:	e7a7      	b.n	8003b1a <__ieee754_fmod+0xb2>
 8003bca:	eba6 0e02 	sub.w	lr, r6, r2
 8003bce:	f1be 0f1f 	cmp.w	lr, #31
 8003bd2:	dc0a      	bgt.n	8003bea <__ieee754_fmod+0x182>
 8003bd4:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8003bd8:	fa08 f80e 	lsl.w	r8, r8, lr
 8003bdc:	fa2c f505 	lsr.w	r5, ip, r5
 8003be0:	ea45 0508 	orr.w	r5, r5, r8
 8003be4:	fa0c fe0e 	lsl.w	lr, ip, lr
 8003be8:	e79e      	b.n	8003b28 <__ieee754_fmod+0xc0>
 8003bea:	4d27      	ldr	r5, [pc, #156]	; (8003c88 <__ieee754_fmod+0x220>)
 8003bec:	f04f 0e00 	mov.w	lr, #0
 8003bf0:	1aad      	subs	r5, r5, r2
 8003bf2:	fa0c f505 	lsl.w	r5, ip, r5
 8003bf6:	e797      	b.n	8003b28 <__ieee754_fmod+0xc0>
 8003bf8:	4571      	cmp	r1, lr
 8003bfa:	bf38      	it	cc
 8003bfc:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8003c00:	2e00      	cmp	r6, #0
 8003c02:	da05      	bge.n	8003c10 <__ieee754_fmod+0x1a8>
 8003c04:	0fce      	lsrs	r6, r1, #31
 8003c06:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003c0a:	0049      	lsls	r1, r1, #1
 8003c0c:	3801      	subs	r0, #1
 8003c0e:	e78c      	b.n	8003b2a <__ieee754_fmod+0xc2>
 8003c10:	ea56 0307 	orrs.w	r3, r6, r7
 8003c14:	f43f af5b 	beq.w	8003ace <__ieee754_fmod+0x66>
 8003c18:	0ffb      	lsrs	r3, r7, #31
 8003c1a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8003c1e:	0079      	lsls	r1, r7, #1
 8003c20:	e7f4      	b.n	8003c0c <__ieee754_fmod+0x1a4>
 8003c22:	0fc8      	lsrs	r0, r1, #31
 8003c24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c28:	0049      	lsls	r1, r1, #1
 8003c2a:	3a01      	subs	r2, #1
 8003c2c:	e78d      	b.n	8003b4a <__ieee754_fmod+0xe2>
 8003c2e:	1a80      	subs	r0, r0, r2
 8003c30:	2814      	cmp	r0, #20
 8003c32:	dc0a      	bgt.n	8003c4a <__ieee754_fmod+0x1e2>
 8003c34:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003c38:	fa03 f202 	lsl.w	r2, r3, r2
 8003c3c:	40c1      	lsrs	r1, r0
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	4103      	asrs	r3, r0
 8003c42:	4610      	mov	r0, r2
 8003c44:	ea43 0104 	orr.w	r1, r3, r4
 8003c48:	e734      	b.n	8003ab4 <__ieee754_fmod+0x4c>
 8003c4a:	281f      	cmp	r0, #31
 8003c4c:	dc07      	bgt.n	8003c5e <__ieee754_fmod+0x1f6>
 8003c4e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003c52:	40c1      	lsrs	r1, r0
 8003c54:	fa03 f202 	lsl.w	r2, r3, r2
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	e7f1      	b.n	8003c42 <__ieee754_fmod+0x1da>
 8003c5e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8003c62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003c66:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8003c6a:	32e2      	adds	r2, #226	; 0xe2
 8003c6c:	fa43 f202 	asr.w	r2, r3, r2
 8003c70:	e7f3      	b.n	8003c5a <__ieee754_fmod+0x1f2>
 8003c72:	bf00      	nop
 8003c74:	7fefffff 	.word	0x7fefffff
 8003c78:	7ff00000 	.word	0x7ff00000
 8003c7c:	08003eb0 	.word	0x08003eb0
 8003c80:	fffffbed 	.word	0xfffffbed
 8003c84:	fffffc02 	.word	0xfffffc02
 8003c88:	fffffbe2 	.word	0xfffffbe2

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
