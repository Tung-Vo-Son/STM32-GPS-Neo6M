
STM32_Neo6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08005f20  08005f20  00015f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080063e8  080063e8  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063e8  080063e8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080063f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001e0  080065d0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080065d0  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009096  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c10  00000000  00000000  0002929f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002aeb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002b618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001819e  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008495  00000000  00000000  00043e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f11  00000000  00000000  0004c2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d01ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef0  00000000  00000000  000d0240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f08 	.word	0x08005f08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08005f08 	.word	0x08005f08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_d2lz>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	460c      	mov	r4, r1
 8000fac:	4605      	mov	r5, r0
 8000fae:	4621      	mov	r1, r4
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f7ff fd01 	bl	80009bc <__aeabi_dcmplt>
 8000fba:	b928      	cbnz	r0, 8000fc8 <__aeabi_d2lz+0x20>
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	4621      	mov	r1, r4
 8000fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fc4:	f000 b80a 	b.w	8000fdc <__aeabi_d2ulz>
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000fce:	f000 f805 	bl	8000fdc <__aeabi_d2ulz>
 8000fd2:	4240      	negs	r0, r0
 8000fd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd8:	bd38      	pop	{r3, r4, r5, pc}
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2ulz>:
 8000fdc:	b5d0      	push	{r4, r6, r7, lr}
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__aeabi_d2ulz+0x34>)
 8000fe2:	4606      	mov	r6, r0
 8000fe4:	460f      	mov	r7, r1
 8000fe6:	f7ff fa77 	bl	80004d8 <__aeabi_dmul>
 8000fea:	f7ff fd0f 	bl	8000a0c <__aeabi_d2uiz>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	f7ff f9f8 	bl	80003e4 <__aeabi_ui2d>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <__aeabi_d2ulz+0x38>)
 8000ff8:	f7ff fa6e 	bl	80004d8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4630      	mov	r0, r6
 8001002:	4639      	mov	r1, r7
 8001004:	f7ff f8b0 	bl	8000168 <__aeabi_dsub>
 8001008:	f7ff fd00 	bl	8000a0c <__aeabi_d2uiz>
 800100c:	4621      	mov	r1, r4
 800100e:	bdd0      	pop	{r4, r6, r7, pc}
 8001010:	3df00000 	.word	0x3df00000
 8001014:	41f00000 	.word	0x41f00000

08001018 <Convert>:

#include "ST47_Neo6M.h"
GPS_Struct gps;

float Convert(float location)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	 float degrees = floor(location / 100);
 8001020:	4922      	ldr	r1, [pc, #136]	; (80010ac <Convert+0x94>)
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff24 	bl	8000e70 <__aeabi_fdiv>
 8001028:	4603      	mov	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f9fc 	bl	8000428 <__aeabi_f2d>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f004 fee6 	bl	8005e08 <floor>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fd02 	bl	8000a4c <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	617b      	str	r3, [r7, #20]
	 double minutes = location - (100 * degrees);
 800104c:	4917      	ldr	r1, [pc, #92]	; (80010ac <Convert+0x94>)
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff fe5a 	bl	8000d08 <__aeabi_fmul>
 8001054:	4603      	mov	r3, r0
 8001056:	4619      	mov	r1, r3
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fd4b 	bl	8000af4 <__aeabi_fsub>
 800105e:	4603      	mov	r3, r0
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f9e1 	bl	8000428 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	 minutes /= 60;
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <Convert+0x98>)
 8001074:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001078:	f7ff fb58 	bl	800072c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	e9c7 2302 	strd	r2, r3, [r7, #8]
	 degrees += minutes;
 8001084:	6978      	ldr	r0, [r7, #20]
 8001086:	f7ff f9cf 	bl	8000428 <__aeabi_f2d>
 800108a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800108e:	f7ff f86d 	bl	800016c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fcd7 	bl	8000a4c <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	617b      	str	r3, [r7, #20]
	 return degrees;
 80010a2:	697b      	ldr	r3, [r7, #20]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	404e0000 	.word	0x404e0000

080010b4 <GPS_Init>:

void GPS_Init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	gps.index = 0;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <GPS_Init+0x18>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&neo, &gps.rx, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	4903      	ldr	r1, [pc, #12]	; (80010d0 <GPS_Init+0x1c>)
 80010c2:	4804      	ldr	r0, [pc, #16]	; (80010d4 <GPS_Init+0x20>)
 80010c4:	f001 fc47 	bl	8002956 <HAL_UART_Receive_IT>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000208 	.word	0x20000208
 80010d0:	2000020c 	.word	0x2000020c
 80010d4:	20000260 	.word	0x20000260

080010d8 <GPS_Callback>:

void GPS_Callback()
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	if(gps.rx == '\n')
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <GPS_Callback+0x44>)
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	2b0a      	cmp	r3, #10
 80010e2:	d107      	bne.n	80010f4 <GPS_Callback+0x1c>
	{
		gps.flag = true;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <GPS_Callback+0x44>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gps.index = 0;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <GPS_Callback+0x44>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	715a      	strb	r2, [r3, #5]
 80010f2:	e00b      	b.n	800110c <GPS_Callback+0x34>
	}
	else gps.buffer[gps.index ++] = gps.rx;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <GPS_Callback+0x44>)
 80010f6:	795b      	ldrb	r3, [r3, #5]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	4a07      	ldr	r2, [pc, #28]	; (800111c <GPS_Callback+0x44>)
 80010fe:	7151      	strb	r1, [r2, #5]
 8001100:	4619      	mov	r1, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <GPS_Callback+0x44>)
 8001104:	791a      	ldrb	r2, [r3, #4]
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <GPS_Callback+0x44>)
 8001108:	440b      	add	r3, r1
 800110a:	719a      	strb	r2, [r3, #6]
	HAL_UART_Receive_IT(&neo, &gps.rx, 1);
 800110c:	2201      	movs	r2, #1
 800110e:	4904      	ldr	r1, [pc, #16]	; (8001120 <GPS_Callback+0x48>)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <GPS_Callback+0x4c>)
 8001112:	f001 fc20 	bl	8002956 <HAL_UART_Receive_IT>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000208 	.word	0x20000208
 8001120:	2000020c 	.word	0x2000020c
 8001124:	20000260 	.word	0x20000260

08001128 <GPS_ProcessData>:
//		gps.flag = false;
//	}
//}

void GPS_ProcessData(char* buffer)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if(gps.flag == true)
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <GPS_ProcessData+0xd4>)
 8001132:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001136:	2b00      	cmp	r3, #0
 8001138:	d05c      	beq.n	80011f4 <GPS_ProcessData+0xcc>
	{
		HAL_UART_Transmit(&debug, gps.buffer, sizeof(gps.buffer), 2000);
 800113a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800113e:	2228      	movs	r2, #40	; 0x28
 8001140:	492f      	ldr	r1, [pc, #188]	; (8001200 <GPS_ProcessData+0xd8>)
 8001142:	4830      	ldr	r0, [pc, #192]	; (8001204 <GPS_ProcessData+0xdc>)
 8001144:	f001 fb75 	bl	8002832 <HAL_UART_Transmit>
		char* response = malloc(strlen(gps.buffer) + 1);
 8001148:	482d      	ldr	r0, [pc, #180]	; (8001200 <GPS_ProcessData+0xd8>)
 800114a:	f7ff f801 	bl	8000150 <strlen>
 800114e:	4603      	mov	r3, r0
 8001150:	3301      	adds	r3, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f001 ff84 	bl	8003060 <malloc>
 8001158:	4603      	mov	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
		strcpy(response, gps.buffer);
 800115c:	4928      	ldr	r1, [pc, #160]	; (8001200 <GPS_ProcessData+0xd8>)
 800115e:	68f8      	ldr	r0, [r7, #12]
 8001160:	f002 f84c 	bl	80031fc <strcpy>
		if(response != NULL)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d03d      	beq.n	80011e6 <GPS_ProcessData+0xbe>
		{
			char* token = strtok(response, ",");
 800116a:	4927      	ldr	r1, [pc, #156]	; (8001208 <GPS_ProcessData+0xe0>)
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f002 fe6f 	bl	8003e50 <strtok>
 8001172:	60b8      	str	r0, [r7, #8]
			strcpy(gps.gpgga.time, strtok(NULL, ","));
 8001174:	4924      	ldr	r1, [pc, #144]	; (8001208 <GPS_ProcessData+0xe0>)
 8001176:	2000      	movs	r0, #0
 8001178:	f002 fe6a 	bl	8003e50 <strtok>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4822      	ldr	r0, [pc, #136]	; (800120c <GPS_ProcessData+0xe4>)
 8001182:	f002 f83b 	bl	80031fc <strcpy>
			gps.gpgga.latitude = atof(strtok(NULL, ","));
 8001186:	4920      	ldr	r1, [pc, #128]	; (8001208 <GPS_ProcessData+0xe0>)
 8001188:	2000      	movs	r0, #0
 800118a:	f002 fe61 	bl	8003e50 <strtok>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f001 ff37 	bl	8003004 <atof>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fc55 	bl	8000a4c <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a15      	ldr	r2, [pc, #84]	; (80011fc <GPS_ProcessData+0xd4>)
 80011a6:	63d3      	str	r3, [r2, #60]	; 0x3c
			gps.gpgga.ns_indicator = strtok(NULL, ",");
 80011a8:	4917      	ldr	r1, [pc, #92]	; (8001208 <GPS_ProcessData+0xe0>)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f002 fe50 	bl	8003e50 <strtok>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <GPS_ProcessData+0xd4>)
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
			gps.gpgga.longtitude = atof(strtok(NULL, ","));
 80011b6:	4914      	ldr	r1, [pc, #80]	; (8001208 <GPS_ProcessData+0xe0>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f002 fe49 	bl	8003e50 <strtok>
 80011be:	4603      	mov	r3, r0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 ff1f 	bl	8003004 <atof>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fc3d 	bl	8000a4c <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <GPS_ProcessData+0xd4>)
 80011d6:	6453      	str	r3, [r2, #68]	; 0x44
			gps.gpgga.ew_indicator = strtok(NULL, ",");
 80011d8:	490b      	ldr	r1, [pc, #44]	; (8001208 <GPS_ProcessData+0xe0>)
 80011da:	2000      	movs	r0, #0
 80011dc:	f002 fe38 	bl	8003e50 <strtok>
 80011e0:	4603      	mov	r3, r0
 80011e2:	4a06      	ldr	r2, [pc, #24]	; (80011fc <GPS_ProcessData+0xd4>)
 80011e4:	6493      	str	r3, [r2, #72]	; 0x48
		}
		free(response);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f001 ff42 	bl	8003070 <free>
		gps.flag = false;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <GPS_ProcessData+0xd4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000208 	.word	0x20000208
 8001200:	2000020e 	.word	0x2000020e
 8001204:	200002a8 	.word	0x200002a8
 8001208:	08005f20 	.word	0x08005f20
 800120c:	20000238 	.word	0x20000238

08001210 <GPS_GetLatitude>:

float GPS_GetLatitude()
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	return Convert(gps.gpgga.latitude);
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <GPS_GetLatitude+0x14>)
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fefd 	bl	8001018 <Convert>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000208 	.word	0x20000208

08001228 <GPS_GetLongtitude>:

float GPS_GetLongtitude()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	return Convert(gps.gpgga.longtitude);
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <GPS_GetLongtitude+0x14>)
 800122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fef1 	bl	8001018 <Convert>
 8001236:	4603      	mov	r3, r0
}
 8001238:	4618      	mov	r0, r3
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000208 	.word	0x20000208

08001240 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern GPS_Struct gps;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	GPS_Callback();
 8001248:	f7ff ff46 	bl	80010d8 <GPS_Callback>
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001258:	f000 fb02 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125c:	f000 f826 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001260:	f000 f8be 	bl	80013e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001264:	f000 f868 	bl	8001338 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001268:	f000 f890 	bl	800138c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800126c:	f7ff ff22 	bl	80010b4 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_ProcessData();
 8001270:	f7ff ff5a 	bl	8001128 <GPS_ProcessData>
	  x = GPS_GetLatitude();
 8001274:	f7ff ffcc 	bl	8001210 <GPS_GetLatitude>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f8d4 	bl	8000428 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <main+0x50>)
 8001286:	e9c1 2300 	strd	r2, r3, [r1]
	  y = GPS_GetLongtitude();
 800128a:	f7ff ffcd 	bl	8001228 <GPS_GetLongtitude>
 800128e:	4603      	mov	r3, r0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f8c9 	bl	8000428 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4903      	ldr	r1, [pc, #12]	; (80012a8 <main+0x54>)
 800129c:	e9c1 2300 	strd	r2, r3, [r1]
	  GPS_ProcessData();
 80012a0:	e7e6      	b.n	8001270 <main+0x1c>
 80012a2:	bf00      	nop
 80012a4:	20000258 	.word	0x20000258
 80012a8:	200002a0 	.word	0x200002a0

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	; 0x40
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2228      	movs	r2, #40	; 0x28
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 fee0 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012ce:	2301      	movs	r3, #1
 80012d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 fe35 	bl	8001f64 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001300:	f000 f8ba 	bl	8001478 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2102      	movs	r1, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f001 f8a0 	bl	8002464 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800132a:	f000 f8a5 	bl	8001478 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3740      	adds	r7, #64	; 0x40
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <MX_USART1_UART_Init+0x50>)
 8001340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001344:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART1_UART_Init+0x4c>)
 8001370:	f001 fa12 	bl	8002798 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800137a:	f000 f87d 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000260 	.word	0x20000260
 8001388:	40013800 	.word	0x40013800

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f001 f9e8 	bl	8002798 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 f853 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200002a8 	.word	0x200002a8
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <MX_GPIO_Init+0x90>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <MX_GPIO_Init+0x90>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <MX_GPIO_Init+0x90>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0310 	and.w	r3, r3, #16
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <MX_GPIO_Init+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <MX_GPIO_Init+0x90>)
 8001412:	f043 0320 	orr.w	r3, r3, #32
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_GPIO_Init+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0320 	and.w	r3, r3, #32
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_GPIO_Init+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a11      	ldr	r2, [pc, #68]	; (8001470 <MX_GPIO_Init+0x90>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_GPIO_Init+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	480c      	ldr	r0, [pc, #48]	; (8001474 <MX_GPIO_Init+0x94>)
 8001444:	f000 fd76 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2302      	movs	r3, #2
 8001458:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0310 	add.w	r3, r7, #16
 800145e:	4619      	mov	r1, r3
 8001460:	4804      	ldr	r0, [pc, #16]	; (8001474 <MX_GPIO_Init+0x94>)
 8001462:	f000 fbe3 	bl	8001c2c <HAL_GPIO_Init>

}
 8001466:	bf00      	nop
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	40011000 	.word	0x40011000

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	e7fe      	b.n	8001480 <Error_Handler+0x8>
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_MspInit+0x5c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_MspInit+0x5c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_MspInit+0x60>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_MspInit+0x60>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a3f      	ldr	r2, [pc, #252]	; (8001600 <HAL_UART_MspInit+0x118>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d13a      	bne.n	800157e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001508:	4b3e      	ldr	r3, [pc, #248]	; (8001604 <HAL_UART_MspInit+0x11c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a3d      	ldr	r2, [pc, #244]	; (8001604 <HAL_UART_MspInit+0x11c>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_UART_MspInit+0x11c>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_UART_MspInit+0x11c>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a37      	ldr	r2, [pc, #220]	; (8001604 <HAL_UART_MspInit+0x11c>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_UART_MspInit+0x11c>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0318 	add.w	r3, r7, #24
 800154a:	4619      	mov	r1, r3
 800154c:	482e      	ldr	r0, [pc, #184]	; (8001608 <HAL_UART_MspInit+0x120>)
 800154e:	f000 fb6d 	bl	8001c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4619      	mov	r1, r3
 8001566:	4828      	ldr	r0, [pc, #160]	; (8001608 <HAL_UART_MspInit+0x120>)
 8001568:	f000 fb60 	bl	8001c2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2101      	movs	r1, #1
 8001570:	2025      	movs	r0, #37	; 0x25
 8001572:	f000 faae 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001576:	2025      	movs	r0, #37	; 0x25
 8001578:	f000 fac7 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157c:	e03c      	b.n	80015f8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_UART_MspInit+0x124>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d137      	bne.n	80015f8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_UART_MspInit+0x11c>)
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_UART_MspInit+0x11c>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	61d3      	str	r3, [r2, #28]
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_UART_MspInit+0x11c>)
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_UART_MspInit+0x11c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_UART_MspInit+0x11c>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_UART_MspInit+0x11c>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80015b8:	2304      	movs	r3, #4
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0318 	add.w	r3, r7, #24
 80015c8:	4619      	mov	r1, r3
 80015ca:	480f      	ldr	r0, [pc, #60]	; (8001608 <HAL_UART_MspInit+0x120>)
 80015cc:	f000 fb2e 	bl	8001c2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80015d0:	2308      	movs	r3, #8
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <HAL_UART_MspInit+0x120>)
 80015e4:	f000 fb22 	bl	8001c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2101      	movs	r1, #1
 80015ec:	2026      	movs	r0, #38	; 0x26
 80015ee:	f000 fa70 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f2:	2026      	movs	r0, #38	; 0x26
 80015f4:	f000 fa89 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40013800 	.word	0x40013800
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800
 800160c:	40004400 	.word	0x40004400

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f949 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <USART1_IRQHandler+0x10>)
 8001666:	f001 f9cb 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000260 	.word	0x20000260

08001674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <USART2_IRQHandler+0x10>)
 800167a:	f001 f9c1 	bl	8002a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002a8 	.word	0x200002a8

08001688 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return 1;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr

08001696 <_kill>:

int _kill(int pid, int sig)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016a0:	f001 fcb4 	bl	800300c <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2216      	movs	r2, #22
 80016a8:	601a      	str	r2, [r3, #0]
	return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_exit>:

void _exit (int status)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016be:	f04f 31ff 	mov.w	r1, #4294967295
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffe7 	bl	8001696 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016c8:	e7fe      	b.n	80016c8 <_exit+0x12>

080016ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	e00a      	b.n	80016f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016dc:	f3af 8000 	nop.w
 80016e0:	4601      	mov	r1, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	60ba      	str	r2, [r7, #8]
 80016e8:	b2ca      	uxtb	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	dbf0      	blt.n	80016dc <_read+0x12>
	}

return len;
 80016fa:	687b      	ldr	r3, [r7, #4]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	e009      	b.n	800172a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	3301      	adds	r3, #1
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	dbf1      	blt.n	8001716 <_write+0x12>
	}
	return len;
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_close>:

int _close(int file)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001762:	605a      	str	r2, [r3, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <_isatty>:

int _isatty(int file)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	return 1;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f001 fc1e 	bl	800300c <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20005000 	.word	0x20005000
 80017fc:	00000400 	.word	0x00000400
 8001800:	200001fc 	.word	0x200001fc
 8001804:	20000300 	.word	0x20000300

08001808 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001814:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001816:	e003      	b.n	8001820 <LoopCopyDataInit>

08001818 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800181a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800181c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800181e:	3104      	adds	r1, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001824:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001826:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001828:	d3f6      	bcc.n	8001818 <CopyDataInit>
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800182c:	e002      	b.n	8001834 <LoopFillZerobss>

0800182e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001830:	f842 3b04 	str.w	r3, [r2], #4

08001834 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001836:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001838:	d3f9      	bcc.n	800182e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800183a:	f7ff ffe5 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800183e:	f001 fbeb 	bl	8003018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001842:	f7ff fd07 	bl	8001254 <main>
  bx lr
 8001846:	4770      	bx	lr
  ldr r3, =_sidata
 8001848:	080063f0 	.word	0x080063f0
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001850:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001854:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001858:	200002fc 	.word	0x200002fc

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>
	...

08001860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x28>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x28>)
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f923 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fe02 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40022000 	.word	0x40022000

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f93b 	bl	8001b26 <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f000 f903 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000000 	.word	0x20000000
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x1c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_IncTick+0x20>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a03      	ldr	r2, [pc, #12]	; (800190c <HAL_IncTick+0x20>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000008 	.word	0x20000008
 800190c:	200002e8 	.word	0x200002e8

08001910 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_GetTick+0x10>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	200002e8 	.word	0x200002e8

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4906      	ldr	r1, [pc, #24]	; (80019bc <__NVIC_EnableIRQ+0x34>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100

080019c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	6039      	str	r1, [r7, #0]
 80019ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	db0a      	blt.n	80019ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	490c      	ldr	r1, [pc, #48]	; (8001a0c <__NVIC_SetPriority+0x4c>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	0112      	lsls	r2, r2, #4
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	440b      	add	r3, r1
 80019e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e8:	e00a      	b.n	8001a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <__NVIC_SetPriority+0x50>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3b04      	subs	r3, #4
 80019f8:	0112      	lsls	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	440b      	add	r3, r1
 80019fe:	761a      	strb	r2, [r3, #24]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b089      	sub	sp, #36	; 0x24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	bf28      	it	cs
 8001a32:	2304      	movcs	r3, #4
 8001a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d902      	bls.n	8001a44 <NVIC_EncodePriority+0x30>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3b03      	subs	r3, #3
 8001a42:	e000      	b.n	8001a46 <NVIC_EncodePriority+0x32>
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	401a      	ands	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	4313      	orrs	r3, r2
         );
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff90 	bl	80019c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff2d 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff42 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff90 	bl	8001a14 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5f 	bl	80019c0 <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff35 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d005      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2204      	movs	r2, #4
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e051      	b.n	8001c06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 020e 	bic.w	r2, r2, #14
 8001b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_DMA_Abort_IT+0xd0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d029      	beq.n	8001be0 <HAL_DMA_Abort_IT+0xa0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a20      	ldr	r2, [pc, #128]	; (8001c14 <HAL_DMA_Abort_IT+0xd4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d022      	beq.n	8001bdc <HAL_DMA_Abort_IT+0x9c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1f      	ldr	r2, [pc, #124]	; (8001c18 <HAL_DMA_Abort_IT+0xd8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01a      	beq.n	8001bd6 <HAL_DMA_Abort_IT+0x96>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_DMA_Abort_IT+0xdc>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d012      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x90>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_DMA_Abort_IT+0xe0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00a      	beq.n	8001bca <HAL_DMA_Abort_IT+0x8a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_DMA_Abort_IT+0xe4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <HAL_DMA_Abort_IT+0x84>
 8001bbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bc2:	e00e      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bc8:	e00b      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bce:	e008      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd4:	e005      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bda:	e002      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001bdc:	2310      	movs	r3, #16
 8001bde:	e000      	b.n	8001be2 <HAL_DMA_Abort_IT+0xa2>
 8001be0:	2301      	movs	r3, #1
 8001be2:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_DMA_Abort_IT+0xe8>)
 8001be4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	4798      	blx	r3
    } 
  }
  return status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020008 	.word	0x40020008
 8001c14:	4002001c 	.word	0x4002001c
 8001c18:	40020030 	.word	0x40020030
 8001c1c:	40020044 	.word	0x40020044
 8001c20:	40020058 	.word	0x40020058
 8001c24:	4002006c 	.word	0x4002006c
 8001c28:	40020000 	.word	0x40020000

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b08b      	sub	sp, #44	; 0x2c
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e169      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c40:	2201      	movs	r2, #1
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	f040 8158 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a9a      	ldr	r2, [pc, #616]	; (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d05e      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c68:	4a98      	ldr	r2, [pc, #608]	; (8001ecc <HAL_GPIO_Init+0x2a0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d875      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c6e:	4a98      	ldr	r2, [pc, #608]	; (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d058      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c74:	4a96      	ldr	r2, [pc, #600]	; (8001ed0 <HAL_GPIO_Init+0x2a4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d86f      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c7a:	4a96      	ldr	r2, [pc, #600]	; (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d052      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c80:	4a94      	ldr	r2, [pc, #592]	; (8001ed4 <HAL_GPIO_Init+0x2a8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d869      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c86:	4a94      	ldr	r2, [pc, #592]	; (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d04c      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c8c:	4a92      	ldr	r2, [pc, #584]	; (8001ed8 <HAL_GPIO_Init+0x2ac>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d863      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c92:	4a92      	ldr	r2, [pc, #584]	; (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d046      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
 8001c98:	4a90      	ldr	r2, [pc, #576]	; (8001edc <HAL_GPIO_Init+0x2b0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d85d      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d82a      	bhi.n	8001cf8 <HAL_GPIO_Init+0xcc>
 8001ca2:	2b12      	cmp	r3, #18
 8001ca4:	d859      	bhi.n	8001d5a <HAL_GPIO_Init+0x12e>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <HAL_GPIO_Init+0x80>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d01 	.word	0x08001d01
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d55 	.word	0x08001d55
 8001cbc:	08001d5b 	.word	0x08001d5b
 8001cc0:	08001d5b 	.word	0x08001d5b
 8001cc4:	08001d5b 	.word	0x08001d5b
 8001cc8:	08001d5b 	.word	0x08001d5b
 8001ccc:	08001d5b 	.word	0x08001d5b
 8001cd0:	08001d5b 	.word	0x08001d5b
 8001cd4:	08001d5b 	.word	0x08001d5b
 8001cd8:	08001d5b 	.word	0x08001d5b
 8001cdc:	08001d5b 	.word	0x08001d5b
 8001ce0:	08001d5b 	.word	0x08001d5b
 8001ce4:	08001d5b 	.word	0x08001d5b
 8001ce8:	08001d5b 	.word	0x08001d5b
 8001cec:	08001d5b 	.word	0x08001d5b
 8001cf0:	08001d09 	.word	0x08001d09
 8001cf4:	08001d1d 	.word	0x08001d1d
 8001cf8:	4a79      	ldr	r2, [pc, #484]	; (8001ee0 <HAL_GPIO_Init+0x2b4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cfe:	e02c      	b.n	8001d5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e029      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e024      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	3308      	adds	r3, #8
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e01f      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	330c      	adds	r3, #12
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e01a      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d102      	bne.n	8001d34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e013      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	611a      	str	r2, [r3, #16]
          break;
 8001d46:	e009      	b.n	8001d5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	615a      	str	r2, [r3, #20]
          break;
 8001d52:	e003      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
          break;
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x130>
          break;
 8001d5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d801      	bhi.n	8001d66 <HAL_GPIO_Init+0x13a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	e001      	b.n	8001d6a <HAL_GPIO_Init+0x13e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2bff      	cmp	r3, #255	; 0xff
 8001d70:	d802      	bhi.n	8001d78 <HAL_GPIO_Init+0x14c>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_GPIO_Init+0x152>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3b08      	subs	r3, #8
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	210f      	movs	r1, #15
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	401a      	ands	r2, r3
 8001d90:	6a39      	ldr	r1, [r7, #32]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b1 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_GPIO_Init+0x2b8>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dc4:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	220f      	movs	r2, #15
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HAL_GPIO_Init+0x2c0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <HAL_GPIO_Init+0x1ec>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3f      	ldr	r2, [pc, #252]	; (8001ef0 <HAL_GPIO_Init+0x2c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00d      	beq.n	8001e14 <HAL_GPIO_Init+0x1e8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3e      	ldr	r2, [pc, #248]	; (8001ef4 <HAL_GPIO_Init+0x2c8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0x1e4>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3d      	ldr	r2, [pc, #244]	; (8001ef8 <HAL_GPIO_Init+0x2cc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d101      	bne.n	8001e0c <HAL_GPIO_Init+0x1e0>
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e0c:	2304      	movs	r3, #4
 8001e0e:	e004      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e10:	2302      	movs	r3, #2
 8001e12:	e002      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_GPIO_Init+0x1ee>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e2a:	492f      	ldr	r1, [pc, #188]	; (8001ee8 <HAL_GPIO_Init+0x2bc>)
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	492c      	ldr	r1, [pc, #176]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	4928      	ldr	r1, [pc, #160]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	4922      	ldr	r1, [pc, #136]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	491e      	ldr	r1, [pc, #120]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	4918      	ldr	r1, [pc, #96]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ea2:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4914      	ldr	r1, [pc, #80]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d021      	beq.n	8001f00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	490e      	ldr	r1, [pc, #56]	; (8001efc <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60cb      	str	r3, [r1, #12]
 8001ec8:	e021      	b.n	8001f0e <HAL_GPIO_Init+0x2e2>
 8001eca:	bf00      	nop
 8001ecc:	10320000 	.word	0x10320000
 8001ed0:	10310000 	.word	0x10310000
 8001ed4:	10220000 	.word	0x10220000
 8001ed8:	10210000 	.word	0x10210000
 8001edc:	10120000 	.word	0x10120000
 8001ee0:	10110000 	.word	0x10110000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00
 8001ef4:	40011000 	.word	0x40011000
 8001ef8:	40011400 	.word	0x40011400
 8001efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4909      	ldr	r1, [pc, #36]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f47f ae8e 	bne.w	8001c40 <HAL_GPIO_Init+0x14>
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	372c      	adds	r7, #44	; 0x2c
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	611a      	str	r2, [r3, #16]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e26c      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f84:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00c      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4b8f      	ldr	r3, [pc, #572]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d112      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d06c      	beq.n	8002090 <HAL_RCC_OscConfig+0x12c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d168      	bne.n	8002090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e246      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x76>
 8001fcc:	4b80      	ldr	r3, [pc, #512]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a7f      	ldr	r2, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e02e      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a7a      	ldr	r2, [pc, #488]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a77      	ldr	r2, [pc, #476]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0xbc>
 8002006:	4b72      	ldr	r3, [pc, #456]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a71      	ldr	r2, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xd4>
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b68      	ldr	r3, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a67      	ldr	r2, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7ff fc66 	bl	8001910 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fc62 	bl	8001910 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1fa      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xe4>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fc52 	bl	8001910 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002070:	f7ff fc4e 	bl	8001910 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1e6      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x10c>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020aa:	4b49      	ldr	r3, [pc, #292]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1ba      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695b      	ldr	r3, [r3, #20]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4939      	ldr	r1, [pc, #228]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <HAL_RCC_OscConfig+0x270>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fc07 	bl	8001910 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7ff fc03 	bl	8001910 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e19b      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4927      	ldr	r1, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x270>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7ff fbe6 	bl	8001910 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7ff fbe2 	bl	8001910 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e17a      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03a      	beq.n	80021e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d019      	beq.n	80021ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <HAL_RCC_OscConfig+0x274>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7ff fbc6 	bl	8001910 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7ff fbc2 	bl	8001910 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e15a      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 fad8 	bl	800275c <RCC_Delay>
 80021ac:	e01c      	b.n	80021e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ae:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_RCC_OscConfig+0x274>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7ff fbac 	bl	8001910 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ba:	e00f      	b.n	80021dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fba8 	bl	8001910 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e140      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	42420000 	.word	0x42420000
 80021d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b9e      	ldr	r3, [pc, #632]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e9      	bne.n	80021bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80a6 	beq.w	8002342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b97      	ldr	r3, [pc, #604]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b94      	ldr	r3, [pc, #592]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a93      	ldr	r2, [pc, #588]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b91      	ldr	r3, [pc, #580]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b8e      	ldr	r3, [pc, #568]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b8b      	ldr	r3, [pc, #556]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a8a      	ldr	r2, [pc, #552]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff fb69 	bl	8001910 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff fb65 	bl	8001910 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0fd      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b81      	ldr	r3, [pc, #516]	; (800245c <HAL_RCC_OscConfig+0x4f8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x312>
 8002268:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4a7a      	ldr	r2, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x334>
 800227e:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a75      	ldr	r2, [pc, #468]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b73      	ldr	r3, [pc, #460]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a72      	ldr	r2, [pc, #456]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x356>
 80022a0:	4b6d      	ldr	r3, [pc, #436]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a6c      	ldr	r2, [pc, #432]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	4b6a      	ldr	r3, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a69      	ldr	r2, [pc, #420]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x36e>
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a66      	ldr	r2, [pc, #408]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a63      	ldr	r2, [pc, #396]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d015      	beq.n	8002306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff fb19 	bl	8001910 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e2:	f7ff fb15 	bl	8001910 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e0ab      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	4b57      	ldr	r3, [pc, #348]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0ee      	beq.n	80022e2 <HAL_RCC_OscConfig+0x37e>
 8002304:	e014      	b.n	8002330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff fb03 	bl	8001910 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7ff faff 	bl	8001910 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e095      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002324:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ee      	bne.n	800230e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d105      	bne.n	8002342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002336:	4b48      	ldr	r3, [pc, #288]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	4a47      	ldr	r2, [pc, #284]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8081 	beq.w	800244e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 030c 	and.w	r3, r3, #12
 8002354:	2b08      	cmp	r3, #8
 8002356:	d061      	beq.n	800241c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d146      	bne.n	80023ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_OscConfig+0x4fc>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7ff fad3 	bl	8001910 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236e:	f7ff facf 	bl	8001910 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e067      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002380:	4b35      	ldr	r3, [pc, #212]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	492d      	ldr	r1, [pc, #180]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a19      	ldr	r1, [r3, #32]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	430b      	orrs	r3, r1
 80023ba:	4927      	ldr	r1, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x4fc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff faa3 	bl	8001910 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff fa9f 	bl	8001910 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e037      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x46a>
 80023ec:	e02f      	b.n	800244e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <HAL_RCC_OscConfig+0x4fc>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa8c 	bl	8001910 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff fa88 	bl	8001910 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e020      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x498>
 800241a:	e018      	b.n	800244e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e013      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	429a      	cmp	r2, r3
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420060 	.word	0x42420060

08002464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0d0      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d910      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b67      	ldr	r3, [pc, #412]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4965      	ldr	r1, [pc, #404]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b63      	ldr	r3, [pc, #396]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0b8      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a58      	ldr	r2, [pc, #352]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	494d      	ldr	r1, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d040      	beq.n	8002584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d115      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e07f      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e073      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b3d      	ldr	r3, [pc, #244]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e06b      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4936      	ldr	r1, [pc, #216]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002554:	f7ff f9dc 	bl	8001910 <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7ff f9d8 	bl	8001910 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e053      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d210      	bcs.n	80025b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4922      	ldr	r1, [pc, #136]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d001      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e032      	b.n	800261a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4916      	ldr	r1, [pc, #88]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025de:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	490e      	ldr	r1, [pc, #56]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025f2:	f000 f821 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	490a      	ldr	r1, [pc, #40]	; (800262c <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	5ccb      	ldrb	r3, [r1, r3]
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RCC_ClockConfig+0x1cc>)
 800260c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_RCC_ClockConfig+0x1d0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f93a 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40022000 	.word	0x40022000
 8002628:	40021000 	.word	0x40021000
 800262c:	08005f34 	.word	0x08005f34
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b490      	push	{r4, r7}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002640:	1d3c      	adds	r4, r7, #4
 8002642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002644:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002648:	f240 2301 	movw	r3, #513	; 0x201
 800264c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	2300      	movs	r3, #0
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x40>
 8002672:	2b08      	cmp	r3, #8
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x46>
 8002676:	e02d      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	623b      	str	r3, [r7, #32]
      break;
 800267c:	e02d      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800268a:	4413      	add	r3, r2
 800268c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002690:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	0c5b      	lsrs	r3, r3, #17
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026aa:	4413      	add	r3, r2
 80026ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b6:	fb02 f203 	mul.w	r2, r2, r3
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	e004      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026c8:	fb02 f303 	mul.w	r3, r2, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	623b      	str	r3, [r7, #32]
      break;
 80026d2:	e002      	b.n	80026da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d6:	623b      	str	r3, [r7, #32]
      break;
 80026d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026da:	6a3b      	ldr	r3, [r7, #32]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3728      	adds	r7, #40	; 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc90      	pop	{r4, r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	08005f24 	.word	0x08005f24
 80026ec:	40021000 	.word	0x40021000
 80026f0:	007a1200 	.word	0x007a1200
 80026f4:	003d0900 	.word	0x003d0900

080026f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026fc:	4b02      	ldr	r3, [pc, #8]	; (8002708 <HAL_RCC_GetHCLKFreq+0x10>)
 80026fe:	681b      	ldr	r3, [r3, #0]
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002710:	f7ff fff2 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	4903      	ldr	r1, [pc, #12]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	08005f44 	.word	0x08005f44

08002734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002738:	f7ff ffde 	bl	80026f8 <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	0adb      	lsrs	r3, r3, #11
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	08005f44 	.word	0x08005f44

0800275c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <RCC_Delay+0x34>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <RCC_Delay+0x38>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0a5b      	lsrs	r3, r3, #9
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002778:	bf00      	nop
  }
  while (Delay --);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1e5a      	subs	r2, r3, #1
 800277e:	60fa      	str	r2, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <RCC_Delay+0x1c>
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	20000000 	.word	0x20000000
 8002794:	10624dd3 	.word	0x10624dd3

08002798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e03f      	b.n	800282a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fe92 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fb83 	bl	8002ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08a      	sub	sp, #40	; 0x28
 8002836:	af02      	add	r7, sp, #8
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b20      	cmp	r3, #32
 8002850:	d17c      	bne.n	800294c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_UART_Transmit+0x2c>
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e075      	b.n	800294e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_UART_Transmit+0x3e>
 800286c:	2302      	movs	r3, #2
 800286e:	e06e      	b.n	800294e <HAL_UART_Transmit+0x11c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	; 0x21
 8002882:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002886:	f7ff f843 	bl	8001910 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	88fa      	ldrh	r2, [r7, #6]
 8002896:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d108      	bne.n	80028b4 <HAL_UART_Transmit+0x82>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e003      	b.n	80028bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80028c4:	e02a      	b.n	800291c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f9a7 	bl	8002c24 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e036      	b.n	800294e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10b      	bne.n	80028fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	3302      	adds	r3, #2
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	e007      	b.n	800290e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	3301      	adds	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cf      	bne.n	80028c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f977 	bl	8002c24 <UART_WaitOnFlagUntilTimeout>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e006      	b.n	800294e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	e000      	b.n	800294e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800294c:	2302      	movs	r3, #2
  }
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d140      	bne.n	80029f2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_UART_Receive_IT+0x26>
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e039      	b.n	80029f4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_UART_Receive_IT+0x38>
 800298a:	2302      	movs	r3, #2
 800298c:	e032      	b.n	80029f4 <HAL_UART_Receive_IT+0x9e>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	88fa      	ldrh	r2, [r7, #6]
 80029a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2222      	movs	r2, #34	; 0x22
 80029b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029cc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80029f2:	2302      	movs	r3, #2
  }
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10d      	bne.n	8002a52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f003 0320 	and.w	r3, r3, #32
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_UART_IRQHandler+0x52>
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0320 	and.w	r3, r3, #32
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9cc 	bl	8002de8 <UART_Receive_IT>
      return;
 8002a50:	e0d0      	b.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80b0 	beq.w	8002bba <HAL_UART_IRQHandler+0x1ba>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <HAL_UART_IRQHandler+0x70>
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80a5 	beq.w	8002bba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_UART_IRQHandler+0x90>
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a88:	f043 0201 	orr.w	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xb0>
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f043 0202 	orr.w	r2, r3, #2
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_UART_IRQHandler+0xd0>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00f      	beq.n	8002afa <HAL_UART_IRQHandler+0xfa>
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_UART_IRQHandler+0xee>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	f043 0208 	orr.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d077      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_UART_IRQHandler+0x11c>
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f966 	bl	8002de8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	bf14      	ite	ne
 8002b2a:	2301      	movne	r3, #1
 8002b2c:	2300      	moveq	r3, #0
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <HAL_UART_IRQHandler+0x144>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d031      	beq.n	8002ba8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8b7 	bl	8002cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d023      	beq.n	8002ba0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d013      	beq.n	8002b98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <HAL_UART_IRQHandler+0x1fc>)
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe ffdf 	bl	8001b40 <HAL_DMA_Abort_IT>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b92:	4610      	mov	r0, r2
 8002b94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b96:	e00e      	b.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f83a 	bl	8002c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f836 	bl	8002c12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba6:	e006      	b.n	8002bb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f832 	bl	8002c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002bb4:	e01d      	b.n	8002bf2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb6:	bf00      	nop
    return;
 8002bb8:	e01b      	b.n	8002bf2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1d6>
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8a3 	bl	8002d1a <UART_Transmit_IT>
    return;
 8002bd4:	e00e      	b.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8e4 	bl	8002db8 <UART_EndTransmit_IT>
    return;
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002bf2:	bf00      	nop
  }
}
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	08002cf3 	.word	0x08002cf3

08002c00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c34:	e02c      	b.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d028      	beq.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c44:	f7fe fe64 	bl	8001910 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d21d      	bcs.n	8002c90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e00f      	b.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d0c3      	beq.n	8002c36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002cce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff80 	bl	8002c12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b21      	cmp	r3, #33	; 0x21
 8002d2c:	d13e      	bne.n	8002dac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d36:	d114      	bne.n	8002d62 <UART_Transmit_IT+0x48>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d110      	bne.n	8002d62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	1c9a      	adds	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	621a      	str	r2, [r3, #32]
 8002d60:	e008      	b.n	8002d74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6211      	str	r1, [r2, #32]
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4619      	mov	r1, r3
 8002d82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10f      	bne.n	8002da8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002da6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	e000      	b.n	8002dae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dac:	2302      	movs	r3, #2
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff11 	bl	8002c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b22      	cmp	r3, #34	; 0x22
 8002dfa:	d170      	bne.n	8002ede <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e04:	d117      	bne.n	8002e36 <UART_Receive_IT+0x4e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	1c9a      	adds	r2, r3, #2
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	; 0x28
 8002e34:	e026      	b.n	8002e84 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d007      	beq.n	8002e5a <UART_Receive_IT+0x72>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <UART_Receive_IT+0x80>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e008      	b.n	8002e7a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4619      	mov	r1, r3
 8002e92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d120      	bne.n	8002eda <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0220 	bic.w	r2, r2, #32
 8002ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe f9b5 	bl	8001240 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e002      	b.n	8002ee0 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f22:	f023 030c 	bic.w	r3, r3, #12
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6812      	ldr	r2, [r2, #0]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2c      	ldr	r2, [pc, #176]	; (8002ffc <UART_SetConfig+0x114>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f50:	f7ff fbf0 	bl	8002734 <HAL_RCC_GetPCLK2Freq>
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	e002      	b.n	8002f5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff fbd8 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	4a22      	ldr	r2, [pc, #136]	; (8003000 <UART_SetConfig+0x118>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	0119      	lsls	r1, r3, #4
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009a      	lsls	r2, r3, #2
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <UART_SetConfig+0x118>)
 8002f96:	fba3 0302 	umull	r0, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2064      	movs	r0, #100	; 0x64
 8002f9e:	fb00 f303 	mul.w	r3, r0, r3
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	3332      	adds	r3, #50	; 0x32
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <UART_SetConfig+0x118>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fb4:	4419      	add	r1, r3
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009a      	lsls	r2, r3, #2
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <UART_SetConfig+0x118>)
 8002fce:	fba3 0302 	umull	r0, r3, r3, r2
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2064      	movs	r0, #100	; 0x64
 8002fd6:	fb00 f303 	mul.w	r3, r0, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	3332      	adds	r3, #50	; 0x32
 8002fe0:	4a07      	ldr	r2, [pc, #28]	; (8003000 <UART_SetConfig+0x118>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	f003 020f 	and.w	r2, r3, #15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40013800 	.word	0x40013800
 8003000:	51eb851f 	.word	0x51eb851f

08003004 <atof>:
 8003004:	2100      	movs	r1, #0
 8003006:	f000 bf17 	b.w	8003e38 <strtod>
	...

0800300c <__errno>:
 800300c:	4b01      	ldr	r3, [pc, #4]	; (8003014 <__errno+0x8>)
 800300e:	6818      	ldr	r0, [r3, #0]
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000000c 	.word	0x2000000c

08003018 <__libc_init_array>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	2600      	movs	r6, #0
 800301c:	4d0c      	ldr	r5, [pc, #48]	; (8003050 <__libc_init_array+0x38>)
 800301e:	4c0d      	ldr	r4, [pc, #52]	; (8003054 <__libc_init_array+0x3c>)
 8003020:	1b64      	subs	r4, r4, r5
 8003022:	10a4      	asrs	r4, r4, #2
 8003024:	42a6      	cmp	r6, r4
 8003026:	d109      	bne.n	800303c <__libc_init_array+0x24>
 8003028:	f002 ff6e 	bl	8005f08 <_init>
 800302c:	2600      	movs	r6, #0
 800302e:	4d0a      	ldr	r5, [pc, #40]	; (8003058 <__libc_init_array+0x40>)
 8003030:	4c0a      	ldr	r4, [pc, #40]	; (800305c <__libc_init_array+0x44>)
 8003032:	1b64      	subs	r4, r4, r5
 8003034:	10a4      	asrs	r4, r4, #2
 8003036:	42a6      	cmp	r6, r4
 8003038:	d105      	bne.n	8003046 <__libc_init_array+0x2e>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003040:	4798      	blx	r3
 8003042:	3601      	adds	r6, #1
 8003044:	e7ee      	b.n	8003024 <__libc_init_array+0xc>
 8003046:	f855 3b04 	ldr.w	r3, [r5], #4
 800304a:	4798      	blx	r3
 800304c:	3601      	adds	r6, #1
 800304e:	e7f2      	b.n	8003036 <__libc_init_array+0x1e>
 8003050:	080063e8 	.word	0x080063e8
 8003054:	080063e8 	.word	0x080063e8
 8003058:	080063e8 	.word	0x080063e8
 800305c:	080063ec 	.word	0x080063ec

08003060 <malloc>:
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <malloc+0xc>)
 8003062:	4601      	mov	r1, r0
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f000 b85f 	b.w	8003128 <_malloc_r>
 800306a:	bf00      	nop
 800306c:	2000000c 	.word	0x2000000c

08003070 <free>:
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <free+0xc>)
 8003072:	4601      	mov	r1, r0
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	f000 b80b 	b.w	8003090 <_free_r>
 800307a:	bf00      	nop
 800307c:	2000000c 	.word	0x2000000c

08003080 <memset>:
 8003080:	4603      	mov	r3, r0
 8003082:	4402      	add	r2, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_free_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4605      	mov	r5, r0
 8003094:	2900      	cmp	r1, #0
 8003096:	d043      	beq.n	8003120 <_free_r+0x90>
 8003098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800309c:	1f0c      	subs	r4, r1, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bfb8      	it	lt
 80030a2:	18e4      	addlt	r4, r4, r3
 80030a4:	f001 fae6 	bl	8004674 <__malloc_lock>
 80030a8:	4a1e      	ldr	r2, [pc, #120]	; (8003124 <_free_r+0x94>)
 80030aa:	6813      	ldr	r3, [r2, #0]
 80030ac:	4610      	mov	r0, r2
 80030ae:	b933      	cbnz	r3, 80030be <_free_r+0x2e>
 80030b0:	6063      	str	r3, [r4, #4]
 80030b2:	6014      	str	r4, [r2, #0]
 80030b4:	4628      	mov	r0, r5
 80030b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030ba:	f001 bae1 	b.w	8004680 <__malloc_unlock>
 80030be:	42a3      	cmp	r3, r4
 80030c0:	d90a      	bls.n	80030d8 <_free_r+0x48>
 80030c2:	6821      	ldr	r1, [r4, #0]
 80030c4:	1862      	adds	r2, r4, r1
 80030c6:	4293      	cmp	r3, r2
 80030c8:	bf01      	itttt	eq
 80030ca:	681a      	ldreq	r2, [r3, #0]
 80030cc:	685b      	ldreq	r3, [r3, #4]
 80030ce:	1852      	addeq	r2, r2, r1
 80030d0:	6022      	streq	r2, [r4, #0]
 80030d2:	6063      	str	r3, [r4, #4]
 80030d4:	6004      	str	r4, [r0, #0]
 80030d6:	e7ed      	b.n	80030b4 <_free_r+0x24>
 80030d8:	461a      	mov	r2, r3
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	b10b      	cbz	r3, 80030e2 <_free_r+0x52>
 80030de:	42a3      	cmp	r3, r4
 80030e0:	d9fa      	bls.n	80030d8 <_free_r+0x48>
 80030e2:	6811      	ldr	r1, [r2, #0]
 80030e4:	1850      	adds	r0, r2, r1
 80030e6:	42a0      	cmp	r0, r4
 80030e8:	d10b      	bne.n	8003102 <_free_r+0x72>
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	4401      	add	r1, r0
 80030ee:	1850      	adds	r0, r2, r1
 80030f0:	4283      	cmp	r3, r0
 80030f2:	6011      	str	r1, [r2, #0]
 80030f4:	d1de      	bne.n	80030b4 <_free_r+0x24>
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4401      	add	r1, r0
 80030fc:	6011      	str	r1, [r2, #0]
 80030fe:	6053      	str	r3, [r2, #4]
 8003100:	e7d8      	b.n	80030b4 <_free_r+0x24>
 8003102:	d902      	bls.n	800310a <_free_r+0x7a>
 8003104:	230c      	movs	r3, #12
 8003106:	602b      	str	r3, [r5, #0]
 8003108:	e7d4      	b.n	80030b4 <_free_r+0x24>
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	1821      	adds	r1, r4, r0
 800310e:	428b      	cmp	r3, r1
 8003110:	bf01      	itttt	eq
 8003112:	6819      	ldreq	r1, [r3, #0]
 8003114:	685b      	ldreq	r3, [r3, #4]
 8003116:	1809      	addeq	r1, r1, r0
 8003118:	6021      	streq	r1, [r4, #0]
 800311a:	6063      	str	r3, [r4, #4]
 800311c:	6054      	str	r4, [r2, #4]
 800311e:	e7c9      	b.n	80030b4 <_free_r+0x24>
 8003120:	bd38      	pop	{r3, r4, r5, pc}
 8003122:	bf00      	nop
 8003124:	20000200 	.word	0x20000200

08003128 <_malloc_r>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	1ccd      	adds	r5, r1, #3
 800312c:	f025 0503 	bic.w	r5, r5, #3
 8003130:	3508      	adds	r5, #8
 8003132:	2d0c      	cmp	r5, #12
 8003134:	bf38      	it	cc
 8003136:	250c      	movcc	r5, #12
 8003138:	2d00      	cmp	r5, #0
 800313a:	4606      	mov	r6, r0
 800313c:	db01      	blt.n	8003142 <_malloc_r+0x1a>
 800313e:	42a9      	cmp	r1, r5
 8003140:	d903      	bls.n	800314a <_malloc_r+0x22>
 8003142:	230c      	movs	r3, #12
 8003144:	6033      	str	r3, [r6, #0]
 8003146:	2000      	movs	r0, #0
 8003148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800314a:	f001 fa93 	bl	8004674 <__malloc_lock>
 800314e:	4921      	ldr	r1, [pc, #132]	; (80031d4 <_malloc_r+0xac>)
 8003150:	680a      	ldr	r2, [r1, #0]
 8003152:	4614      	mov	r4, r2
 8003154:	b99c      	cbnz	r4, 800317e <_malloc_r+0x56>
 8003156:	4f20      	ldr	r7, [pc, #128]	; (80031d8 <_malloc_r+0xb0>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	b923      	cbnz	r3, 8003166 <_malloc_r+0x3e>
 800315c:	4621      	mov	r1, r4
 800315e:	4630      	mov	r0, r6
 8003160:	f000 f83c 	bl	80031dc <_sbrk_r>
 8003164:	6038      	str	r0, [r7, #0]
 8003166:	4629      	mov	r1, r5
 8003168:	4630      	mov	r0, r6
 800316a:	f000 f837 	bl	80031dc <_sbrk_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d123      	bne.n	80031ba <_malloc_r+0x92>
 8003172:	230c      	movs	r3, #12
 8003174:	4630      	mov	r0, r6
 8003176:	6033      	str	r3, [r6, #0]
 8003178:	f001 fa82 	bl	8004680 <__malloc_unlock>
 800317c:	e7e3      	b.n	8003146 <_malloc_r+0x1e>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	1b5b      	subs	r3, r3, r5
 8003182:	d417      	bmi.n	80031b4 <_malloc_r+0x8c>
 8003184:	2b0b      	cmp	r3, #11
 8003186:	d903      	bls.n	8003190 <_malloc_r+0x68>
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	441c      	add	r4, r3
 800318c:	6025      	str	r5, [r4, #0]
 800318e:	e004      	b.n	800319a <_malloc_r+0x72>
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	42a2      	cmp	r2, r4
 8003194:	bf0c      	ite	eq
 8003196:	600b      	streq	r3, [r1, #0]
 8003198:	6053      	strne	r3, [r2, #4]
 800319a:	4630      	mov	r0, r6
 800319c:	f001 fa70 	bl	8004680 <__malloc_unlock>
 80031a0:	f104 000b 	add.w	r0, r4, #11
 80031a4:	1d23      	adds	r3, r4, #4
 80031a6:	f020 0007 	bic.w	r0, r0, #7
 80031aa:	1ac2      	subs	r2, r0, r3
 80031ac:	d0cc      	beq.n	8003148 <_malloc_r+0x20>
 80031ae:	1a1b      	subs	r3, r3, r0
 80031b0:	50a3      	str	r3, [r4, r2]
 80031b2:	e7c9      	b.n	8003148 <_malloc_r+0x20>
 80031b4:	4622      	mov	r2, r4
 80031b6:	6864      	ldr	r4, [r4, #4]
 80031b8:	e7cc      	b.n	8003154 <_malloc_r+0x2c>
 80031ba:	1cc4      	adds	r4, r0, #3
 80031bc:	f024 0403 	bic.w	r4, r4, #3
 80031c0:	42a0      	cmp	r0, r4
 80031c2:	d0e3      	beq.n	800318c <_malloc_r+0x64>
 80031c4:	1a21      	subs	r1, r4, r0
 80031c6:	4630      	mov	r0, r6
 80031c8:	f000 f808 	bl	80031dc <_sbrk_r>
 80031cc:	3001      	adds	r0, #1
 80031ce:	d1dd      	bne.n	800318c <_malloc_r+0x64>
 80031d0:	e7cf      	b.n	8003172 <_malloc_r+0x4a>
 80031d2:	bf00      	nop
 80031d4:	20000200 	.word	0x20000200
 80031d8:	20000204 	.word	0x20000204

080031dc <_sbrk_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	2300      	movs	r3, #0
 80031e0:	4d05      	ldr	r5, [pc, #20]	; (80031f8 <_sbrk_r+0x1c>)
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	f7fe fad8 	bl	800179c <_sbrk>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_sbrk_r+0x1a>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_sbrk_r+0x1a>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	200002ec 	.word	0x200002ec

080031fc <strcpy>:
 80031fc:	4603      	mov	r3, r0
 80031fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003202:	f803 2b01 	strb.w	r2, [r3], #1
 8003206:	2a00      	cmp	r2, #0
 8003208:	d1f9      	bne.n	80031fe <strcpy+0x2>
 800320a:	4770      	bx	lr

0800320c <sulp>:
 800320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003210:	460f      	mov	r7, r1
 8003212:	4690      	mov	r8, r2
 8003214:	f001 fdaa 	bl	8004d6c <__ulp>
 8003218:	4604      	mov	r4, r0
 800321a:	460d      	mov	r5, r1
 800321c:	f1b8 0f00 	cmp.w	r8, #0
 8003220:	d011      	beq.n	8003246 <sulp+0x3a>
 8003222:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003226:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800322a:	2b00      	cmp	r3, #0
 800322c:	dd0b      	ble.n	8003246 <sulp+0x3a>
 800322e:	2400      	movs	r4, #0
 8003230:	051b      	lsls	r3, r3, #20
 8003232:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003236:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	f7fd f94b 	bl	80004d8 <__aeabi_dmul>
 8003242:	4604      	mov	r4, r0
 8003244:	460d      	mov	r5, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003250 <_strtod_l>:
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	469b      	mov	fp, r3
 8003256:	2300      	movs	r3, #0
 8003258:	b0a1      	sub	sp, #132	; 0x84
 800325a:	931c      	str	r3, [sp, #112]	; 0x70
 800325c:	4ba1      	ldr	r3, [pc, #644]	; (80034e4 <_strtod_l+0x294>)
 800325e:	4682      	mov	sl, r0
 8003260:	681f      	ldr	r7, [r3, #0]
 8003262:	460e      	mov	r6, r1
 8003264:	4638      	mov	r0, r7
 8003266:	9217      	str	r2, [sp, #92]	; 0x5c
 8003268:	f7fc ff72 	bl	8000150 <strlen>
 800326c:	f04f 0800 	mov.w	r8, #0
 8003270:	4604      	mov	r4, r0
 8003272:	f04f 0900 	mov.w	r9, #0
 8003276:	961b      	str	r6, [sp, #108]	; 0x6c
 8003278:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	2a2b      	cmp	r2, #43	; 0x2b
 800327e:	d04c      	beq.n	800331a <_strtod_l+0xca>
 8003280:	d83a      	bhi.n	80032f8 <_strtod_l+0xa8>
 8003282:	2a0d      	cmp	r2, #13
 8003284:	d833      	bhi.n	80032ee <_strtod_l+0x9e>
 8003286:	2a08      	cmp	r2, #8
 8003288:	d833      	bhi.n	80032f2 <_strtod_l+0xa2>
 800328a:	2a00      	cmp	r2, #0
 800328c:	d03d      	beq.n	800330a <_strtod_l+0xba>
 800328e:	2300      	movs	r3, #0
 8003290:	930c      	str	r3, [sp, #48]	; 0x30
 8003292:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003294:	782b      	ldrb	r3, [r5, #0]
 8003296:	2b30      	cmp	r3, #48	; 0x30
 8003298:	f040 80af 	bne.w	80033fa <_strtod_l+0x1aa>
 800329c:	786b      	ldrb	r3, [r5, #1]
 800329e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80032a2:	2b58      	cmp	r3, #88	; 0x58
 80032a4:	d16c      	bne.n	8003380 <_strtod_l+0x130>
 80032a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032a8:	4650      	mov	r0, sl
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	ab1c      	add	r3, sp, #112	; 0x70
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	4a8d      	ldr	r2, [pc, #564]	; (80034e8 <_strtod_l+0x298>)
 80032b2:	f8cd b008 	str.w	fp, [sp, #8]
 80032b6:	ab1d      	add	r3, sp, #116	; 0x74
 80032b8:	a91b      	add	r1, sp, #108	; 0x6c
 80032ba:	f000 febd 	bl	8004038 <__gethex>
 80032be:	f010 0607 	ands.w	r6, r0, #7
 80032c2:	4604      	mov	r4, r0
 80032c4:	d005      	beq.n	80032d2 <_strtod_l+0x82>
 80032c6:	2e06      	cmp	r6, #6
 80032c8:	d129      	bne.n	800331e <_strtod_l+0xce>
 80032ca:	2300      	movs	r3, #0
 80032cc:	3501      	adds	r5, #1
 80032ce:	951b      	str	r5, [sp, #108]	; 0x6c
 80032d0:	930c      	str	r3, [sp, #48]	; 0x30
 80032d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8596 	bne.w	8003e06 <_strtod_l+0xbb6>
 80032da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032dc:	b1d3      	cbz	r3, 8003314 <_strtod_l+0xc4>
 80032de:	4642      	mov	r2, r8
 80032e0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	b021      	add	sp, #132	; 0x84
 80032ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ee:	2a20      	cmp	r2, #32
 80032f0:	d1cd      	bne.n	800328e <_strtod_l+0x3e>
 80032f2:	3301      	adds	r3, #1
 80032f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80032f6:	e7bf      	b.n	8003278 <_strtod_l+0x28>
 80032f8:	2a2d      	cmp	r2, #45	; 0x2d
 80032fa:	d1c8      	bne.n	800328e <_strtod_l+0x3e>
 80032fc:	2201      	movs	r2, #1
 80032fe:	920c      	str	r2, [sp, #48]	; 0x30
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	921b      	str	r2, [sp, #108]	; 0x6c
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1c3      	bne.n	8003292 <_strtod_l+0x42>
 800330a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800330c:	961b      	str	r6, [sp, #108]	; 0x6c
 800330e:	2b00      	cmp	r3, #0
 8003310:	f040 8577 	bne.w	8003e02 <_strtod_l+0xbb2>
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	e7e4      	b.n	80032e4 <_strtod_l+0x94>
 800331a:	2200      	movs	r2, #0
 800331c:	e7ef      	b.n	80032fe <_strtod_l+0xae>
 800331e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003320:	b13a      	cbz	r2, 8003332 <_strtod_l+0xe2>
 8003322:	2135      	movs	r1, #53	; 0x35
 8003324:	a81e      	add	r0, sp, #120	; 0x78
 8003326:	f001 fe25 	bl	8004f74 <__copybits>
 800332a:	4650      	mov	r0, sl
 800332c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800332e:	f001 f9ed 	bl	800470c <_Bfree>
 8003332:	3e01      	subs	r6, #1
 8003334:	2e05      	cmp	r6, #5
 8003336:	d807      	bhi.n	8003348 <_strtod_l+0xf8>
 8003338:	e8df f006 	tbb	[pc, r6]
 800333c:	1d180b0e 	.word	0x1d180b0e
 8003340:	030e      	.short	0x030e
 8003342:	f04f 0900 	mov.w	r9, #0
 8003346:	46c8      	mov	r8, r9
 8003348:	0721      	lsls	r1, r4, #28
 800334a:	d5c2      	bpl.n	80032d2 <_strtod_l+0x82>
 800334c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003350:	e7bf      	b.n	80032d2 <_strtod_l+0x82>
 8003352:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8003356:	e7f7      	b.n	8003348 <_strtod_l+0xf8>
 8003358:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800335a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800335e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003362:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003366:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800336a:	e7ed      	b.n	8003348 <_strtod_l+0xf8>
 800336c:	f04f 0800 	mov.w	r8, #0
 8003370:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80034ec <_strtod_l+0x29c>
 8003374:	e7e8      	b.n	8003348 <_strtod_l+0xf8>
 8003376:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800337a:	f04f 38ff 	mov.w	r8, #4294967295
 800337e:	e7e3      	b.n	8003348 <_strtod_l+0xf8>
 8003380:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	921b      	str	r2, [sp, #108]	; 0x6c
 8003386:	785b      	ldrb	r3, [r3, #1]
 8003388:	2b30      	cmp	r3, #48	; 0x30
 800338a:	d0f9      	beq.n	8003380 <_strtod_l+0x130>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0a0      	beq.n	80032d2 <_strtod_l+0x82>
 8003390:	2301      	movs	r3, #1
 8003392:	9307      	str	r3, [sp, #28]
 8003394:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003396:	220a      	movs	r2, #10
 8003398:	9308      	str	r3, [sp, #32]
 800339a:	2300      	movs	r3, #0
 800339c:	469b      	mov	fp, r3
 800339e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80033a2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80033a4:	7805      	ldrb	r5, [r0, #0]
 80033a6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80033aa:	b2d9      	uxtb	r1, r3
 80033ac:	2909      	cmp	r1, #9
 80033ae:	d926      	bls.n	80033fe <_strtod_l+0x1ae>
 80033b0:	4622      	mov	r2, r4
 80033b2:	4639      	mov	r1, r7
 80033b4:	f002 f924 	bl	8005600 <strncmp>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d032      	beq.n	8003422 <_strtod_l+0x1d2>
 80033bc:	2000      	movs	r0, #0
 80033be:	462b      	mov	r3, r5
 80033c0:	465c      	mov	r4, fp
 80033c2:	4602      	mov	r2, r0
 80033c4:	9004      	str	r0, [sp, #16]
 80033c6:	2b65      	cmp	r3, #101	; 0x65
 80033c8:	d001      	beq.n	80033ce <_strtod_l+0x17e>
 80033ca:	2b45      	cmp	r3, #69	; 0x45
 80033cc:	d113      	bne.n	80033f6 <_strtod_l+0x1a6>
 80033ce:	b91c      	cbnz	r4, 80033d8 <_strtod_l+0x188>
 80033d0:	9b07      	ldr	r3, [sp, #28]
 80033d2:	4303      	orrs	r3, r0
 80033d4:	d099      	beq.n	800330a <_strtod_l+0xba>
 80033d6:	2400      	movs	r4, #0
 80033d8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80033da:	1c73      	adds	r3, r6, #1
 80033dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80033de:	7873      	ldrb	r3, [r6, #1]
 80033e0:	2b2b      	cmp	r3, #43	; 0x2b
 80033e2:	d078      	beq.n	80034d6 <_strtod_l+0x286>
 80033e4:	2b2d      	cmp	r3, #45	; 0x2d
 80033e6:	d07b      	beq.n	80034e0 <_strtod_l+0x290>
 80033e8:	2700      	movs	r7, #0
 80033ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80033ee:	2909      	cmp	r1, #9
 80033f0:	f240 8082 	bls.w	80034f8 <_strtod_l+0x2a8>
 80033f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80033f6:	2500      	movs	r5, #0
 80033f8:	e09e      	b.n	8003538 <_strtod_l+0x2e8>
 80033fa:	2300      	movs	r3, #0
 80033fc:	e7c9      	b.n	8003392 <_strtod_l+0x142>
 80033fe:	f1bb 0f08 	cmp.w	fp, #8
 8003402:	bfd5      	itete	le
 8003404:	9906      	ldrle	r1, [sp, #24]
 8003406:	9905      	ldrgt	r1, [sp, #20]
 8003408:	fb02 3301 	mlale	r3, r2, r1, r3
 800340c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003410:	f100 0001 	add.w	r0, r0, #1
 8003414:	bfd4      	ite	le
 8003416:	9306      	strle	r3, [sp, #24]
 8003418:	9305      	strgt	r3, [sp, #20]
 800341a:	f10b 0b01 	add.w	fp, fp, #1
 800341e:	901b      	str	r0, [sp, #108]	; 0x6c
 8003420:	e7bf      	b.n	80033a2 <_strtod_l+0x152>
 8003422:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003424:	191a      	adds	r2, r3, r4
 8003426:	921b      	str	r2, [sp, #108]	; 0x6c
 8003428:	5d1b      	ldrb	r3, [r3, r4]
 800342a:	f1bb 0f00 	cmp.w	fp, #0
 800342e:	d036      	beq.n	800349e <_strtod_l+0x24e>
 8003430:	465c      	mov	r4, fp
 8003432:	9004      	str	r0, [sp, #16]
 8003434:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003438:	2a09      	cmp	r2, #9
 800343a:	d912      	bls.n	8003462 <_strtod_l+0x212>
 800343c:	2201      	movs	r2, #1
 800343e:	e7c2      	b.n	80033c6 <_strtod_l+0x176>
 8003440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003442:	3001      	adds	r0, #1
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	921b      	str	r2, [sp, #108]	; 0x6c
 8003448:	785b      	ldrb	r3, [r3, #1]
 800344a:	2b30      	cmp	r3, #48	; 0x30
 800344c:	d0f8      	beq.n	8003440 <_strtod_l+0x1f0>
 800344e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003452:	2a08      	cmp	r2, #8
 8003454:	f200 84dc 	bhi.w	8003e10 <_strtod_l+0xbc0>
 8003458:	9004      	str	r0, [sp, #16]
 800345a:	2000      	movs	r0, #0
 800345c:	4604      	mov	r4, r0
 800345e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003460:	9208      	str	r2, [sp, #32]
 8003462:	3b30      	subs	r3, #48	; 0x30
 8003464:	f100 0201 	add.w	r2, r0, #1
 8003468:	d013      	beq.n	8003492 <_strtod_l+0x242>
 800346a:	9904      	ldr	r1, [sp, #16]
 800346c:	1905      	adds	r5, r0, r4
 800346e:	4411      	add	r1, r2
 8003470:	9104      	str	r1, [sp, #16]
 8003472:	4622      	mov	r2, r4
 8003474:	210a      	movs	r1, #10
 8003476:	42aa      	cmp	r2, r5
 8003478:	d113      	bne.n	80034a2 <_strtod_l+0x252>
 800347a:	1822      	adds	r2, r4, r0
 800347c:	2a08      	cmp	r2, #8
 800347e:	f104 0401 	add.w	r4, r4, #1
 8003482:	4404      	add	r4, r0
 8003484:	dc1b      	bgt.n	80034be <_strtod_l+0x26e>
 8003486:	220a      	movs	r2, #10
 8003488:	9906      	ldr	r1, [sp, #24]
 800348a:	fb02 3301 	mla	r3, r2, r1, r3
 800348e:	9306      	str	r3, [sp, #24]
 8003490:	2200      	movs	r2, #0
 8003492:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003494:	4610      	mov	r0, r2
 8003496:	1c59      	adds	r1, r3, #1
 8003498:	911b      	str	r1, [sp, #108]	; 0x6c
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	e7ca      	b.n	8003434 <_strtod_l+0x1e4>
 800349e:	4658      	mov	r0, fp
 80034a0:	e7d3      	b.n	800344a <_strtod_l+0x1fa>
 80034a2:	2a08      	cmp	r2, #8
 80034a4:	dc04      	bgt.n	80034b0 <_strtod_l+0x260>
 80034a6:	9f06      	ldr	r7, [sp, #24]
 80034a8:	434f      	muls	r7, r1
 80034aa:	9706      	str	r7, [sp, #24]
 80034ac:	3201      	adds	r2, #1
 80034ae:	e7e2      	b.n	8003476 <_strtod_l+0x226>
 80034b0:	1c57      	adds	r7, r2, #1
 80034b2:	2f10      	cmp	r7, #16
 80034b4:	bfde      	ittt	le
 80034b6:	9f05      	ldrle	r7, [sp, #20]
 80034b8:	434f      	mulle	r7, r1
 80034ba:	9705      	strle	r7, [sp, #20]
 80034bc:	e7f6      	b.n	80034ac <_strtod_l+0x25c>
 80034be:	2c10      	cmp	r4, #16
 80034c0:	bfdf      	itttt	le
 80034c2:	220a      	movle	r2, #10
 80034c4:	9905      	ldrle	r1, [sp, #20]
 80034c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80034ca:	9305      	strle	r3, [sp, #20]
 80034cc:	e7e0      	b.n	8003490 <_strtod_l+0x240>
 80034ce:	2300      	movs	r3, #0
 80034d0:	2201      	movs	r2, #1
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	e77c      	b.n	80033d0 <_strtod_l+0x180>
 80034d6:	2700      	movs	r7, #0
 80034d8:	1cb3      	adds	r3, r6, #2
 80034da:	931b      	str	r3, [sp, #108]	; 0x6c
 80034dc:	78b3      	ldrb	r3, [r6, #2]
 80034de:	e784      	b.n	80033ea <_strtod_l+0x19a>
 80034e0:	2701      	movs	r7, #1
 80034e2:	e7f9      	b.n	80034d8 <_strtod_l+0x288>
 80034e4:	080060e0 	.word	0x080060e0
 80034e8:	08005f5c 	.word	0x08005f5c
 80034ec:	7ff00000 	.word	0x7ff00000
 80034f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80034f2:	1c59      	adds	r1, r3, #1
 80034f4:	911b      	str	r1, [sp, #108]	; 0x6c
 80034f6:	785b      	ldrb	r3, [r3, #1]
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d0f9      	beq.n	80034f0 <_strtod_l+0x2a0>
 80034fc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003500:	2908      	cmp	r1, #8
 8003502:	f63f af78 	bhi.w	80033f6 <_strtod_l+0x1a6>
 8003506:	f04f 0e0a 	mov.w	lr, #10
 800350a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800350e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003510:	9309      	str	r3, [sp, #36]	; 0x24
 8003512:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003514:	1c59      	adds	r1, r3, #1
 8003516:	911b      	str	r1, [sp, #108]	; 0x6c
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800351e:	2d09      	cmp	r5, #9
 8003520:	d935      	bls.n	800358e <_strtod_l+0x33e>
 8003522:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003524:	1b49      	subs	r1, r1, r5
 8003526:	2908      	cmp	r1, #8
 8003528:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800352c:	dc02      	bgt.n	8003534 <_strtod_l+0x2e4>
 800352e:	4565      	cmp	r5, ip
 8003530:	bfa8      	it	ge
 8003532:	4665      	movge	r5, ip
 8003534:	b107      	cbz	r7, 8003538 <_strtod_l+0x2e8>
 8003536:	426d      	negs	r5, r5
 8003538:	2c00      	cmp	r4, #0
 800353a:	d14c      	bne.n	80035d6 <_strtod_l+0x386>
 800353c:	9907      	ldr	r1, [sp, #28]
 800353e:	4301      	orrs	r1, r0
 8003540:	f47f aec7 	bne.w	80032d2 <_strtod_l+0x82>
 8003544:	2a00      	cmp	r2, #0
 8003546:	f47f aee0 	bne.w	800330a <_strtod_l+0xba>
 800354a:	2b69      	cmp	r3, #105	; 0x69
 800354c:	d026      	beq.n	800359c <_strtod_l+0x34c>
 800354e:	dc23      	bgt.n	8003598 <_strtod_l+0x348>
 8003550:	2b49      	cmp	r3, #73	; 0x49
 8003552:	d023      	beq.n	800359c <_strtod_l+0x34c>
 8003554:	2b4e      	cmp	r3, #78	; 0x4e
 8003556:	f47f aed8 	bne.w	800330a <_strtod_l+0xba>
 800355a:	499c      	ldr	r1, [pc, #624]	; (80037cc <_strtod_l+0x57c>)
 800355c:	a81b      	add	r0, sp, #108	; 0x6c
 800355e:	f000 ffb9 	bl	80044d4 <__match>
 8003562:	2800      	cmp	r0, #0
 8003564:	f43f aed1 	beq.w	800330a <_strtod_l+0xba>
 8003568:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b28      	cmp	r3, #40	; 0x28
 800356e:	d12c      	bne.n	80035ca <_strtod_l+0x37a>
 8003570:	4997      	ldr	r1, [pc, #604]	; (80037d0 <_strtod_l+0x580>)
 8003572:	aa1e      	add	r2, sp, #120	; 0x78
 8003574:	a81b      	add	r0, sp, #108	; 0x6c
 8003576:	f000 ffc1 	bl	80044fc <__hexnan>
 800357a:	2805      	cmp	r0, #5
 800357c:	d125      	bne.n	80035ca <_strtod_l+0x37a>
 800357e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003580:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8003584:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003588:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800358c:	e6a1      	b.n	80032d2 <_strtod_l+0x82>
 800358e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8003592:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003596:	e7bc      	b.n	8003512 <_strtod_l+0x2c2>
 8003598:	2b6e      	cmp	r3, #110	; 0x6e
 800359a:	e7dc      	b.n	8003556 <_strtod_l+0x306>
 800359c:	498d      	ldr	r1, [pc, #564]	; (80037d4 <_strtod_l+0x584>)
 800359e:	a81b      	add	r0, sp, #108	; 0x6c
 80035a0:	f000 ff98 	bl	80044d4 <__match>
 80035a4:	2800      	cmp	r0, #0
 80035a6:	f43f aeb0 	beq.w	800330a <_strtod_l+0xba>
 80035aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80035ac:	498a      	ldr	r1, [pc, #552]	; (80037d8 <_strtod_l+0x588>)
 80035ae:	3b01      	subs	r3, #1
 80035b0:	a81b      	add	r0, sp, #108	; 0x6c
 80035b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80035b4:	f000 ff8e 	bl	80044d4 <__match>
 80035b8:	b910      	cbnz	r0, 80035c0 <_strtod_l+0x370>
 80035ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80035bc:	3301      	adds	r3, #1
 80035be:	931b      	str	r3, [sp, #108]	; 0x6c
 80035c0:	f04f 0800 	mov.w	r8, #0
 80035c4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80037e8 <_strtod_l+0x598>
 80035c8:	e683      	b.n	80032d2 <_strtod_l+0x82>
 80035ca:	4884      	ldr	r0, [pc, #528]	; (80037dc <_strtod_l+0x58c>)
 80035cc:	f002 f812 	bl	80055f4 <nan>
 80035d0:	4680      	mov	r8, r0
 80035d2:	4689      	mov	r9, r1
 80035d4:	e67d      	b.n	80032d2 <_strtod_l+0x82>
 80035d6:	9b04      	ldr	r3, [sp, #16]
 80035d8:	f1bb 0f00 	cmp.w	fp, #0
 80035dc:	bf08      	it	eq
 80035de:	46a3      	moveq	fp, r4
 80035e0:	1aeb      	subs	r3, r5, r3
 80035e2:	2c10      	cmp	r4, #16
 80035e4:	9806      	ldr	r0, [sp, #24]
 80035e6:	4626      	mov	r6, r4
 80035e8:	9307      	str	r3, [sp, #28]
 80035ea:	bfa8      	it	ge
 80035ec:	2610      	movge	r6, #16
 80035ee:	f7fc fef9 	bl	80003e4 <__aeabi_ui2d>
 80035f2:	2c09      	cmp	r4, #9
 80035f4:	4680      	mov	r8, r0
 80035f6:	4689      	mov	r9, r1
 80035f8:	dd13      	ble.n	8003622 <_strtod_l+0x3d2>
 80035fa:	4b79      	ldr	r3, [pc, #484]	; (80037e0 <_strtod_l+0x590>)
 80035fc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003600:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003604:	f7fc ff68 	bl	80004d8 <__aeabi_dmul>
 8003608:	4680      	mov	r8, r0
 800360a:	9805      	ldr	r0, [sp, #20]
 800360c:	4689      	mov	r9, r1
 800360e:	f7fc fee9 	bl	80003e4 <__aeabi_ui2d>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4640      	mov	r0, r8
 8003618:	4649      	mov	r1, r9
 800361a:	f7fc fda7 	bl	800016c <__adddf3>
 800361e:	4680      	mov	r8, r0
 8003620:	4689      	mov	r9, r1
 8003622:	2c0f      	cmp	r4, #15
 8003624:	dc36      	bgt.n	8003694 <_strtod_l+0x444>
 8003626:	9b07      	ldr	r3, [sp, #28]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f43f ae52 	beq.w	80032d2 <_strtod_l+0x82>
 800362e:	dd22      	ble.n	8003676 <_strtod_l+0x426>
 8003630:	2b16      	cmp	r3, #22
 8003632:	dc09      	bgt.n	8003648 <_strtod_l+0x3f8>
 8003634:	4c6a      	ldr	r4, [pc, #424]	; (80037e0 <_strtod_l+0x590>)
 8003636:	4642      	mov	r2, r8
 8003638:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800363c:	464b      	mov	r3, r9
 800363e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003642:	f7fc ff49 	bl	80004d8 <__aeabi_dmul>
 8003646:	e7c3      	b.n	80035d0 <_strtod_l+0x380>
 8003648:	9a07      	ldr	r2, [sp, #28]
 800364a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800364e:	4293      	cmp	r3, r2
 8003650:	db20      	blt.n	8003694 <_strtod_l+0x444>
 8003652:	4d63      	ldr	r5, [pc, #396]	; (80037e0 <_strtod_l+0x590>)
 8003654:	f1c4 040f 	rsb	r4, r4, #15
 8003658:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800365c:	4642      	mov	r2, r8
 800365e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003662:	464b      	mov	r3, r9
 8003664:	f7fc ff38 	bl	80004d8 <__aeabi_dmul>
 8003668:	9b07      	ldr	r3, [sp, #28]
 800366a:	1b1c      	subs	r4, r3, r4
 800366c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003674:	e7e5      	b.n	8003642 <_strtod_l+0x3f2>
 8003676:	9b07      	ldr	r3, [sp, #28]
 8003678:	3316      	adds	r3, #22
 800367a:	db0b      	blt.n	8003694 <_strtod_l+0x444>
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	4a58      	ldr	r2, [pc, #352]	; (80037e0 <_strtod_l+0x590>)
 8003680:	1b5d      	subs	r5, r3, r5
 8003682:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8003686:	4640      	mov	r0, r8
 8003688:	e9d5 2300 	ldrd	r2, r3, [r5]
 800368c:	4649      	mov	r1, r9
 800368e:	f7fd f84d 	bl	800072c <__aeabi_ddiv>
 8003692:	e79d      	b.n	80035d0 <_strtod_l+0x380>
 8003694:	9b07      	ldr	r3, [sp, #28]
 8003696:	1ba6      	subs	r6, r4, r6
 8003698:	441e      	add	r6, r3
 800369a:	2e00      	cmp	r6, #0
 800369c:	dd71      	ble.n	8003782 <_strtod_l+0x532>
 800369e:	f016 030f 	ands.w	r3, r6, #15
 80036a2:	d00a      	beq.n	80036ba <_strtod_l+0x46a>
 80036a4:	494e      	ldr	r1, [pc, #312]	; (80037e0 <_strtod_l+0x590>)
 80036a6:	4642      	mov	r2, r8
 80036a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80036ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036b0:	464b      	mov	r3, r9
 80036b2:	f7fc ff11 	bl	80004d8 <__aeabi_dmul>
 80036b6:	4680      	mov	r8, r0
 80036b8:	4689      	mov	r9, r1
 80036ba:	f036 060f 	bics.w	r6, r6, #15
 80036be:	d050      	beq.n	8003762 <_strtod_l+0x512>
 80036c0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80036c4:	dd27      	ble.n	8003716 <_strtod_l+0x4c6>
 80036c6:	f04f 0b00 	mov.w	fp, #0
 80036ca:	f8cd b010 	str.w	fp, [sp, #16]
 80036ce:	f8cd b020 	str.w	fp, [sp, #32]
 80036d2:	f8cd b018 	str.w	fp, [sp, #24]
 80036d6:	2322      	movs	r3, #34	; 0x22
 80036d8:	f04f 0800 	mov.w	r8, #0
 80036dc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80037e8 <_strtod_l+0x598>
 80036e0:	f8ca 3000 	str.w	r3, [sl]
 80036e4:	9b08      	ldr	r3, [sp, #32]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f43f adf3 	beq.w	80032d2 <_strtod_l+0x82>
 80036ec:	4650      	mov	r0, sl
 80036ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80036f0:	f001 f80c 	bl	800470c <_Bfree>
 80036f4:	4650      	mov	r0, sl
 80036f6:	9906      	ldr	r1, [sp, #24]
 80036f8:	f001 f808 	bl	800470c <_Bfree>
 80036fc:	4650      	mov	r0, sl
 80036fe:	9904      	ldr	r1, [sp, #16]
 8003700:	f001 f804 	bl	800470c <_Bfree>
 8003704:	4650      	mov	r0, sl
 8003706:	9908      	ldr	r1, [sp, #32]
 8003708:	f001 f800 	bl	800470c <_Bfree>
 800370c:	4659      	mov	r1, fp
 800370e:	4650      	mov	r0, sl
 8003710:	f000 fffc 	bl	800470c <_Bfree>
 8003714:	e5dd      	b.n	80032d2 <_strtod_l+0x82>
 8003716:	2300      	movs	r3, #0
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	461f      	mov	r7, r3
 800371e:	1136      	asrs	r6, r6, #4
 8003720:	2e01      	cmp	r6, #1
 8003722:	dc21      	bgt.n	8003768 <_strtod_l+0x518>
 8003724:	b10b      	cbz	r3, 800372a <_strtod_l+0x4da>
 8003726:	4680      	mov	r8, r0
 8003728:	4689      	mov	r9, r1
 800372a:	4b2e      	ldr	r3, [pc, #184]	; (80037e4 <_strtod_l+0x594>)
 800372c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003730:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003734:	4642      	mov	r2, r8
 8003736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800373a:	464b      	mov	r3, r9
 800373c:	f7fc fecc 	bl	80004d8 <__aeabi_dmul>
 8003740:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <_strtod_l+0x598>)
 8003742:	460a      	mov	r2, r1
 8003744:	400b      	ands	r3, r1
 8003746:	4929      	ldr	r1, [pc, #164]	; (80037ec <_strtod_l+0x59c>)
 8003748:	4680      	mov	r8, r0
 800374a:	428b      	cmp	r3, r1
 800374c:	d8bb      	bhi.n	80036c6 <_strtod_l+0x476>
 800374e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003752:	428b      	cmp	r3, r1
 8003754:	bf86      	itte	hi
 8003756:	f04f 38ff 	movhi.w	r8, #4294967295
 800375a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80037f0 <_strtod_l+0x5a0>
 800375e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003762:	2300      	movs	r3, #0
 8003764:	9305      	str	r3, [sp, #20]
 8003766:	e07e      	b.n	8003866 <_strtod_l+0x616>
 8003768:	07f2      	lsls	r2, r6, #31
 800376a:	d507      	bpl.n	800377c <_strtod_l+0x52c>
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <_strtod_l+0x594>)
 800376e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc feaf 	bl	80004d8 <__aeabi_dmul>
 800377a:	2301      	movs	r3, #1
 800377c:	3701      	adds	r7, #1
 800377e:	1076      	asrs	r6, r6, #1
 8003780:	e7ce      	b.n	8003720 <_strtod_l+0x4d0>
 8003782:	d0ee      	beq.n	8003762 <_strtod_l+0x512>
 8003784:	4276      	negs	r6, r6
 8003786:	f016 020f 	ands.w	r2, r6, #15
 800378a:	d00a      	beq.n	80037a2 <_strtod_l+0x552>
 800378c:	4b14      	ldr	r3, [pc, #80]	; (80037e0 <_strtod_l+0x590>)
 800378e:	4640      	mov	r0, r8
 8003790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003794:	4649      	mov	r1, r9
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fc ffc7 	bl	800072c <__aeabi_ddiv>
 800379e:	4680      	mov	r8, r0
 80037a0:	4689      	mov	r9, r1
 80037a2:	1136      	asrs	r6, r6, #4
 80037a4:	d0dd      	beq.n	8003762 <_strtod_l+0x512>
 80037a6:	2e1f      	cmp	r6, #31
 80037a8:	dd24      	ble.n	80037f4 <_strtod_l+0x5a4>
 80037aa:	f04f 0b00 	mov.w	fp, #0
 80037ae:	f8cd b010 	str.w	fp, [sp, #16]
 80037b2:	f8cd b020 	str.w	fp, [sp, #32]
 80037b6:	f8cd b018 	str.w	fp, [sp, #24]
 80037ba:	2322      	movs	r3, #34	; 0x22
 80037bc:	f04f 0800 	mov.w	r8, #0
 80037c0:	f04f 0900 	mov.w	r9, #0
 80037c4:	f8ca 3000 	str.w	r3, [sl]
 80037c8:	e78c      	b.n	80036e4 <_strtod_l+0x494>
 80037ca:	bf00      	nop
 80037cc:	08005f59 	.word	0x08005f59
 80037d0:	08005f70 	.word	0x08005f70
 80037d4:	08005f50 	.word	0x08005f50
 80037d8:	08005f53 	.word	0x08005f53
 80037dc:	08006063 	.word	0x08006063
 80037e0:	08006180 	.word	0x08006180
 80037e4:	08006158 	.word	0x08006158
 80037e8:	7ff00000 	.word	0x7ff00000
 80037ec:	7ca00000 	.word	0x7ca00000
 80037f0:	7fefffff 	.word	0x7fefffff
 80037f4:	f016 0310 	ands.w	r3, r6, #16
 80037f8:	bf18      	it	ne
 80037fa:	236a      	movne	r3, #106	; 0x6a
 80037fc:	4640      	mov	r0, r8
 80037fe:	9305      	str	r3, [sp, #20]
 8003800:	4649      	mov	r1, r9
 8003802:	2300      	movs	r3, #0
 8003804:	4fb2      	ldr	r7, [pc, #712]	; (8003ad0 <_strtod_l+0x880>)
 8003806:	07f2      	lsls	r2, r6, #31
 8003808:	d504      	bpl.n	8003814 <_strtod_l+0x5c4>
 800380a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800380e:	f7fc fe63 	bl	80004d8 <__aeabi_dmul>
 8003812:	2301      	movs	r3, #1
 8003814:	1076      	asrs	r6, r6, #1
 8003816:	f107 0708 	add.w	r7, r7, #8
 800381a:	d1f4      	bne.n	8003806 <_strtod_l+0x5b6>
 800381c:	b10b      	cbz	r3, 8003822 <_strtod_l+0x5d2>
 800381e:	4680      	mov	r8, r0
 8003820:	4689      	mov	r9, r1
 8003822:	9b05      	ldr	r3, [sp, #20]
 8003824:	b1bb      	cbz	r3, 8003856 <_strtod_l+0x606>
 8003826:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800382a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800382e:	2b00      	cmp	r3, #0
 8003830:	4649      	mov	r1, r9
 8003832:	dd10      	ble.n	8003856 <_strtod_l+0x606>
 8003834:	2b1f      	cmp	r3, #31
 8003836:	f340 812b 	ble.w	8003a90 <_strtod_l+0x840>
 800383a:	2b34      	cmp	r3, #52	; 0x34
 800383c:	bfd8      	it	le
 800383e:	f04f 32ff 	movle.w	r2, #4294967295
 8003842:	f04f 0800 	mov.w	r8, #0
 8003846:	bfcf      	iteee	gt
 8003848:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800384c:	3b20      	suble	r3, #32
 800384e:	fa02 f303 	lslle.w	r3, r2, r3
 8003852:	ea03 0901 	andle.w	r9, r3, r1
 8003856:	2200      	movs	r2, #0
 8003858:	2300      	movs	r3, #0
 800385a:	4640      	mov	r0, r8
 800385c:	4649      	mov	r1, r9
 800385e:	f7fd f8a3 	bl	80009a8 <__aeabi_dcmpeq>
 8003862:	2800      	cmp	r0, #0
 8003864:	d1a1      	bne.n	80037aa <_strtod_l+0x55a>
 8003866:	9b06      	ldr	r3, [sp, #24]
 8003868:	465a      	mov	r2, fp
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4650      	mov	r0, sl
 800386e:	4623      	mov	r3, r4
 8003870:	9908      	ldr	r1, [sp, #32]
 8003872:	f000 ffb7 	bl	80047e4 <__s2b>
 8003876:	9008      	str	r0, [sp, #32]
 8003878:	2800      	cmp	r0, #0
 800387a:	f43f af24 	beq.w	80036c6 <_strtod_l+0x476>
 800387e:	9b04      	ldr	r3, [sp, #16]
 8003880:	f04f 0b00 	mov.w	fp, #0
 8003884:	1b5d      	subs	r5, r3, r5
 8003886:	9b07      	ldr	r3, [sp, #28]
 8003888:	f8cd b010 	str.w	fp, [sp, #16]
 800388c:	2b00      	cmp	r3, #0
 800388e:	bfb4      	ite	lt
 8003890:	462b      	movlt	r3, r5
 8003892:	2300      	movge	r3, #0
 8003894:	930e      	str	r3, [sp, #56]	; 0x38
 8003896:	9b07      	ldr	r3, [sp, #28]
 8003898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800389c:	9316      	str	r3, [sp, #88]	; 0x58
 800389e:	9b08      	ldr	r3, [sp, #32]
 80038a0:	4650      	mov	r0, sl
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	f000 fef2 	bl	800468c <_Balloc>
 80038a8:	9006      	str	r0, [sp, #24]
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f43f af13 	beq.w	80036d6 <_strtod_l+0x486>
 80038b0:	9b08      	ldr	r3, [sp, #32]
 80038b2:	300c      	adds	r0, #12
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	f103 010c 	add.w	r1, r3, #12
 80038ba:	3202      	adds	r2, #2
 80038bc:	0092      	lsls	r2, r2, #2
 80038be:	f000 fecb 	bl	8004658 <memcpy>
 80038c2:	ab1e      	add	r3, sp, #120	; 0x78
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	ab1d      	add	r3, sp, #116	; 0x74
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4642      	mov	r2, r8
 80038cc:	464b      	mov	r3, r9
 80038ce:	4650      	mov	r0, sl
 80038d0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80038d4:	f001 fac4 	bl	8004e60 <__d2b>
 80038d8:	901c      	str	r0, [sp, #112]	; 0x70
 80038da:	2800      	cmp	r0, #0
 80038dc:	f43f aefb 	beq.w	80036d6 <_strtod_l+0x486>
 80038e0:	2101      	movs	r1, #1
 80038e2:	4650      	mov	r0, sl
 80038e4:	f001 f816 	bl	8004914 <__i2b>
 80038e8:	4603      	mov	r3, r0
 80038ea:	9004      	str	r0, [sp, #16]
 80038ec:	2800      	cmp	r0, #0
 80038ee:	f43f aef2 	beq.w	80036d6 <_strtod_l+0x486>
 80038f2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80038f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	bfab      	itete	ge
 80038fa:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80038fc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80038fe:	18ee      	addge	r6, r5, r3
 8003900:	1b5c      	sublt	r4, r3, r5
 8003902:	9b05      	ldr	r3, [sp, #20]
 8003904:	bfa8      	it	ge
 8003906:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003908:	eba5 0503 	sub.w	r5, r5, r3
 800390c:	4415      	add	r5, r2
 800390e:	4b71      	ldr	r3, [pc, #452]	; (8003ad4 <_strtod_l+0x884>)
 8003910:	f105 35ff 	add.w	r5, r5, #4294967295
 8003914:	bfb8      	it	lt
 8003916:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003918:	429d      	cmp	r5, r3
 800391a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800391e:	f280 80c9 	bge.w	8003ab4 <_strtod_l+0x864>
 8003922:	1b5b      	subs	r3, r3, r5
 8003924:	2b1f      	cmp	r3, #31
 8003926:	f04f 0701 	mov.w	r7, #1
 800392a:	eba2 0203 	sub.w	r2, r2, r3
 800392e:	f300 80b6 	bgt.w	8003a9e <_strtod_l+0x84e>
 8003932:	2500      	movs	r5, #0
 8003934:	fa07 f303 	lsl.w	r3, r7, r3
 8003938:	930f      	str	r3, [sp, #60]	; 0x3c
 800393a:	18b7      	adds	r7, r6, r2
 800393c:	9b05      	ldr	r3, [sp, #20]
 800393e:	42be      	cmp	r6, r7
 8003940:	4414      	add	r4, r2
 8003942:	441c      	add	r4, r3
 8003944:	4633      	mov	r3, r6
 8003946:	bfa8      	it	ge
 8003948:	463b      	movge	r3, r7
 800394a:	42a3      	cmp	r3, r4
 800394c:	bfa8      	it	ge
 800394e:	4623      	movge	r3, r4
 8003950:	2b00      	cmp	r3, #0
 8003952:	bfc2      	ittt	gt
 8003954:	1aff      	subgt	r7, r7, r3
 8003956:	1ae4      	subgt	r4, r4, r3
 8003958:	1af6      	subgt	r6, r6, r3
 800395a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800395c:	2b00      	cmp	r3, #0
 800395e:	dd17      	ble.n	8003990 <_strtod_l+0x740>
 8003960:	461a      	mov	r2, r3
 8003962:	4650      	mov	r0, sl
 8003964:	9904      	ldr	r1, [sp, #16]
 8003966:	f001 f88f 	bl	8004a88 <__pow5mult>
 800396a:	9004      	str	r0, [sp, #16]
 800396c:	2800      	cmp	r0, #0
 800396e:	f43f aeb2 	beq.w	80036d6 <_strtod_l+0x486>
 8003972:	4601      	mov	r1, r0
 8003974:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003976:	4650      	mov	r0, sl
 8003978:	f000 ffe2 	bl	8004940 <__multiply>
 800397c:	9009      	str	r0, [sp, #36]	; 0x24
 800397e:	2800      	cmp	r0, #0
 8003980:	f43f aea9 	beq.w	80036d6 <_strtod_l+0x486>
 8003984:	4650      	mov	r0, sl
 8003986:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003988:	f000 fec0 	bl	800470c <_Bfree>
 800398c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800398e:	931c      	str	r3, [sp, #112]	; 0x70
 8003990:	2f00      	cmp	r7, #0
 8003992:	f300 8093 	bgt.w	8003abc <_strtod_l+0x86c>
 8003996:	9b07      	ldr	r3, [sp, #28]
 8003998:	2b00      	cmp	r3, #0
 800399a:	dd08      	ble.n	80039ae <_strtod_l+0x75e>
 800399c:	4650      	mov	r0, sl
 800399e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80039a0:	9906      	ldr	r1, [sp, #24]
 80039a2:	f001 f871 	bl	8004a88 <__pow5mult>
 80039a6:	9006      	str	r0, [sp, #24]
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f43f ae94 	beq.w	80036d6 <_strtod_l+0x486>
 80039ae:	2c00      	cmp	r4, #0
 80039b0:	dd08      	ble.n	80039c4 <_strtod_l+0x774>
 80039b2:	4622      	mov	r2, r4
 80039b4:	4650      	mov	r0, sl
 80039b6:	9906      	ldr	r1, [sp, #24]
 80039b8:	f001 f8c0 	bl	8004b3c <__lshift>
 80039bc:	9006      	str	r0, [sp, #24]
 80039be:	2800      	cmp	r0, #0
 80039c0:	f43f ae89 	beq.w	80036d6 <_strtod_l+0x486>
 80039c4:	2e00      	cmp	r6, #0
 80039c6:	dd08      	ble.n	80039da <_strtod_l+0x78a>
 80039c8:	4632      	mov	r2, r6
 80039ca:	4650      	mov	r0, sl
 80039cc:	9904      	ldr	r1, [sp, #16]
 80039ce:	f001 f8b5 	bl	8004b3c <__lshift>
 80039d2:	9004      	str	r0, [sp, #16]
 80039d4:	2800      	cmp	r0, #0
 80039d6:	f43f ae7e 	beq.w	80036d6 <_strtod_l+0x486>
 80039da:	4650      	mov	r0, sl
 80039dc:	9a06      	ldr	r2, [sp, #24]
 80039de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80039e0:	f001 f934 	bl	8004c4c <__mdiff>
 80039e4:	4683      	mov	fp, r0
 80039e6:	2800      	cmp	r0, #0
 80039e8:	f43f ae75 	beq.w	80036d6 <_strtod_l+0x486>
 80039ec:	2400      	movs	r4, #0
 80039ee:	68c3      	ldr	r3, [r0, #12]
 80039f0:	9904      	ldr	r1, [sp, #16]
 80039f2:	60c4      	str	r4, [r0, #12]
 80039f4:	930d      	str	r3, [sp, #52]	; 0x34
 80039f6:	f001 f90d 	bl	8004c14 <__mcmp>
 80039fa:	42a0      	cmp	r0, r4
 80039fc:	da70      	bge.n	8003ae0 <_strtod_l+0x890>
 80039fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a00:	ea53 0308 	orrs.w	r3, r3, r8
 8003a04:	f040 8096 	bne.w	8003b34 <_strtod_l+0x8e4>
 8003a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8091 	bne.w	8003b34 <_strtod_l+0x8e4>
 8003a12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a16:	0d1b      	lsrs	r3, r3, #20
 8003a18:	051b      	lsls	r3, r3, #20
 8003a1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003a1e:	f240 8089 	bls.w	8003b34 <_strtod_l+0x8e4>
 8003a22:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003a26:	b923      	cbnz	r3, 8003a32 <_strtod_l+0x7e2>
 8003a28:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f340 8081 	ble.w	8003b34 <_strtod_l+0x8e4>
 8003a32:	4659      	mov	r1, fp
 8003a34:	2201      	movs	r2, #1
 8003a36:	4650      	mov	r0, sl
 8003a38:	f001 f880 	bl	8004b3c <__lshift>
 8003a3c:	9904      	ldr	r1, [sp, #16]
 8003a3e:	4683      	mov	fp, r0
 8003a40:	f001 f8e8 	bl	8004c14 <__mcmp>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	dd75      	ble.n	8003b34 <_strtod_l+0x8e4>
 8003a48:	9905      	ldr	r1, [sp, #20]
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	4a22      	ldr	r2, [pc, #136]	; (8003ad8 <_strtod_l+0x888>)
 8003a4e:	2900      	cmp	r1, #0
 8003a50:	f000 8091 	beq.w	8003b76 <_strtod_l+0x926>
 8003a54:	ea02 0109 	and.w	r1, r2, r9
 8003a58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003a5c:	f300 808b 	bgt.w	8003b76 <_strtod_l+0x926>
 8003a60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003a64:	f77f aea9 	ble.w	80037ba <_strtod_l+0x56a>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <_strtod_l+0x88c>)
 8003a6c:	4640      	mov	r0, r8
 8003a6e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8003a72:	4649      	mov	r1, r9
 8003a74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003a78:	f7fc fd2e 	bl	80004d8 <__aeabi_dmul>
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4303      	orrs	r3, r0
 8003a80:	bf08      	it	eq
 8003a82:	2322      	moveq	r3, #34	; 0x22
 8003a84:	4680      	mov	r8, r0
 8003a86:	4689      	mov	r9, r1
 8003a88:	bf08      	it	eq
 8003a8a:	f8ca 3000 	streq.w	r3, [sl]
 8003a8e:	e62d      	b.n	80036ec <_strtod_l+0x49c>
 8003a90:	f04f 32ff 	mov.w	r2, #4294967295
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	ea03 0808 	and.w	r8, r3, r8
 8003a9c:	e6db      	b.n	8003856 <_strtod_l+0x606>
 8003a9e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8003aa2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8003aa6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8003aaa:	35e2      	adds	r5, #226	; 0xe2
 8003aac:	fa07 f505 	lsl.w	r5, r7, r5
 8003ab0:	970f      	str	r7, [sp, #60]	; 0x3c
 8003ab2:	e742      	b.n	800393a <_strtod_l+0x6ea>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	2500      	movs	r5, #0
 8003ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003aba:	e73e      	b.n	800393a <_strtod_l+0x6ea>
 8003abc:	463a      	mov	r2, r7
 8003abe:	4650      	mov	r0, sl
 8003ac0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003ac2:	f001 f83b 	bl	8004b3c <__lshift>
 8003ac6:	901c      	str	r0, [sp, #112]	; 0x70
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f47f af64 	bne.w	8003996 <_strtod_l+0x746>
 8003ace:	e602      	b.n	80036d6 <_strtod_l+0x486>
 8003ad0:	08005f88 	.word	0x08005f88
 8003ad4:	fffffc02 	.word	0xfffffc02
 8003ad8:	7ff00000 	.word	0x7ff00000
 8003adc:	39500000 	.word	0x39500000
 8003ae0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003ae4:	d166      	bne.n	8003bb4 <_strtod_l+0x964>
 8003ae6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003aec:	b35a      	cbz	r2, 8003b46 <_strtod_l+0x8f6>
 8003aee:	4a9c      	ldr	r2, [pc, #624]	; (8003d60 <_strtod_l+0xb10>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d12c      	bne.n	8003b4e <_strtod_l+0x8fe>
 8003af4:	9b05      	ldr	r3, [sp, #20]
 8003af6:	4640      	mov	r0, r8
 8003af8:	b303      	cbz	r3, 8003b3c <_strtod_l+0x8ec>
 8003afa:	464b      	mov	r3, r9
 8003afc:	4a99      	ldr	r2, [pc, #612]	; (8003d64 <_strtod_l+0xb14>)
 8003afe:	f04f 31ff 	mov.w	r1, #4294967295
 8003b02:	401a      	ands	r2, r3
 8003b04:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003b08:	d81b      	bhi.n	8003b42 <_strtod_l+0x8f2>
 8003b0a:	0d12      	lsrs	r2, r2, #20
 8003b0c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003b10:	fa01 f303 	lsl.w	r3, r1, r3
 8003b14:	4298      	cmp	r0, r3
 8003b16:	d11a      	bne.n	8003b4e <_strtod_l+0x8fe>
 8003b18:	4b93      	ldr	r3, [pc, #588]	; (8003d68 <_strtod_l+0xb18>)
 8003b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d102      	bne.n	8003b26 <_strtod_l+0x8d6>
 8003b20:	3001      	adds	r0, #1
 8003b22:	f43f add8 	beq.w	80036d6 <_strtod_l+0x486>
 8003b26:	f04f 0800 	mov.w	r8, #0
 8003b2a:	4b8e      	ldr	r3, [pc, #568]	; (8003d64 <_strtod_l+0xb14>)
 8003b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b2e:	401a      	ands	r2, r3
 8003b30:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8003b34:	9b05      	ldr	r3, [sp, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d196      	bne.n	8003a68 <_strtod_l+0x818>
 8003b3a:	e5d7      	b.n	80036ec <_strtod_l+0x49c>
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e7e8      	b.n	8003b14 <_strtod_l+0x8c4>
 8003b42:	460b      	mov	r3, r1
 8003b44:	e7e6      	b.n	8003b14 <_strtod_l+0x8c4>
 8003b46:	ea53 0308 	orrs.w	r3, r3, r8
 8003b4a:	f43f af7d 	beq.w	8003a48 <_strtod_l+0x7f8>
 8003b4e:	b1e5      	cbz	r5, 8003b8a <_strtod_l+0x93a>
 8003b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b52:	421d      	tst	r5, r3
 8003b54:	d0ee      	beq.n	8003b34 <_strtod_l+0x8e4>
 8003b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	9a05      	ldr	r2, [sp, #20]
 8003b5e:	b1c3      	cbz	r3, 8003b92 <_strtod_l+0x942>
 8003b60:	f7ff fb54 	bl	800320c <sulp>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b6c:	f7fc fafe 	bl	800016c <__adddf3>
 8003b70:	4680      	mov	r8, r0
 8003b72:	4689      	mov	r9, r1
 8003b74:	e7de      	b.n	8003b34 <_strtod_l+0x8e4>
 8003b76:	4013      	ands	r3, r2
 8003b78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003b7c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8003b80:	f04f 38ff 	mov.w	r8, #4294967295
 8003b84:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8003b88:	e7d4      	b.n	8003b34 <_strtod_l+0x8e4>
 8003b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b8c:	ea13 0f08 	tst.w	r3, r8
 8003b90:	e7e0      	b.n	8003b54 <_strtod_l+0x904>
 8003b92:	f7ff fb3b 	bl	800320c <sulp>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003b9e:	f7fc fae3 	bl	8000168 <__aeabi_dsub>
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4680      	mov	r8, r0
 8003ba8:	4689      	mov	r9, r1
 8003baa:	f7fc fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0c0      	beq.n	8003b34 <_strtod_l+0x8e4>
 8003bb2:	e602      	b.n	80037ba <_strtod_l+0x56a>
 8003bb4:	4658      	mov	r0, fp
 8003bb6:	9904      	ldr	r1, [sp, #16]
 8003bb8:	f001 f9ae 	bl	8004f18 <__ratio>
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	460f      	mov	r7, r1
 8003bc6:	f7fc ff03 	bl	80009d0 <__aeabi_dcmple>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d075      	beq.n	8003cba <_strtod_l+0xa6a>
 8003bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d047      	beq.n	8003c64 <_strtod_l+0xa14>
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	4f65      	ldr	r7, [pc, #404]	; (8003d6c <_strtod_l+0xb1c>)
 8003bd8:	4d64      	ldr	r5, [pc, #400]	; (8003d6c <_strtod_l+0xb1c>)
 8003bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be0:	0d1b      	lsrs	r3, r3, #20
 8003be2:	051b      	lsls	r3, r3, #20
 8003be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8003be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003be8:	4b61      	ldr	r3, [pc, #388]	; (8003d70 <_strtod_l+0xb20>)
 8003bea:	429a      	cmp	r2, r3
 8003bec:	f040 80c8 	bne.w	8003d80 <_strtod_l+0xb30>
 8003bf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003bf4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8003c00:	4649      	mov	r1, r9
 8003c02:	f001 f8b3 	bl	8004d6c <__ulp>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	f7fc fc63 	bl	80004d8 <__aeabi_dmul>
 8003c12:	4642      	mov	r2, r8
 8003c14:	464b      	mov	r3, r9
 8003c16:	f7fc faa9 	bl	800016c <__adddf3>
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4951      	ldr	r1, [pc, #324]	; (8003d64 <_strtod_l+0xb14>)
 8003c1e:	4a55      	ldr	r2, [pc, #340]	; (8003d74 <_strtod_l+0xb24>)
 8003c20:	4019      	ands	r1, r3
 8003c22:	4291      	cmp	r1, r2
 8003c24:	4680      	mov	r8, r0
 8003c26:	d95e      	bls.n	8003ce6 <_strtod_l+0xa96>
 8003c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d103      	bne.n	8003c3a <_strtod_l+0x9ea>
 8003c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c34:	3301      	adds	r3, #1
 8003c36:	f43f ad4e 	beq.w	80036d6 <_strtod_l+0x486>
 8003c3a:	f04f 38ff 	mov.w	r8, #4294967295
 8003c3e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003d68 <_strtod_l+0xb18>
 8003c42:	4650      	mov	r0, sl
 8003c44:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003c46:	f000 fd61 	bl	800470c <_Bfree>
 8003c4a:	4650      	mov	r0, sl
 8003c4c:	9906      	ldr	r1, [sp, #24]
 8003c4e:	f000 fd5d 	bl	800470c <_Bfree>
 8003c52:	4650      	mov	r0, sl
 8003c54:	9904      	ldr	r1, [sp, #16]
 8003c56:	f000 fd59 	bl	800470c <_Bfree>
 8003c5a:	4659      	mov	r1, fp
 8003c5c:	4650      	mov	r0, sl
 8003c5e:	f000 fd55 	bl	800470c <_Bfree>
 8003c62:	e61c      	b.n	800389e <_strtod_l+0x64e>
 8003c64:	f1b8 0f00 	cmp.w	r8, #0
 8003c68:	d119      	bne.n	8003c9e <_strtod_l+0xa4e>
 8003c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c70:	b9e3      	cbnz	r3, 8003cac <_strtod_l+0xa5c>
 8003c72:	2200      	movs	r2, #0
 8003c74:	4630      	mov	r0, r6
 8003c76:	4639      	mov	r1, r7
 8003c78:	4b3c      	ldr	r3, [pc, #240]	; (8003d6c <_strtod_l+0xb1c>)
 8003c7a:	f7fc fe9f 	bl	80009bc <__aeabi_dcmplt>
 8003c7e:	b9c8      	cbnz	r0, 8003cb4 <_strtod_l+0xa64>
 8003c80:	2200      	movs	r2, #0
 8003c82:	4630      	mov	r0, r6
 8003c84:	4639      	mov	r1, r7
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <_strtod_l+0xb28>)
 8003c88:	f7fc fc26 	bl	80004d8 <__aeabi_dmul>
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	460d      	mov	r5, r1
 8003c90:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003c94:	9418      	str	r4, [sp, #96]	; 0x60
 8003c96:	9319      	str	r3, [sp, #100]	; 0x64
 8003c98:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8003c9c:	e79d      	b.n	8003bda <_strtod_l+0x98a>
 8003c9e:	f1b8 0f01 	cmp.w	r8, #1
 8003ca2:	d103      	bne.n	8003cac <_strtod_l+0xa5c>
 8003ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f43f ad87 	beq.w	80037ba <_strtod_l+0x56a>
 8003cac:	2600      	movs	r6, #0
 8003cae:	2400      	movs	r4, #0
 8003cb0:	4f32      	ldr	r7, [pc, #200]	; (8003d7c <_strtod_l+0xb2c>)
 8003cb2:	e791      	b.n	8003bd8 <_strtod_l+0x988>
 8003cb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003cb6:	4d30      	ldr	r5, [pc, #192]	; (8003d78 <_strtod_l+0xb28>)
 8003cb8:	e7ea      	b.n	8003c90 <_strtod_l+0xa40>
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <_strtod_l+0xb28>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	4639      	mov	r1, r7
 8003cc2:	f7fc fc09 	bl	80004d8 <__aeabi_dmul>
 8003cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cc8:	4604      	mov	r4, r0
 8003cca:	460d      	mov	r5, r1
 8003ccc:	b933      	cbnz	r3, 8003cdc <_strtod_l+0xa8c>
 8003cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003cd2:	9010      	str	r0, [sp, #64]	; 0x40
 8003cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8003cd6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003cda:	e77e      	b.n	8003bda <_strtod_l+0x98a>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003ce4:	e7f7      	b.n	8003cd6 <_strtod_l+0xa86>
 8003ce6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8003cea:	9b05      	ldr	r3, [sp, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1a8      	bne.n	8003c42 <_strtod_l+0x9f2>
 8003cf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003cf6:	0d1b      	lsrs	r3, r3, #20
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d1a1      	bne.n	8003c42 <_strtod_l+0x9f2>
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7fd f951 	bl	8000fa8 <__aeabi_d2lz>
 8003d06:	f7fc fbb9 	bl	800047c <__aeabi_l2d>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4629      	mov	r1, r5
 8003d12:	f7fc fa29 	bl	8000168 <__aeabi_dsub>
 8003d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003d1c:	ea43 0308 	orr.w	r3, r3, r8
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4604      	mov	r4, r0
 8003d24:	460d      	mov	r5, r1
 8003d26:	d066      	beq.n	8003df6 <_strtod_l+0xba6>
 8003d28:	a309      	add	r3, pc, #36	; (adr r3, 8003d50 <_strtod_l+0xb00>)
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f7fc fe45 	bl	80009bc <__aeabi_dcmplt>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	f47f acda 	bne.w	80036ec <_strtod_l+0x49c>
 8003d38:	a307      	add	r3, pc, #28	; (adr r3, 8003d58 <_strtod_l+0xb08>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	4620      	mov	r0, r4
 8003d40:	4629      	mov	r1, r5
 8003d42:	f7fc fe59 	bl	80009f8 <__aeabi_dcmpgt>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	f43f af7b 	beq.w	8003c42 <_strtod_l+0x9f2>
 8003d4c:	e4ce      	b.n	80036ec <_strtod_l+0x49c>
 8003d4e:	bf00      	nop
 8003d50:	94a03595 	.word	0x94a03595
 8003d54:	3fdfffff 	.word	0x3fdfffff
 8003d58:	35afe535 	.word	0x35afe535
 8003d5c:	3fe00000 	.word	0x3fe00000
 8003d60:	000fffff 	.word	0x000fffff
 8003d64:	7ff00000 	.word	0x7ff00000
 8003d68:	7fefffff 	.word	0x7fefffff
 8003d6c:	3ff00000 	.word	0x3ff00000
 8003d70:	7fe00000 	.word	0x7fe00000
 8003d74:	7c9fffff 	.word	0x7c9fffff
 8003d78:	3fe00000 	.word	0x3fe00000
 8003d7c:	bff00000 	.word	0xbff00000
 8003d80:	9b05      	ldr	r3, [sp, #20]
 8003d82:	b313      	cbz	r3, 8003dca <_strtod_l+0xb7a>
 8003d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003d86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003d8a:	d81e      	bhi.n	8003dca <_strtod_l+0xb7a>
 8003d8c:	a326      	add	r3, pc, #152	; (adr r3, 8003e28 <_strtod_l+0xbd8>)
 8003d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d92:	4620      	mov	r0, r4
 8003d94:	4629      	mov	r1, r5
 8003d96:	f7fc fe1b 	bl	80009d0 <__aeabi_dcmple>
 8003d9a:	b190      	cbz	r0, 8003dc2 <_strtod_l+0xb72>
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7fc fe34 	bl	8000a0c <__aeabi_d2uiz>
 8003da4:	2801      	cmp	r0, #1
 8003da6:	bf38      	it	cc
 8003da8:	2001      	movcc	r0, #1
 8003daa:	f7fc fb1b 	bl	80003e4 <__aeabi_ui2d>
 8003dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003db0:	4604      	mov	r4, r0
 8003db2:	460d      	mov	r5, r1
 8003db4:	b9d3      	cbnz	r3, 8003dec <_strtod_l+0xb9c>
 8003db6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003dba:	9012      	str	r0, [sp, #72]	; 0x48
 8003dbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8003dbe:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8003dc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003dc4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8003dc8:	1a9f      	subs	r7, r3, r2
 8003dca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003dce:	f000 ffcd 	bl	8004d6c <__ulp>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4639      	mov	r1, r7
 8003dda:	f7fc fb7d 	bl	80004d8 <__aeabi_dmul>
 8003dde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003de2:	f7fc f9c3 	bl	800016c <__adddf3>
 8003de6:	4680      	mov	r8, r0
 8003de8:	4689      	mov	r9, r1
 8003dea:	e77e      	b.n	8003cea <_strtod_l+0xa9a>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003df4:	e7e3      	b.n	8003dbe <_strtod_l+0xb6e>
 8003df6:	a30e      	add	r3, pc, #56	; (adr r3, 8003e30 <_strtod_l+0xbe0>)
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f7fc fdde 	bl	80009bc <__aeabi_dcmplt>
 8003e00:	e7a1      	b.n	8003d46 <_strtod_l+0xaf6>
 8003e02:	2300      	movs	r3, #0
 8003e04:	930c      	str	r3, [sp, #48]	; 0x30
 8003e06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	f7ff ba65 	b.w	80032da <_strtod_l+0x8a>
 8003e10:	2b65      	cmp	r3, #101	; 0x65
 8003e12:	f43f ab5c 	beq.w	80034ce <_strtod_l+0x27e>
 8003e16:	2b45      	cmp	r3, #69	; 0x45
 8003e18:	f43f ab59 	beq.w	80034ce <_strtod_l+0x27e>
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f7ff bb8d 	b.w	800353c <_strtod_l+0x2ec>
 8003e22:	bf00      	nop
 8003e24:	f3af 8000 	nop.w
 8003e28:	ffc00000 	.word	0xffc00000
 8003e2c:	41dfffff 	.word	0x41dfffff
 8003e30:	94a03595 	.word	0x94a03595
 8003e34:	3fcfffff 	.word	0x3fcfffff

08003e38 <strtod>:
 8003e38:	460a      	mov	r2, r1
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	4802      	ldr	r0, [pc, #8]	; (8003e48 <strtod+0x10>)
 8003e3e:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <strtod+0x14>)
 8003e40:	6800      	ldr	r0, [r0, #0]
 8003e42:	f7ff ba05 	b.w	8003250 <_strtod_l>
 8003e46:	bf00      	nop
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	20000074 	.word	0x20000074

08003e50 <strtok>:
 8003e50:	4b16      	ldr	r3, [pc, #88]	; (8003eac <strtok+0x5c>)
 8003e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e56:	681f      	ldr	r7, [r3, #0]
 8003e58:	4605      	mov	r5, r0
 8003e5a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003e5c:	460e      	mov	r6, r1
 8003e5e:	b9ec      	cbnz	r4, 8003e9c <strtok+0x4c>
 8003e60:	2050      	movs	r0, #80	; 0x50
 8003e62:	f7ff f8fd 	bl	8003060 <malloc>
 8003e66:	4602      	mov	r2, r0
 8003e68:	65b8      	str	r0, [r7, #88]	; 0x58
 8003e6a:	b920      	cbnz	r0, 8003e76 <strtok+0x26>
 8003e6c:	2157      	movs	r1, #87	; 0x57
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <strtok+0x60>)
 8003e70:	4810      	ldr	r0, [pc, #64]	; (8003eb4 <strtok+0x64>)
 8003e72:	f000 f849 	bl	8003f08 <__assert_func>
 8003e76:	e9c0 4400 	strd	r4, r4, [r0]
 8003e7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003e7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003e82:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003e86:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003e8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003e8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003e92:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003e96:	6184      	str	r4, [r0, #24]
 8003e98:	7704      	strb	r4, [r0, #28]
 8003e9a:	6244      	str	r4, [r0, #36]	; 0x24
 8003e9c:	4631      	mov	r1, r6
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea8:	f000 b806 	b.w	8003eb8 <__strtok_r>
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	08005fb0 	.word	0x08005fb0
 8003eb4:	08005fc7 	.word	0x08005fc7

08003eb8 <__strtok_r>:
 8003eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eba:	b908      	cbnz	r0, 8003ec0 <__strtok_r+0x8>
 8003ebc:	6810      	ldr	r0, [r2, #0]
 8003ebe:	b188      	cbz	r0, 8003ee4 <__strtok_r+0x2c>
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003eca:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ece:	b91e      	cbnz	r6, 8003ed8 <__strtok_r+0x20>
 8003ed0:	b965      	cbnz	r5, 8003eec <__strtok_r+0x34>
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	6015      	str	r5, [r2, #0]
 8003ed6:	e005      	b.n	8003ee4 <__strtok_r+0x2c>
 8003ed8:	42b5      	cmp	r5, r6
 8003eda:	d1f6      	bne.n	8003eca <__strtok_r+0x12>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1f0      	bne.n	8003ec2 <__strtok_r+0xa>
 8003ee0:	6014      	str	r4, [r2, #0]
 8003ee2:	7003      	strb	r3, [r0, #0]
 8003ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	e00c      	b.n	8003f04 <__strtok_r+0x4c>
 8003eea:	b915      	cbnz	r5, 8003ef2 <__strtok_r+0x3a>
 8003eec:	460e      	mov	r6, r1
 8003eee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ef2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003ef6:	42ab      	cmp	r3, r5
 8003ef8:	d1f7      	bne.n	8003eea <__strtok_r+0x32>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f3      	beq.n	8003ee6 <__strtok_r+0x2e>
 8003efe:	2300      	movs	r3, #0
 8003f00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f04:	6014      	str	r4, [r2, #0]
 8003f06:	e7ed      	b.n	8003ee4 <__strtok_r+0x2c>

08003f08 <__assert_func>:
 8003f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <__assert_func+0x2c>)
 8003f10:	4605      	mov	r5, r0
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68d8      	ldr	r0, [r3, #12]
 8003f16:	b14c      	cbz	r4, 8003f2c <__assert_func+0x24>
 8003f18:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <__assert_func+0x30>)
 8003f1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003f1e:	9100      	str	r1, [sp, #0]
 8003f20:	462b      	mov	r3, r5
 8003f22:	4906      	ldr	r1, [pc, #24]	; (8003f3c <__assert_func+0x34>)
 8003f24:	f000 f80e 	bl	8003f44 <fiprintf>
 8003f28:	f001 fc4a 	bl	80057c0 <abort>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__assert_func+0x38>)
 8003f2e:	461c      	mov	r4, r3
 8003f30:	e7f3      	b.n	8003f1a <__assert_func+0x12>
 8003f32:	bf00      	nop
 8003f34:	2000000c 	.word	0x2000000c
 8003f38:	08006028 	.word	0x08006028
 8003f3c:	08006035 	.word	0x08006035
 8003f40:	08006063 	.word	0x08006063

08003f44 <fiprintf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	b503      	push	{r0, r1, lr}
 8003f48:	4601      	mov	r1, r0
 8003f4a:	ab03      	add	r3, sp, #12
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <fiprintf+0x20>)
 8003f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f52:	6800      	ldr	r0, [r0, #0]
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	f001 f887 	bl	8005068 <_vfiprintf_r>
 8003f5a:	b002      	add	sp, #8
 8003f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f60:	b003      	add	sp, #12
 8003f62:	4770      	bx	lr
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <rshift>:
 8003f68:	6903      	ldr	r3, [r0, #16]
 8003f6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8003f72:	f100 0414 	add.w	r4, r0, #20
 8003f76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8003f7a:	dd46      	ble.n	800400a <rshift+0xa2>
 8003f7c:	f011 011f 	ands.w	r1, r1, #31
 8003f80:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8003f84:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8003f88:	d10c      	bne.n	8003fa4 <rshift+0x3c>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f100 0710 	add.w	r7, r0, #16
 8003f90:	42b1      	cmp	r1, r6
 8003f92:	d335      	bcc.n	8004000 <rshift+0x98>
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	1eea      	subs	r2, r5, #3
 8003f9a:	4296      	cmp	r6, r2
 8003f9c:	bf38      	it	cc
 8003f9e:	2300      	movcc	r3, #0
 8003fa0:	4423      	add	r3, r4
 8003fa2:	e015      	b.n	8003fd0 <rshift+0x68>
 8003fa4:	46a1      	mov	r9, r4
 8003fa6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8003faa:	f1c1 0820 	rsb	r8, r1, #32
 8003fae:	40cf      	lsrs	r7, r1
 8003fb0:	f105 0e04 	add.w	lr, r5, #4
 8003fb4:	4576      	cmp	r6, lr
 8003fb6:	46f4      	mov	ip, lr
 8003fb8:	d816      	bhi.n	8003fe8 <rshift+0x80>
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009a      	lsls	r2, r3, #2
 8003fbe:	3a04      	subs	r2, #4
 8003fc0:	3501      	adds	r5, #1
 8003fc2:	42ae      	cmp	r6, r5
 8003fc4:	bf38      	it	cc
 8003fc6:	2200      	movcc	r2, #0
 8003fc8:	18a3      	adds	r3, r4, r2
 8003fca:	50a7      	str	r7, [r4, r2]
 8003fcc:	b107      	cbz	r7, 8003fd0 <rshift+0x68>
 8003fce:	3304      	adds	r3, #4
 8003fd0:	42a3      	cmp	r3, r4
 8003fd2:	eba3 0204 	sub.w	r2, r3, r4
 8003fd6:	bf08      	it	eq
 8003fd8:	2300      	moveq	r3, #0
 8003fda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003fde:	6102      	str	r2, [r0, #16]
 8003fe0:	bf08      	it	eq
 8003fe2:	6143      	streq	r3, [r0, #20]
 8003fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fe8:	f8dc c000 	ldr.w	ip, [ip]
 8003fec:	fa0c fc08 	lsl.w	ip, ip, r8
 8003ff0:	ea4c 0707 	orr.w	r7, ip, r7
 8003ff4:	f849 7b04 	str.w	r7, [r9], #4
 8003ff8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003ffc:	40cf      	lsrs	r7, r1
 8003ffe:	e7d9      	b.n	8003fb4 <rshift+0x4c>
 8004000:	f851 cb04 	ldr.w	ip, [r1], #4
 8004004:	f847 cf04 	str.w	ip, [r7, #4]!
 8004008:	e7c2      	b.n	8003f90 <rshift+0x28>
 800400a:	4623      	mov	r3, r4
 800400c:	e7e0      	b.n	8003fd0 <rshift+0x68>

0800400e <__hexdig_fun>:
 800400e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004012:	2b09      	cmp	r3, #9
 8004014:	d802      	bhi.n	800401c <__hexdig_fun+0xe>
 8004016:	3820      	subs	r0, #32
 8004018:	b2c0      	uxtb	r0, r0
 800401a:	4770      	bx	lr
 800401c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004020:	2b05      	cmp	r3, #5
 8004022:	d801      	bhi.n	8004028 <__hexdig_fun+0x1a>
 8004024:	3847      	subs	r0, #71	; 0x47
 8004026:	e7f7      	b.n	8004018 <__hexdig_fun+0xa>
 8004028:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800402c:	2b05      	cmp	r3, #5
 800402e:	d801      	bhi.n	8004034 <__hexdig_fun+0x26>
 8004030:	3827      	subs	r0, #39	; 0x27
 8004032:	e7f1      	b.n	8004018 <__hexdig_fun+0xa>
 8004034:	2000      	movs	r0, #0
 8004036:	4770      	bx	lr

08004038 <__gethex>:
 8004038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800403c:	b08b      	sub	sp, #44	; 0x2c
 800403e:	9306      	str	r3, [sp, #24]
 8004040:	4bb9      	ldr	r3, [pc, #740]	; (8004328 <__gethex+0x2f0>)
 8004042:	9002      	str	r0, [sp, #8]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	468b      	mov	fp, r1
 8004048:	4618      	mov	r0, r3
 800404a:	4690      	mov	r8, r2
 800404c:	9303      	str	r3, [sp, #12]
 800404e:	f7fc f87f 	bl	8000150 <strlen>
 8004052:	4682      	mov	sl, r0
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	f8db 2000 	ldr.w	r2, [fp]
 800405a:	4403      	add	r3, r0
 800405c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004060:	9307      	str	r3, [sp, #28]
 8004062:	1c93      	adds	r3, r2, #2
 8004064:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004068:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800406c:	32fe      	adds	r2, #254	; 0xfe
 800406e:	18d1      	adds	r1, r2, r3
 8004070:	461f      	mov	r7, r3
 8004072:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004076:	9101      	str	r1, [sp, #4]
 8004078:	2830      	cmp	r0, #48	; 0x30
 800407a:	d0f8      	beq.n	800406e <__gethex+0x36>
 800407c:	f7ff ffc7 	bl	800400e <__hexdig_fun>
 8004080:	4604      	mov	r4, r0
 8004082:	2800      	cmp	r0, #0
 8004084:	d13a      	bne.n	80040fc <__gethex+0xc4>
 8004086:	4652      	mov	r2, sl
 8004088:	4638      	mov	r0, r7
 800408a:	9903      	ldr	r1, [sp, #12]
 800408c:	f001 fab8 	bl	8005600 <strncmp>
 8004090:	4605      	mov	r5, r0
 8004092:	2800      	cmp	r0, #0
 8004094:	d166      	bne.n	8004164 <__gethex+0x12c>
 8004096:	f817 000a 	ldrb.w	r0, [r7, sl]
 800409a:	eb07 060a 	add.w	r6, r7, sl
 800409e:	f7ff ffb6 	bl	800400e <__hexdig_fun>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d060      	beq.n	8004168 <__gethex+0x130>
 80040a6:	4633      	mov	r3, r6
 80040a8:	7818      	ldrb	r0, [r3, #0]
 80040aa:	461f      	mov	r7, r3
 80040ac:	2830      	cmp	r0, #48	; 0x30
 80040ae:	f103 0301 	add.w	r3, r3, #1
 80040b2:	d0f9      	beq.n	80040a8 <__gethex+0x70>
 80040b4:	f7ff ffab 	bl	800400e <__hexdig_fun>
 80040b8:	2301      	movs	r3, #1
 80040ba:	fab0 f480 	clz	r4, r0
 80040be:	4635      	mov	r5, r6
 80040c0:	0964      	lsrs	r4, r4, #5
 80040c2:	9301      	str	r3, [sp, #4]
 80040c4:	463a      	mov	r2, r7
 80040c6:	4616      	mov	r6, r2
 80040c8:	7830      	ldrb	r0, [r6, #0]
 80040ca:	3201      	adds	r2, #1
 80040cc:	f7ff ff9f 	bl	800400e <__hexdig_fun>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d1f8      	bne.n	80040c6 <__gethex+0x8e>
 80040d4:	4652      	mov	r2, sl
 80040d6:	4630      	mov	r0, r6
 80040d8:	9903      	ldr	r1, [sp, #12]
 80040da:	f001 fa91 	bl	8005600 <strncmp>
 80040de:	b980      	cbnz	r0, 8004102 <__gethex+0xca>
 80040e0:	b94d      	cbnz	r5, 80040f6 <__gethex+0xbe>
 80040e2:	eb06 050a 	add.w	r5, r6, sl
 80040e6:	462a      	mov	r2, r5
 80040e8:	4616      	mov	r6, r2
 80040ea:	7830      	ldrb	r0, [r6, #0]
 80040ec:	3201      	adds	r2, #1
 80040ee:	f7ff ff8e 	bl	800400e <__hexdig_fun>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d1f8      	bne.n	80040e8 <__gethex+0xb0>
 80040f6:	1bad      	subs	r5, r5, r6
 80040f8:	00ad      	lsls	r5, r5, #2
 80040fa:	e004      	b.n	8004106 <__gethex+0xce>
 80040fc:	2400      	movs	r4, #0
 80040fe:	4625      	mov	r5, r4
 8004100:	e7e0      	b.n	80040c4 <__gethex+0x8c>
 8004102:	2d00      	cmp	r5, #0
 8004104:	d1f7      	bne.n	80040f6 <__gethex+0xbe>
 8004106:	7833      	ldrb	r3, [r6, #0]
 8004108:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800410c:	2b50      	cmp	r3, #80	; 0x50
 800410e:	d139      	bne.n	8004184 <__gethex+0x14c>
 8004110:	7873      	ldrb	r3, [r6, #1]
 8004112:	2b2b      	cmp	r3, #43	; 0x2b
 8004114:	d02a      	beq.n	800416c <__gethex+0x134>
 8004116:	2b2d      	cmp	r3, #45	; 0x2d
 8004118:	d02c      	beq.n	8004174 <__gethex+0x13c>
 800411a:	f04f 0900 	mov.w	r9, #0
 800411e:	1c71      	adds	r1, r6, #1
 8004120:	7808      	ldrb	r0, [r1, #0]
 8004122:	f7ff ff74 	bl	800400e <__hexdig_fun>
 8004126:	1e43      	subs	r3, r0, #1
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b18      	cmp	r3, #24
 800412c:	d82a      	bhi.n	8004184 <__gethex+0x14c>
 800412e:	f1a0 0210 	sub.w	r2, r0, #16
 8004132:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004136:	f7ff ff6a 	bl	800400e <__hexdig_fun>
 800413a:	1e43      	subs	r3, r0, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b18      	cmp	r3, #24
 8004140:	d91b      	bls.n	800417a <__gethex+0x142>
 8004142:	f1b9 0f00 	cmp.w	r9, #0
 8004146:	d000      	beq.n	800414a <__gethex+0x112>
 8004148:	4252      	negs	r2, r2
 800414a:	4415      	add	r5, r2
 800414c:	f8cb 1000 	str.w	r1, [fp]
 8004150:	b1d4      	cbz	r4, 8004188 <__gethex+0x150>
 8004152:	9b01      	ldr	r3, [sp, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2700      	movne	r7, #0
 800415a:	2706      	moveq	r7, #6
 800415c:	4638      	mov	r0, r7
 800415e:	b00b      	add	sp, #44	; 0x2c
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	463e      	mov	r6, r7
 8004166:	4625      	mov	r5, r4
 8004168:	2401      	movs	r4, #1
 800416a:	e7cc      	b.n	8004106 <__gethex+0xce>
 800416c:	f04f 0900 	mov.w	r9, #0
 8004170:	1cb1      	adds	r1, r6, #2
 8004172:	e7d5      	b.n	8004120 <__gethex+0xe8>
 8004174:	f04f 0901 	mov.w	r9, #1
 8004178:	e7fa      	b.n	8004170 <__gethex+0x138>
 800417a:	230a      	movs	r3, #10
 800417c:	fb03 0202 	mla	r2, r3, r2, r0
 8004180:	3a10      	subs	r2, #16
 8004182:	e7d6      	b.n	8004132 <__gethex+0xfa>
 8004184:	4631      	mov	r1, r6
 8004186:	e7e1      	b.n	800414c <__gethex+0x114>
 8004188:	4621      	mov	r1, r4
 800418a:	1bf3      	subs	r3, r6, r7
 800418c:	3b01      	subs	r3, #1
 800418e:	2b07      	cmp	r3, #7
 8004190:	dc0a      	bgt.n	80041a8 <__gethex+0x170>
 8004192:	9802      	ldr	r0, [sp, #8]
 8004194:	f000 fa7a 	bl	800468c <_Balloc>
 8004198:	4604      	mov	r4, r0
 800419a:	b940      	cbnz	r0, 80041ae <__gethex+0x176>
 800419c:	4602      	mov	r2, r0
 800419e:	21de      	movs	r1, #222	; 0xde
 80041a0:	4b62      	ldr	r3, [pc, #392]	; (800432c <__gethex+0x2f4>)
 80041a2:	4863      	ldr	r0, [pc, #396]	; (8004330 <__gethex+0x2f8>)
 80041a4:	f7ff feb0 	bl	8003f08 <__assert_func>
 80041a8:	3101      	adds	r1, #1
 80041aa:	105b      	asrs	r3, r3, #1
 80041ac:	e7ef      	b.n	800418e <__gethex+0x156>
 80041ae:	f04f 0b00 	mov.w	fp, #0
 80041b2:	f100 0914 	add.w	r9, r0, #20
 80041b6:	f1ca 0301 	rsb	r3, sl, #1
 80041ba:	f8cd 9010 	str.w	r9, [sp, #16]
 80041be:	f8cd b004 	str.w	fp, [sp, #4]
 80041c2:	9308      	str	r3, [sp, #32]
 80041c4:	42b7      	cmp	r7, r6
 80041c6:	d33f      	bcc.n	8004248 <__gethex+0x210>
 80041c8:	9f04      	ldr	r7, [sp, #16]
 80041ca:	9b01      	ldr	r3, [sp, #4]
 80041cc:	f847 3b04 	str.w	r3, [r7], #4
 80041d0:	eba7 0709 	sub.w	r7, r7, r9
 80041d4:	10bf      	asrs	r7, r7, #2
 80041d6:	6127      	str	r7, [r4, #16]
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fb4d 	bl	8004878 <__hi0bits>
 80041de:	017f      	lsls	r7, r7, #5
 80041e0:	f8d8 6000 	ldr.w	r6, [r8]
 80041e4:	1a3f      	subs	r7, r7, r0
 80041e6:	42b7      	cmp	r7, r6
 80041e8:	dd62      	ble.n	80042b0 <__gethex+0x278>
 80041ea:	1bbf      	subs	r7, r7, r6
 80041ec:	4639      	mov	r1, r7
 80041ee:	4620      	mov	r0, r4
 80041f0:	f000 fee3 	bl	8004fba <__any_on>
 80041f4:	4682      	mov	sl, r0
 80041f6:	b1a8      	cbz	r0, 8004224 <__gethex+0x1ec>
 80041f8:	f04f 0a01 	mov.w	sl, #1
 80041fc:	1e7b      	subs	r3, r7, #1
 80041fe:	1159      	asrs	r1, r3, #5
 8004200:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004204:	f003 021f 	and.w	r2, r3, #31
 8004208:	fa0a f202 	lsl.w	r2, sl, r2
 800420c:	420a      	tst	r2, r1
 800420e:	d009      	beq.n	8004224 <__gethex+0x1ec>
 8004210:	4553      	cmp	r3, sl
 8004212:	dd05      	ble.n	8004220 <__gethex+0x1e8>
 8004214:	4620      	mov	r0, r4
 8004216:	1eb9      	subs	r1, r7, #2
 8004218:	f000 fecf 	bl	8004fba <__any_on>
 800421c:	2800      	cmp	r0, #0
 800421e:	d144      	bne.n	80042aa <__gethex+0x272>
 8004220:	f04f 0a02 	mov.w	sl, #2
 8004224:	4639      	mov	r1, r7
 8004226:	4620      	mov	r0, r4
 8004228:	f7ff fe9e 	bl	8003f68 <rshift>
 800422c:	443d      	add	r5, r7
 800422e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004232:	42ab      	cmp	r3, r5
 8004234:	da4a      	bge.n	80042cc <__gethex+0x294>
 8004236:	4621      	mov	r1, r4
 8004238:	9802      	ldr	r0, [sp, #8]
 800423a:	f000 fa67 	bl	800470c <_Bfree>
 800423e:	2300      	movs	r3, #0
 8004240:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004242:	27a3      	movs	r7, #163	; 0xa3
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e789      	b.n	800415c <__gethex+0x124>
 8004248:	1e73      	subs	r3, r6, #1
 800424a:	9a07      	ldr	r2, [sp, #28]
 800424c:	9305      	str	r3, [sp, #20]
 800424e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004252:	4293      	cmp	r3, r2
 8004254:	d019      	beq.n	800428a <__gethex+0x252>
 8004256:	f1bb 0f20 	cmp.w	fp, #32
 800425a:	d107      	bne.n	800426c <__gethex+0x234>
 800425c:	9b04      	ldr	r3, [sp, #16]
 800425e:	9a01      	ldr	r2, [sp, #4]
 8004260:	f843 2b04 	str.w	r2, [r3], #4
 8004264:	9304      	str	r3, [sp, #16]
 8004266:	2300      	movs	r3, #0
 8004268:	469b      	mov	fp, r3
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004270:	f7ff fecd 	bl	800400e <__hexdig_fun>
 8004274:	9b01      	ldr	r3, [sp, #4]
 8004276:	f000 000f 	and.w	r0, r0, #15
 800427a:	fa00 f00b 	lsl.w	r0, r0, fp
 800427e:	4303      	orrs	r3, r0
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	f10b 0b04 	add.w	fp, fp, #4
 8004286:	9b05      	ldr	r3, [sp, #20]
 8004288:	e00d      	b.n	80042a6 <__gethex+0x26e>
 800428a:	9b05      	ldr	r3, [sp, #20]
 800428c:	9a08      	ldr	r2, [sp, #32]
 800428e:	4413      	add	r3, r2
 8004290:	42bb      	cmp	r3, r7
 8004292:	d3e0      	bcc.n	8004256 <__gethex+0x21e>
 8004294:	4618      	mov	r0, r3
 8004296:	4652      	mov	r2, sl
 8004298:	9903      	ldr	r1, [sp, #12]
 800429a:	9309      	str	r3, [sp, #36]	; 0x24
 800429c:	f001 f9b0 	bl	8005600 <strncmp>
 80042a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d1d7      	bne.n	8004256 <__gethex+0x21e>
 80042a6:	461e      	mov	r6, r3
 80042a8:	e78c      	b.n	80041c4 <__gethex+0x18c>
 80042aa:	f04f 0a03 	mov.w	sl, #3
 80042ae:	e7b9      	b.n	8004224 <__gethex+0x1ec>
 80042b0:	da09      	bge.n	80042c6 <__gethex+0x28e>
 80042b2:	1bf7      	subs	r7, r6, r7
 80042b4:	4621      	mov	r1, r4
 80042b6:	463a      	mov	r2, r7
 80042b8:	9802      	ldr	r0, [sp, #8]
 80042ba:	f000 fc3f 	bl	8004b3c <__lshift>
 80042be:	4604      	mov	r4, r0
 80042c0:	1bed      	subs	r5, r5, r7
 80042c2:	f100 0914 	add.w	r9, r0, #20
 80042c6:	f04f 0a00 	mov.w	sl, #0
 80042ca:	e7b0      	b.n	800422e <__gethex+0x1f6>
 80042cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80042d0:	42a8      	cmp	r0, r5
 80042d2:	dd71      	ble.n	80043b8 <__gethex+0x380>
 80042d4:	1b45      	subs	r5, r0, r5
 80042d6:	42ae      	cmp	r6, r5
 80042d8:	dc34      	bgt.n	8004344 <__gethex+0x30c>
 80042da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d028      	beq.n	8004334 <__gethex+0x2fc>
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d02a      	beq.n	800433c <__gethex+0x304>
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d115      	bne.n	8004316 <__gethex+0x2de>
 80042ea:	42ae      	cmp	r6, r5
 80042ec:	d113      	bne.n	8004316 <__gethex+0x2de>
 80042ee:	2e01      	cmp	r6, #1
 80042f0:	d10b      	bne.n	800430a <__gethex+0x2d2>
 80042f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80042f6:	9a06      	ldr	r2, [sp, #24]
 80042f8:	2762      	movs	r7, #98	; 0x62
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	2301      	movs	r3, #1
 80042fe:	6123      	str	r3, [r4, #16]
 8004300:	f8c9 3000 	str.w	r3, [r9]
 8004304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004306:	601c      	str	r4, [r3, #0]
 8004308:	e728      	b.n	800415c <__gethex+0x124>
 800430a:	4620      	mov	r0, r4
 800430c:	1e71      	subs	r1, r6, #1
 800430e:	f000 fe54 	bl	8004fba <__any_on>
 8004312:	2800      	cmp	r0, #0
 8004314:	d1ed      	bne.n	80042f2 <__gethex+0x2ba>
 8004316:	4621      	mov	r1, r4
 8004318:	9802      	ldr	r0, [sp, #8]
 800431a:	f000 f9f7 	bl	800470c <_Bfree>
 800431e:	2300      	movs	r3, #0
 8004320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004322:	2750      	movs	r7, #80	; 0x50
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e719      	b.n	800415c <__gethex+0x124>
 8004328:	080060e0 	.word	0x080060e0
 800432c:	08006064 	.word	0x08006064
 8004330:	08006075 	.word	0x08006075
 8004334:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ed      	bne.n	8004316 <__gethex+0x2de>
 800433a:	e7da      	b.n	80042f2 <__gethex+0x2ba>
 800433c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1d7      	bne.n	80042f2 <__gethex+0x2ba>
 8004342:	e7e8      	b.n	8004316 <__gethex+0x2de>
 8004344:	1e6f      	subs	r7, r5, #1
 8004346:	f1ba 0f00 	cmp.w	sl, #0
 800434a:	d132      	bne.n	80043b2 <__gethex+0x37a>
 800434c:	b127      	cbz	r7, 8004358 <__gethex+0x320>
 800434e:	4639      	mov	r1, r7
 8004350:	4620      	mov	r0, r4
 8004352:	f000 fe32 	bl	8004fba <__any_on>
 8004356:	4682      	mov	sl, r0
 8004358:	2101      	movs	r1, #1
 800435a:	117b      	asrs	r3, r7, #5
 800435c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004360:	f007 071f 	and.w	r7, r7, #31
 8004364:	fa01 f707 	lsl.w	r7, r1, r7
 8004368:	421f      	tst	r7, r3
 800436a:	f04f 0702 	mov.w	r7, #2
 800436e:	4629      	mov	r1, r5
 8004370:	4620      	mov	r0, r4
 8004372:	bf18      	it	ne
 8004374:	f04a 0a02 	orrne.w	sl, sl, #2
 8004378:	1b76      	subs	r6, r6, r5
 800437a:	f7ff fdf5 	bl	8003f68 <rshift>
 800437e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8004382:	f1ba 0f00 	cmp.w	sl, #0
 8004386:	d048      	beq.n	800441a <__gethex+0x3e2>
 8004388:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d015      	beq.n	80043bc <__gethex+0x384>
 8004390:	2b03      	cmp	r3, #3
 8004392:	d017      	beq.n	80043c4 <__gethex+0x38c>
 8004394:	2b01      	cmp	r3, #1
 8004396:	d109      	bne.n	80043ac <__gethex+0x374>
 8004398:	f01a 0f02 	tst.w	sl, #2
 800439c:	d006      	beq.n	80043ac <__gethex+0x374>
 800439e:	f8d9 0000 	ldr.w	r0, [r9]
 80043a2:	ea4a 0a00 	orr.w	sl, sl, r0
 80043a6:	f01a 0f01 	tst.w	sl, #1
 80043aa:	d10e      	bne.n	80043ca <__gethex+0x392>
 80043ac:	f047 0710 	orr.w	r7, r7, #16
 80043b0:	e033      	b.n	800441a <__gethex+0x3e2>
 80043b2:	f04f 0a01 	mov.w	sl, #1
 80043b6:	e7cf      	b.n	8004358 <__gethex+0x320>
 80043b8:	2701      	movs	r7, #1
 80043ba:	e7e2      	b.n	8004382 <__gethex+0x34a>
 80043bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043be:	f1c3 0301 	rsb	r3, r3, #1
 80043c2:	9315      	str	r3, [sp, #84]	; 0x54
 80043c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <__gethex+0x374>
 80043ca:	f04f 0c00 	mov.w	ip, #0
 80043ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80043d2:	f104 0314 	add.w	r3, r4, #20
 80043d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80043da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80043e8:	d01c      	beq.n	8004424 <__gethex+0x3ec>
 80043ea:	3201      	adds	r2, #1
 80043ec:	6002      	str	r2, [r0, #0]
 80043ee:	2f02      	cmp	r7, #2
 80043f0:	f104 0314 	add.w	r3, r4, #20
 80043f4:	d13d      	bne.n	8004472 <__gethex+0x43a>
 80043f6:	f8d8 2000 	ldr.w	r2, [r8]
 80043fa:	3a01      	subs	r2, #1
 80043fc:	42b2      	cmp	r2, r6
 80043fe:	d10a      	bne.n	8004416 <__gethex+0x3de>
 8004400:	2201      	movs	r2, #1
 8004402:	1171      	asrs	r1, r6, #5
 8004404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004408:	f006 061f 	and.w	r6, r6, #31
 800440c:	fa02 f606 	lsl.w	r6, r2, r6
 8004410:	421e      	tst	r6, r3
 8004412:	bf18      	it	ne
 8004414:	4617      	movne	r7, r2
 8004416:	f047 0720 	orr.w	r7, r7, #32
 800441a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800441c:	601c      	str	r4, [r3, #0]
 800441e:	9b06      	ldr	r3, [sp, #24]
 8004420:	601d      	str	r5, [r3, #0]
 8004422:	e69b      	b.n	800415c <__gethex+0x124>
 8004424:	4299      	cmp	r1, r3
 8004426:	f843 cc04 	str.w	ip, [r3, #-4]
 800442a:	d8d8      	bhi.n	80043de <__gethex+0x3a6>
 800442c:	68a3      	ldr	r3, [r4, #8]
 800442e:	459b      	cmp	fp, r3
 8004430:	db17      	blt.n	8004462 <__gethex+0x42a>
 8004432:	6861      	ldr	r1, [r4, #4]
 8004434:	9802      	ldr	r0, [sp, #8]
 8004436:	3101      	adds	r1, #1
 8004438:	f000 f928 	bl	800468c <_Balloc>
 800443c:	4681      	mov	r9, r0
 800443e:	b918      	cbnz	r0, 8004448 <__gethex+0x410>
 8004440:	4602      	mov	r2, r0
 8004442:	2184      	movs	r1, #132	; 0x84
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <__gethex+0x474>)
 8004446:	e6ac      	b.n	80041a2 <__gethex+0x16a>
 8004448:	6922      	ldr	r2, [r4, #16]
 800444a:	f104 010c 	add.w	r1, r4, #12
 800444e:	3202      	adds	r2, #2
 8004450:	0092      	lsls	r2, r2, #2
 8004452:	300c      	adds	r0, #12
 8004454:	f000 f900 	bl	8004658 <memcpy>
 8004458:	4621      	mov	r1, r4
 800445a:	9802      	ldr	r0, [sp, #8]
 800445c:	f000 f956 	bl	800470c <_Bfree>
 8004460:	464c      	mov	r4, r9
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	6122      	str	r2, [r4, #16]
 8004468:	2201      	movs	r2, #1
 800446a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800446e:	615a      	str	r2, [r3, #20]
 8004470:	e7bd      	b.n	80043ee <__gethex+0x3b6>
 8004472:	6922      	ldr	r2, [r4, #16]
 8004474:	455a      	cmp	r2, fp
 8004476:	dd0b      	ble.n	8004490 <__gethex+0x458>
 8004478:	2101      	movs	r1, #1
 800447a:	4620      	mov	r0, r4
 800447c:	f7ff fd74 	bl	8003f68 <rshift>
 8004480:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004484:	3501      	adds	r5, #1
 8004486:	42ab      	cmp	r3, r5
 8004488:	f6ff aed5 	blt.w	8004236 <__gethex+0x1fe>
 800448c:	2701      	movs	r7, #1
 800448e:	e7c2      	b.n	8004416 <__gethex+0x3de>
 8004490:	f016 061f 	ands.w	r6, r6, #31
 8004494:	d0fa      	beq.n	800448c <__gethex+0x454>
 8004496:	449a      	add	sl, r3
 8004498:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800449c:	f000 f9ec 	bl	8004878 <__hi0bits>
 80044a0:	f1c6 0620 	rsb	r6, r6, #32
 80044a4:	42b0      	cmp	r0, r6
 80044a6:	dbe7      	blt.n	8004478 <__gethex+0x440>
 80044a8:	e7f0      	b.n	800448c <__gethex+0x454>
 80044aa:	bf00      	nop
 80044ac:	08006064 	.word	0x08006064

080044b0 <L_shift>:
 80044b0:	f1c2 0208 	rsb	r2, r2, #8
 80044b4:	0092      	lsls	r2, r2, #2
 80044b6:	b570      	push	{r4, r5, r6, lr}
 80044b8:	f1c2 0620 	rsb	r6, r2, #32
 80044bc:	6843      	ldr	r3, [r0, #4]
 80044be:	6804      	ldr	r4, [r0, #0]
 80044c0:	fa03 f506 	lsl.w	r5, r3, r6
 80044c4:	432c      	orrs	r4, r5
 80044c6:	40d3      	lsrs	r3, r2
 80044c8:	6004      	str	r4, [r0, #0]
 80044ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80044ce:	4288      	cmp	r0, r1
 80044d0:	d3f4      	bcc.n	80044bc <L_shift+0xc>
 80044d2:	bd70      	pop	{r4, r5, r6, pc}

080044d4 <__match>:
 80044d4:	b530      	push	{r4, r5, lr}
 80044d6:	6803      	ldr	r3, [r0, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044de:	b914      	cbnz	r4, 80044e6 <__match+0x12>
 80044e0:	6003      	str	r3, [r0, #0]
 80044e2:	2001      	movs	r0, #1
 80044e4:	bd30      	pop	{r4, r5, pc}
 80044e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80044ee:	2d19      	cmp	r5, #25
 80044f0:	bf98      	it	ls
 80044f2:	3220      	addls	r2, #32
 80044f4:	42a2      	cmp	r2, r4
 80044f6:	d0f0      	beq.n	80044da <__match+0x6>
 80044f8:	2000      	movs	r0, #0
 80044fa:	e7f3      	b.n	80044e4 <__match+0x10>

080044fc <__hexnan>:
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004500:	2500      	movs	r5, #0
 8004502:	680b      	ldr	r3, [r1, #0]
 8004504:	4682      	mov	sl, r0
 8004506:	115e      	asrs	r6, r3, #5
 8004508:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800450c:	f013 031f 	ands.w	r3, r3, #31
 8004510:	bf18      	it	ne
 8004512:	3604      	addne	r6, #4
 8004514:	1f37      	subs	r7, r6, #4
 8004516:	4690      	mov	r8, r2
 8004518:	46b9      	mov	r9, r7
 800451a:	463c      	mov	r4, r7
 800451c:	46ab      	mov	fp, r5
 800451e:	b087      	sub	sp, #28
 8004520:	6801      	ldr	r1, [r0, #0]
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	f846 5c04 	str.w	r5, [r6, #-4]
 8004528:	9502      	str	r5, [sp, #8]
 800452a:	784a      	ldrb	r2, [r1, #1]
 800452c:	1c4b      	adds	r3, r1, #1
 800452e:	9303      	str	r3, [sp, #12]
 8004530:	b342      	cbz	r2, 8004584 <__hexnan+0x88>
 8004532:	4610      	mov	r0, r2
 8004534:	9105      	str	r1, [sp, #20]
 8004536:	9204      	str	r2, [sp, #16]
 8004538:	f7ff fd69 	bl	800400e <__hexdig_fun>
 800453c:	2800      	cmp	r0, #0
 800453e:	d14f      	bne.n	80045e0 <__hexnan+0xe4>
 8004540:	9a04      	ldr	r2, [sp, #16]
 8004542:	9905      	ldr	r1, [sp, #20]
 8004544:	2a20      	cmp	r2, #32
 8004546:	d818      	bhi.n	800457a <__hexnan+0x7e>
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	459b      	cmp	fp, r3
 800454c:	dd13      	ble.n	8004576 <__hexnan+0x7a>
 800454e:	454c      	cmp	r4, r9
 8004550:	d206      	bcs.n	8004560 <__hexnan+0x64>
 8004552:	2d07      	cmp	r5, #7
 8004554:	dc04      	bgt.n	8004560 <__hexnan+0x64>
 8004556:	462a      	mov	r2, r5
 8004558:	4649      	mov	r1, r9
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff ffa8 	bl	80044b0 <L_shift>
 8004560:	4544      	cmp	r4, r8
 8004562:	d950      	bls.n	8004606 <__hexnan+0x10a>
 8004564:	2300      	movs	r3, #0
 8004566:	f1a4 0904 	sub.w	r9, r4, #4
 800456a:	f844 3c04 	str.w	r3, [r4, #-4]
 800456e:	461d      	mov	r5, r3
 8004570:	464c      	mov	r4, r9
 8004572:	f8cd b008 	str.w	fp, [sp, #8]
 8004576:	9903      	ldr	r1, [sp, #12]
 8004578:	e7d7      	b.n	800452a <__hexnan+0x2e>
 800457a:	2a29      	cmp	r2, #41	; 0x29
 800457c:	d156      	bne.n	800462c <__hexnan+0x130>
 800457e:	3102      	adds	r1, #2
 8004580:	f8ca 1000 	str.w	r1, [sl]
 8004584:	f1bb 0f00 	cmp.w	fp, #0
 8004588:	d050      	beq.n	800462c <__hexnan+0x130>
 800458a:	454c      	cmp	r4, r9
 800458c:	d206      	bcs.n	800459c <__hexnan+0xa0>
 800458e:	2d07      	cmp	r5, #7
 8004590:	dc04      	bgt.n	800459c <__hexnan+0xa0>
 8004592:	462a      	mov	r2, r5
 8004594:	4649      	mov	r1, r9
 8004596:	4620      	mov	r0, r4
 8004598:	f7ff ff8a 	bl	80044b0 <L_shift>
 800459c:	4544      	cmp	r4, r8
 800459e:	d934      	bls.n	800460a <__hexnan+0x10e>
 80045a0:	4623      	mov	r3, r4
 80045a2:	f1a8 0204 	sub.w	r2, r8, #4
 80045a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80045aa:	429f      	cmp	r7, r3
 80045ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80045b0:	d2f9      	bcs.n	80045a6 <__hexnan+0xaa>
 80045b2:	1b3b      	subs	r3, r7, r4
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	3304      	adds	r3, #4
 80045ba:	3401      	adds	r4, #1
 80045bc:	3e03      	subs	r6, #3
 80045be:	42b4      	cmp	r4, r6
 80045c0:	bf88      	it	hi
 80045c2:	2304      	movhi	r3, #4
 80045c4:	2200      	movs	r2, #0
 80045c6:	4443      	add	r3, r8
 80045c8:	f843 2b04 	str.w	r2, [r3], #4
 80045cc:	429f      	cmp	r7, r3
 80045ce:	d2fb      	bcs.n	80045c8 <__hexnan+0xcc>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	b91b      	cbnz	r3, 80045dc <__hexnan+0xe0>
 80045d4:	4547      	cmp	r7, r8
 80045d6:	d127      	bne.n	8004628 <__hexnan+0x12c>
 80045d8:	2301      	movs	r3, #1
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	2005      	movs	r0, #5
 80045de:	e026      	b.n	800462e <__hexnan+0x132>
 80045e0:	3501      	adds	r5, #1
 80045e2:	2d08      	cmp	r5, #8
 80045e4:	f10b 0b01 	add.w	fp, fp, #1
 80045e8:	dd06      	ble.n	80045f8 <__hexnan+0xfc>
 80045ea:	4544      	cmp	r4, r8
 80045ec:	d9c3      	bls.n	8004576 <__hexnan+0x7a>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2501      	movs	r5, #1
 80045f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80045f6:	3c04      	subs	r4, #4
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	f000 000f 	and.w	r0, r0, #15
 80045fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004602:	6022      	str	r2, [r4, #0]
 8004604:	e7b7      	b.n	8004576 <__hexnan+0x7a>
 8004606:	2508      	movs	r5, #8
 8004608:	e7b5      	b.n	8004576 <__hexnan+0x7a>
 800460a:	9b01      	ldr	r3, [sp, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0df      	beq.n	80045d0 <__hexnan+0xd4>
 8004610:	f04f 32ff 	mov.w	r2, #4294967295
 8004614:	f1c3 0320 	rsb	r3, r3, #32
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004620:	401a      	ands	r2, r3
 8004622:	f846 2c04 	str.w	r2, [r6, #-4]
 8004626:	e7d3      	b.n	80045d0 <__hexnan+0xd4>
 8004628:	3f04      	subs	r7, #4
 800462a:	e7d1      	b.n	80045d0 <__hexnan+0xd4>
 800462c:	2004      	movs	r0, #4
 800462e:	b007      	add	sp, #28
 8004630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004634 <__ascii_mbtowc>:
 8004634:	b082      	sub	sp, #8
 8004636:	b901      	cbnz	r1, 800463a <__ascii_mbtowc+0x6>
 8004638:	a901      	add	r1, sp, #4
 800463a:	b142      	cbz	r2, 800464e <__ascii_mbtowc+0x1a>
 800463c:	b14b      	cbz	r3, 8004652 <__ascii_mbtowc+0x1e>
 800463e:	7813      	ldrb	r3, [r2, #0]
 8004640:	600b      	str	r3, [r1, #0]
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	1e10      	subs	r0, r2, #0
 8004646:	bf18      	it	ne
 8004648:	2001      	movne	r0, #1
 800464a:	b002      	add	sp, #8
 800464c:	4770      	bx	lr
 800464e:	4610      	mov	r0, r2
 8004650:	e7fb      	b.n	800464a <__ascii_mbtowc+0x16>
 8004652:	f06f 0001 	mvn.w	r0, #1
 8004656:	e7f8      	b.n	800464a <__ascii_mbtowc+0x16>

08004658 <memcpy>:
 8004658:	440a      	add	r2, r1
 800465a:	4291      	cmp	r1, r2
 800465c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004660:	d100      	bne.n	8004664 <memcpy+0xc>
 8004662:	4770      	bx	lr
 8004664:	b510      	push	{r4, lr}
 8004666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466a:	4291      	cmp	r1, r2
 800466c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004670:	d1f9      	bne.n	8004666 <memcpy+0xe>
 8004672:	bd10      	pop	{r4, pc}

08004674 <__malloc_lock>:
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <__malloc_lock+0x8>)
 8004676:	f001 ba63 	b.w	8005b40 <__retarget_lock_acquire_recursive>
 800467a:	bf00      	nop
 800467c:	200002f4 	.word	0x200002f4

08004680 <__malloc_unlock>:
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <__malloc_unlock+0x8>)
 8004682:	f001 ba5e 	b.w	8005b42 <__retarget_lock_release_recursive>
 8004686:	bf00      	nop
 8004688:	200002f4 	.word	0x200002f4

0800468c <_Balloc>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004690:	4604      	mov	r4, r0
 8004692:	460d      	mov	r5, r1
 8004694:	b976      	cbnz	r6, 80046b4 <_Balloc+0x28>
 8004696:	2010      	movs	r0, #16
 8004698:	f7fe fce2 	bl	8003060 <malloc>
 800469c:	4602      	mov	r2, r0
 800469e:	6260      	str	r0, [r4, #36]	; 0x24
 80046a0:	b920      	cbnz	r0, 80046ac <_Balloc+0x20>
 80046a2:	2166      	movs	r1, #102	; 0x66
 80046a4:	4b17      	ldr	r3, [pc, #92]	; (8004704 <_Balloc+0x78>)
 80046a6:	4818      	ldr	r0, [pc, #96]	; (8004708 <_Balloc+0x7c>)
 80046a8:	f7ff fc2e 	bl	8003f08 <__assert_func>
 80046ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046b0:	6006      	str	r6, [r0, #0]
 80046b2:	60c6      	str	r6, [r0, #12]
 80046b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046b6:	68f3      	ldr	r3, [r6, #12]
 80046b8:	b183      	cbz	r3, 80046dc <_Balloc+0x50>
 80046ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046c2:	b9b8      	cbnz	r0, 80046f4 <_Balloc+0x68>
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f605 	lsl.w	r6, r1, r5
 80046ca:	1d72      	adds	r2, r6, #5
 80046cc:	4620      	mov	r0, r4
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	f000 fc94 	bl	8004ffc <_calloc_r>
 80046d4:	b160      	cbz	r0, 80046f0 <_Balloc+0x64>
 80046d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80046da:	e00e      	b.n	80046fa <_Balloc+0x6e>
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	2104      	movs	r1, #4
 80046e0:	4620      	mov	r0, r4
 80046e2:	f000 fc8b 	bl	8004ffc <_calloc_r>
 80046e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046e8:	60f0      	str	r0, [r6, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e4      	bne.n	80046ba <_Balloc+0x2e>
 80046f0:	2000      	movs	r0, #0
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	6802      	ldr	r2, [r0, #0]
 80046f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80046fa:	2300      	movs	r3, #0
 80046fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004700:	e7f7      	b.n	80046f2 <_Balloc+0x66>
 8004702:	bf00      	nop
 8004704:	08005fb0 	.word	0x08005fb0
 8004708:	080060f4 	.word	0x080060f4

0800470c <_Bfree>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004710:	4605      	mov	r5, r0
 8004712:	460c      	mov	r4, r1
 8004714:	b976      	cbnz	r6, 8004734 <_Bfree+0x28>
 8004716:	2010      	movs	r0, #16
 8004718:	f7fe fca2 	bl	8003060 <malloc>
 800471c:	4602      	mov	r2, r0
 800471e:	6268      	str	r0, [r5, #36]	; 0x24
 8004720:	b920      	cbnz	r0, 800472c <_Bfree+0x20>
 8004722:	218a      	movs	r1, #138	; 0x8a
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <_Bfree+0x3c>)
 8004726:	4809      	ldr	r0, [pc, #36]	; (800474c <_Bfree+0x40>)
 8004728:	f7ff fbee 	bl	8003f08 <__assert_func>
 800472c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004730:	6006      	str	r6, [r0, #0]
 8004732:	60c6      	str	r6, [r0, #12]
 8004734:	b13c      	cbz	r4, 8004746 <_Bfree+0x3a>
 8004736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004740:	6021      	str	r1, [r4, #0]
 8004742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	08005fb0 	.word	0x08005fb0
 800474c:	080060f4 	.word	0x080060f4

08004750 <__multadd>:
 8004750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004754:	4698      	mov	r8, r3
 8004756:	460c      	mov	r4, r1
 8004758:	2300      	movs	r3, #0
 800475a:	690e      	ldr	r6, [r1, #16]
 800475c:	4607      	mov	r7, r0
 800475e:	f101 0014 	add.w	r0, r1, #20
 8004762:	6805      	ldr	r5, [r0, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	b2a9      	uxth	r1, r5
 8004768:	fb02 8101 	mla	r1, r2, r1, r8
 800476c:	0c2d      	lsrs	r5, r5, #16
 800476e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004772:	fb02 c505 	mla	r5, r2, r5, ip
 8004776:	b289      	uxth	r1, r1
 8004778:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800477c:	429e      	cmp	r6, r3
 800477e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004782:	f840 1b04 	str.w	r1, [r0], #4
 8004786:	dcec      	bgt.n	8004762 <__multadd+0x12>
 8004788:	f1b8 0f00 	cmp.w	r8, #0
 800478c:	d022      	beq.n	80047d4 <__multadd+0x84>
 800478e:	68a3      	ldr	r3, [r4, #8]
 8004790:	42b3      	cmp	r3, r6
 8004792:	dc19      	bgt.n	80047c8 <__multadd+0x78>
 8004794:	6861      	ldr	r1, [r4, #4]
 8004796:	4638      	mov	r0, r7
 8004798:	3101      	adds	r1, #1
 800479a:	f7ff ff77 	bl	800468c <_Balloc>
 800479e:	4605      	mov	r5, r0
 80047a0:	b928      	cbnz	r0, 80047ae <__multadd+0x5e>
 80047a2:	4602      	mov	r2, r0
 80047a4:	21b5      	movs	r1, #181	; 0xb5
 80047a6:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <__multadd+0x8c>)
 80047a8:	480d      	ldr	r0, [pc, #52]	; (80047e0 <__multadd+0x90>)
 80047aa:	f7ff fbad 	bl	8003f08 <__assert_func>
 80047ae:	6922      	ldr	r2, [r4, #16]
 80047b0:	f104 010c 	add.w	r1, r4, #12
 80047b4:	3202      	adds	r2, #2
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	300c      	adds	r0, #12
 80047ba:	f7ff ff4d 	bl	8004658 <memcpy>
 80047be:	4621      	mov	r1, r4
 80047c0:	4638      	mov	r0, r7
 80047c2:	f7ff ffa3 	bl	800470c <_Bfree>
 80047c6:	462c      	mov	r4, r5
 80047c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80047cc:	3601      	adds	r6, #1
 80047ce:	f8c3 8014 	str.w	r8, [r3, #20]
 80047d2:	6126      	str	r6, [r4, #16]
 80047d4:	4620      	mov	r0, r4
 80047d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047da:	bf00      	nop
 80047dc:	08006064 	.word	0x08006064
 80047e0:	080060f4 	.word	0x080060f4

080047e4 <__s2b>:
 80047e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e8:	4615      	mov	r5, r2
 80047ea:	2209      	movs	r2, #9
 80047ec:	461f      	mov	r7, r3
 80047ee:	3308      	adds	r3, #8
 80047f0:	460c      	mov	r4, r1
 80047f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80047f6:	4606      	mov	r6, r0
 80047f8:	2201      	movs	r2, #1
 80047fa:	2100      	movs	r1, #0
 80047fc:	429a      	cmp	r2, r3
 80047fe:	db09      	blt.n	8004814 <__s2b+0x30>
 8004800:	4630      	mov	r0, r6
 8004802:	f7ff ff43 	bl	800468c <_Balloc>
 8004806:	b940      	cbnz	r0, 800481a <__s2b+0x36>
 8004808:	4602      	mov	r2, r0
 800480a:	21ce      	movs	r1, #206	; 0xce
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <__s2b+0x8c>)
 800480e:	4819      	ldr	r0, [pc, #100]	; (8004874 <__s2b+0x90>)
 8004810:	f7ff fb7a 	bl	8003f08 <__assert_func>
 8004814:	0052      	lsls	r2, r2, #1
 8004816:	3101      	adds	r1, #1
 8004818:	e7f0      	b.n	80047fc <__s2b+0x18>
 800481a:	9b08      	ldr	r3, [sp, #32]
 800481c:	2d09      	cmp	r5, #9
 800481e:	6143      	str	r3, [r0, #20]
 8004820:	f04f 0301 	mov.w	r3, #1
 8004824:	6103      	str	r3, [r0, #16]
 8004826:	dd16      	ble.n	8004856 <__s2b+0x72>
 8004828:	f104 0909 	add.w	r9, r4, #9
 800482c:	46c8      	mov	r8, r9
 800482e:	442c      	add	r4, r5
 8004830:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004834:	4601      	mov	r1, r0
 8004836:	220a      	movs	r2, #10
 8004838:	4630      	mov	r0, r6
 800483a:	3b30      	subs	r3, #48	; 0x30
 800483c:	f7ff ff88 	bl	8004750 <__multadd>
 8004840:	45a0      	cmp	r8, r4
 8004842:	d1f5      	bne.n	8004830 <__s2b+0x4c>
 8004844:	f1a5 0408 	sub.w	r4, r5, #8
 8004848:	444c      	add	r4, r9
 800484a:	1b2d      	subs	r5, r5, r4
 800484c:	1963      	adds	r3, r4, r5
 800484e:	42bb      	cmp	r3, r7
 8004850:	db04      	blt.n	800485c <__s2b+0x78>
 8004852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004856:	2509      	movs	r5, #9
 8004858:	340a      	adds	r4, #10
 800485a:	e7f6      	b.n	800484a <__s2b+0x66>
 800485c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004860:	4601      	mov	r1, r0
 8004862:	220a      	movs	r2, #10
 8004864:	4630      	mov	r0, r6
 8004866:	3b30      	subs	r3, #48	; 0x30
 8004868:	f7ff ff72 	bl	8004750 <__multadd>
 800486c:	e7ee      	b.n	800484c <__s2b+0x68>
 800486e:	bf00      	nop
 8004870:	08006064 	.word	0x08006064
 8004874:	080060f4 	.word	0x080060f4

08004878 <__hi0bits>:
 8004878:	0c02      	lsrs	r2, r0, #16
 800487a:	0412      	lsls	r2, r2, #16
 800487c:	4603      	mov	r3, r0
 800487e:	b9ca      	cbnz	r2, 80048b4 <__hi0bits+0x3c>
 8004880:	0403      	lsls	r3, r0, #16
 8004882:	2010      	movs	r0, #16
 8004884:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004888:	bf04      	itt	eq
 800488a:	021b      	lsleq	r3, r3, #8
 800488c:	3008      	addeq	r0, #8
 800488e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004892:	bf04      	itt	eq
 8004894:	011b      	lsleq	r3, r3, #4
 8004896:	3004      	addeq	r0, #4
 8004898:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800489c:	bf04      	itt	eq
 800489e:	009b      	lsleq	r3, r3, #2
 80048a0:	3002      	addeq	r0, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	db05      	blt.n	80048b2 <__hi0bits+0x3a>
 80048a6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80048aa:	f100 0001 	add.w	r0, r0, #1
 80048ae:	bf08      	it	eq
 80048b0:	2020      	moveq	r0, #32
 80048b2:	4770      	bx	lr
 80048b4:	2000      	movs	r0, #0
 80048b6:	e7e5      	b.n	8004884 <__hi0bits+0xc>

080048b8 <__lo0bits>:
 80048b8:	6803      	ldr	r3, [r0, #0]
 80048ba:	4602      	mov	r2, r0
 80048bc:	f013 0007 	ands.w	r0, r3, #7
 80048c0:	d00b      	beq.n	80048da <__lo0bits+0x22>
 80048c2:	07d9      	lsls	r1, r3, #31
 80048c4:	d422      	bmi.n	800490c <__lo0bits+0x54>
 80048c6:	0798      	lsls	r0, r3, #30
 80048c8:	bf49      	itett	mi
 80048ca:	085b      	lsrmi	r3, r3, #1
 80048cc:	089b      	lsrpl	r3, r3, #2
 80048ce:	2001      	movmi	r0, #1
 80048d0:	6013      	strmi	r3, [r2, #0]
 80048d2:	bf5c      	itt	pl
 80048d4:	2002      	movpl	r0, #2
 80048d6:	6013      	strpl	r3, [r2, #0]
 80048d8:	4770      	bx	lr
 80048da:	b299      	uxth	r1, r3
 80048dc:	b909      	cbnz	r1, 80048e2 <__lo0bits+0x2a>
 80048de:	2010      	movs	r0, #16
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80048e6:	bf04      	itt	eq
 80048e8:	0a1b      	lsreq	r3, r3, #8
 80048ea:	3008      	addeq	r0, #8
 80048ec:	0719      	lsls	r1, r3, #28
 80048ee:	bf04      	itt	eq
 80048f0:	091b      	lsreq	r3, r3, #4
 80048f2:	3004      	addeq	r0, #4
 80048f4:	0799      	lsls	r1, r3, #30
 80048f6:	bf04      	itt	eq
 80048f8:	089b      	lsreq	r3, r3, #2
 80048fa:	3002      	addeq	r0, #2
 80048fc:	07d9      	lsls	r1, r3, #31
 80048fe:	d403      	bmi.n	8004908 <__lo0bits+0x50>
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	f100 0001 	add.w	r0, r0, #1
 8004906:	d003      	beq.n	8004910 <__lo0bits+0x58>
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4770      	bx	lr
 800490c:	2000      	movs	r0, #0
 800490e:	4770      	bx	lr
 8004910:	2020      	movs	r0, #32
 8004912:	4770      	bx	lr

08004914 <__i2b>:
 8004914:	b510      	push	{r4, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	2101      	movs	r1, #1
 800491a:	f7ff feb7 	bl	800468c <_Balloc>
 800491e:	4602      	mov	r2, r0
 8004920:	b928      	cbnz	r0, 800492e <__i2b+0x1a>
 8004922:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004926:	4b04      	ldr	r3, [pc, #16]	; (8004938 <__i2b+0x24>)
 8004928:	4804      	ldr	r0, [pc, #16]	; (800493c <__i2b+0x28>)
 800492a:	f7ff faed 	bl	8003f08 <__assert_func>
 800492e:	2301      	movs	r3, #1
 8004930:	6144      	str	r4, [r0, #20]
 8004932:	6103      	str	r3, [r0, #16]
 8004934:	bd10      	pop	{r4, pc}
 8004936:	bf00      	nop
 8004938:	08006064 	.word	0x08006064
 800493c:	080060f4 	.word	0x080060f4

08004940 <__multiply>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4614      	mov	r4, r2
 8004946:	690a      	ldr	r2, [r1, #16]
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	460d      	mov	r5, r1
 800494c:	429a      	cmp	r2, r3
 800494e:	bfbe      	ittt	lt
 8004950:	460b      	movlt	r3, r1
 8004952:	4625      	movlt	r5, r4
 8004954:	461c      	movlt	r4, r3
 8004956:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800495a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800495e:	68ab      	ldr	r3, [r5, #8]
 8004960:	6869      	ldr	r1, [r5, #4]
 8004962:	eb0a 0709 	add.w	r7, sl, r9
 8004966:	42bb      	cmp	r3, r7
 8004968:	b085      	sub	sp, #20
 800496a:	bfb8      	it	lt
 800496c:	3101      	addlt	r1, #1
 800496e:	f7ff fe8d 	bl	800468c <_Balloc>
 8004972:	b930      	cbnz	r0, 8004982 <__multiply+0x42>
 8004974:	4602      	mov	r2, r0
 8004976:	f240 115d 	movw	r1, #349	; 0x15d
 800497a:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <__multiply+0x140>)
 800497c:	4841      	ldr	r0, [pc, #260]	; (8004a84 <__multiply+0x144>)
 800497e:	f7ff fac3 	bl	8003f08 <__assert_func>
 8004982:	f100 0614 	add.w	r6, r0, #20
 8004986:	4633      	mov	r3, r6
 8004988:	2200      	movs	r2, #0
 800498a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800498e:	4543      	cmp	r3, r8
 8004990:	d31e      	bcc.n	80049d0 <__multiply+0x90>
 8004992:	f105 0c14 	add.w	ip, r5, #20
 8004996:	f104 0314 	add.w	r3, r4, #20
 800499a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800499e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80049a2:	9202      	str	r2, [sp, #8]
 80049a4:	ebac 0205 	sub.w	r2, ip, r5
 80049a8:	3a15      	subs	r2, #21
 80049aa:	f022 0203 	bic.w	r2, r2, #3
 80049ae:	3204      	adds	r2, #4
 80049b0:	f105 0115 	add.w	r1, r5, #21
 80049b4:	458c      	cmp	ip, r1
 80049b6:	bf38      	it	cc
 80049b8:	2204      	movcc	r2, #4
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	9a02      	ldr	r2, [sp, #8]
 80049be:	9303      	str	r3, [sp, #12]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d808      	bhi.n	80049d6 <__multiply+0x96>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	dc55      	bgt.n	8004a74 <__multiply+0x134>
 80049c8:	6107      	str	r7, [r0, #16]
 80049ca:	b005      	add	sp, #20
 80049cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d0:	f843 2b04 	str.w	r2, [r3], #4
 80049d4:	e7db      	b.n	800498e <__multiply+0x4e>
 80049d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80049da:	f1ba 0f00 	cmp.w	sl, #0
 80049de:	d020      	beq.n	8004a22 <__multiply+0xe2>
 80049e0:	46b1      	mov	r9, r6
 80049e2:	2200      	movs	r2, #0
 80049e4:	f105 0e14 	add.w	lr, r5, #20
 80049e8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80049ec:	f8d9 b000 	ldr.w	fp, [r9]
 80049f0:	b2a1      	uxth	r1, r4
 80049f2:	fa1f fb8b 	uxth.w	fp, fp
 80049f6:	fb0a b101 	mla	r1, sl, r1, fp
 80049fa:	4411      	add	r1, r2
 80049fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004a00:	0c24      	lsrs	r4, r4, #16
 8004a02:	0c12      	lsrs	r2, r2, #16
 8004a04:	fb0a 2404 	mla	r4, sl, r4, r2
 8004a08:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004a0c:	b289      	uxth	r1, r1
 8004a0e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004a12:	45f4      	cmp	ip, lr
 8004a14:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004a18:	f849 1b04 	str.w	r1, [r9], #4
 8004a1c:	d8e4      	bhi.n	80049e8 <__multiply+0xa8>
 8004a1e:	9901      	ldr	r1, [sp, #4]
 8004a20:	5072      	str	r2, [r6, r1]
 8004a22:	9a03      	ldr	r2, [sp, #12]
 8004a24:	3304      	adds	r3, #4
 8004a26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004a2a:	f1b9 0f00 	cmp.w	r9, #0
 8004a2e:	d01f      	beq.n	8004a70 <__multiply+0x130>
 8004a30:	46b6      	mov	lr, r6
 8004a32:	f04f 0a00 	mov.w	sl, #0
 8004a36:	6834      	ldr	r4, [r6, #0]
 8004a38:	f105 0114 	add.w	r1, r5, #20
 8004a3c:	880a      	ldrh	r2, [r1, #0]
 8004a3e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004a42:	b2a4      	uxth	r4, r4
 8004a44:	fb09 b202 	mla	r2, r9, r2, fp
 8004a48:	4492      	add	sl, r2
 8004a4a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004a4e:	f84e 4b04 	str.w	r4, [lr], #4
 8004a52:	f851 4b04 	ldr.w	r4, [r1], #4
 8004a56:	f8be 2000 	ldrh.w	r2, [lr]
 8004a5a:	0c24      	lsrs	r4, r4, #16
 8004a5c:	fb09 2404 	mla	r4, r9, r4, r2
 8004a60:	458c      	cmp	ip, r1
 8004a62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004a66:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004a6a:	d8e7      	bhi.n	8004a3c <__multiply+0xfc>
 8004a6c:	9a01      	ldr	r2, [sp, #4]
 8004a6e:	50b4      	str	r4, [r6, r2]
 8004a70:	3604      	adds	r6, #4
 8004a72:	e7a3      	b.n	80049bc <__multiply+0x7c>
 8004a74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1a5      	bne.n	80049c8 <__multiply+0x88>
 8004a7c:	3f01      	subs	r7, #1
 8004a7e:	e7a1      	b.n	80049c4 <__multiply+0x84>
 8004a80:	08006064 	.word	0x08006064
 8004a84:	080060f4 	.word	0x080060f4

08004a88 <__pow5mult>:
 8004a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	f012 0203 	ands.w	r2, r2, #3
 8004a92:	4606      	mov	r6, r0
 8004a94:	460f      	mov	r7, r1
 8004a96:	d007      	beq.n	8004aa8 <__pow5mult+0x20>
 8004a98:	4c25      	ldr	r4, [pc, #148]	; (8004b30 <__pow5mult+0xa8>)
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004aa2:	f7ff fe55 	bl	8004750 <__multadd>
 8004aa6:	4607      	mov	r7, r0
 8004aa8:	10ad      	asrs	r5, r5, #2
 8004aaa:	d03d      	beq.n	8004b28 <__pow5mult+0xa0>
 8004aac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004aae:	b97c      	cbnz	r4, 8004ad0 <__pow5mult+0x48>
 8004ab0:	2010      	movs	r0, #16
 8004ab2:	f7fe fad5 	bl	8003060 <malloc>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6270      	str	r0, [r6, #36]	; 0x24
 8004aba:	b928      	cbnz	r0, 8004ac8 <__pow5mult+0x40>
 8004abc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <__pow5mult+0xac>)
 8004ac2:	481d      	ldr	r0, [pc, #116]	; (8004b38 <__pow5mult+0xb0>)
 8004ac4:	f7ff fa20 	bl	8003f08 <__assert_func>
 8004ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004acc:	6004      	str	r4, [r0, #0]
 8004ace:	60c4      	str	r4, [r0, #12]
 8004ad0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ad8:	b94c      	cbnz	r4, 8004aee <__pow5mult+0x66>
 8004ada:	f240 2171 	movw	r1, #625	; 0x271
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f7ff ff18 	bl	8004914 <__i2b>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	f8c8 0008 	str.w	r0, [r8, #8]
 8004aec:	6003      	str	r3, [r0, #0]
 8004aee:	f04f 0900 	mov.w	r9, #0
 8004af2:	07eb      	lsls	r3, r5, #31
 8004af4:	d50a      	bpl.n	8004b0c <__pow5mult+0x84>
 8004af6:	4639      	mov	r1, r7
 8004af8:	4622      	mov	r2, r4
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff ff20 	bl	8004940 <__multiply>
 8004b00:	4680      	mov	r8, r0
 8004b02:	4639      	mov	r1, r7
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff fe01 	bl	800470c <_Bfree>
 8004b0a:	4647      	mov	r7, r8
 8004b0c:	106d      	asrs	r5, r5, #1
 8004b0e:	d00b      	beq.n	8004b28 <__pow5mult+0xa0>
 8004b10:	6820      	ldr	r0, [r4, #0]
 8004b12:	b938      	cbnz	r0, 8004b24 <__pow5mult+0x9c>
 8004b14:	4622      	mov	r2, r4
 8004b16:	4621      	mov	r1, r4
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f7ff ff11 	bl	8004940 <__multiply>
 8004b1e:	6020      	str	r0, [r4, #0]
 8004b20:	f8c0 9000 	str.w	r9, [r0]
 8004b24:	4604      	mov	r4, r0
 8004b26:	e7e4      	b.n	8004af2 <__pow5mult+0x6a>
 8004b28:	4638      	mov	r0, r7
 8004b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b2e:	bf00      	nop
 8004b30:	08006248 	.word	0x08006248
 8004b34:	08005fb0 	.word	0x08005fb0
 8004b38:	080060f4 	.word	0x080060f4

08004b3c <__lshift>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	460c      	mov	r4, r1
 8004b42:	4607      	mov	r7, r0
 8004b44:	4691      	mov	r9, r2
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	6849      	ldr	r1, [r1, #4]
 8004b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b54:	f108 0601 	add.w	r6, r8, #1
 8004b58:	42b3      	cmp	r3, r6
 8004b5a:	db0b      	blt.n	8004b74 <__lshift+0x38>
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f7ff fd95 	bl	800468c <_Balloc>
 8004b62:	4605      	mov	r5, r0
 8004b64:	b948      	cbnz	r0, 8004b7a <__lshift+0x3e>
 8004b66:	4602      	mov	r2, r0
 8004b68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b6c:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <__lshift+0xd0>)
 8004b6e:	4828      	ldr	r0, [pc, #160]	; (8004c10 <__lshift+0xd4>)
 8004b70:	f7ff f9ca 	bl	8003f08 <__assert_func>
 8004b74:	3101      	adds	r1, #1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	e7ee      	b.n	8004b58 <__lshift+0x1c>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f100 0114 	add.w	r1, r0, #20
 8004b80:	f100 0210 	add.w	r2, r0, #16
 8004b84:	4618      	mov	r0, r3
 8004b86:	4553      	cmp	r3, sl
 8004b88:	db33      	blt.n	8004bf2 <__lshift+0xb6>
 8004b8a:	6920      	ldr	r0, [r4, #16]
 8004b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b90:	f104 0314 	add.w	r3, r4, #20
 8004b94:	f019 091f 	ands.w	r9, r9, #31
 8004b98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ba0:	d02b      	beq.n	8004bfa <__lshift+0xbe>
 8004ba2:	468a      	mov	sl, r1
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	fa00 f009 	lsl.w	r0, r0, r9
 8004bb0:	4302      	orrs	r2, r0
 8004bb2:	f84a 2b04 	str.w	r2, [sl], #4
 8004bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bba:	459c      	cmp	ip, r3
 8004bbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8004bc0:	d8f3      	bhi.n	8004baa <__lshift+0x6e>
 8004bc2:	ebac 0304 	sub.w	r3, ip, r4
 8004bc6:	3b15      	subs	r3, #21
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	3304      	adds	r3, #4
 8004bce:	f104 0015 	add.w	r0, r4, #21
 8004bd2:	4584      	cmp	ip, r0
 8004bd4:	bf38      	it	cc
 8004bd6:	2304      	movcc	r3, #4
 8004bd8:	50ca      	str	r2, [r1, r3]
 8004bda:	b10a      	cbz	r2, 8004be0 <__lshift+0xa4>
 8004bdc:	f108 0602 	add.w	r6, r8, #2
 8004be0:	3e01      	subs	r6, #1
 8004be2:	4638      	mov	r0, r7
 8004be4:	4621      	mov	r1, r4
 8004be6:	612e      	str	r6, [r5, #16]
 8004be8:	f7ff fd90 	bl	800470c <_Bfree>
 8004bec:	4628      	mov	r0, r5
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	e7c5      	b.n	8004b86 <__lshift+0x4a>
 8004bfa:	3904      	subs	r1, #4
 8004bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c00:	459c      	cmp	ip, r3
 8004c02:	f841 2f04 	str.w	r2, [r1, #4]!
 8004c06:	d8f9      	bhi.n	8004bfc <__lshift+0xc0>
 8004c08:	e7ea      	b.n	8004be0 <__lshift+0xa4>
 8004c0a:	bf00      	nop
 8004c0c:	08006064 	.word	0x08006064
 8004c10:	080060f4 	.word	0x080060f4

08004c14 <__mcmp>:
 8004c14:	4603      	mov	r3, r0
 8004c16:	690a      	ldr	r2, [r1, #16]
 8004c18:	6900      	ldr	r0, [r0, #16]
 8004c1a:	b530      	push	{r4, r5, lr}
 8004c1c:	1a80      	subs	r0, r0, r2
 8004c1e:	d10d      	bne.n	8004c3c <__mcmp+0x28>
 8004c20:	3314      	adds	r3, #20
 8004c22:	3114      	adds	r1, #20
 8004c24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004c28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004c34:	4295      	cmp	r5, r2
 8004c36:	d002      	beq.n	8004c3e <__mcmp+0x2a>
 8004c38:	d304      	bcc.n	8004c44 <__mcmp+0x30>
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	bd30      	pop	{r4, r5, pc}
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	d3f4      	bcc.n	8004c2c <__mcmp+0x18>
 8004c42:	e7fb      	b.n	8004c3c <__mcmp+0x28>
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	e7f8      	b.n	8004c3c <__mcmp+0x28>
	...

08004c4c <__mdiff>:
 8004c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	460c      	mov	r4, r1
 8004c52:	4606      	mov	r6, r0
 8004c54:	4611      	mov	r1, r2
 8004c56:	4620      	mov	r0, r4
 8004c58:	4692      	mov	sl, r2
 8004c5a:	f7ff ffdb 	bl	8004c14 <__mcmp>
 8004c5e:	1e05      	subs	r5, r0, #0
 8004c60:	d111      	bne.n	8004c86 <__mdiff+0x3a>
 8004c62:	4629      	mov	r1, r5
 8004c64:	4630      	mov	r0, r6
 8004c66:	f7ff fd11 	bl	800468c <_Balloc>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	b928      	cbnz	r0, 8004c7a <__mdiff+0x2e>
 8004c6e:	f240 2132 	movw	r1, #562	; 0x232
 8004c72:	4b3c      	ldr	r3, [pc, #240]	; (8004d64 <__mdiff+0x118>)
 8004c74:	483c      	ldr	r0, [pc, #240]	; (8004d68 <__mdiff+0x11c>)
 8004c76:	f7ff f947 	bl	8003f08 <__assert_func>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c80:	4610      	mov	r0, r2
 8004c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c86:	bfa4      	itt	ge
 8004c88:	4653      	movge	r3, sl
 8004c8a:	46a2      	movge	sl, r4
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004c92:	bfa6      	itte	ge
 8004c94:	461c      	movge	r4, r3
 8004c96:	2500      	movge	r5, #0
 8004c98:	2501      	movlt	r5, #1
 8004c9a:	f7ff fcf7 	bl	800468c <_Balloc>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	b918      	cbnz	r0, 8004caa <__mdiff+0x5e>
 8004ca2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ca6:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <__mdiff+0x118>)
 8004ca8:	e7e4      	b.n	8004c74 <__mdiff+0x28>
 8004caa:	f100 0814 	add.w	r8, r0, #20
 8004cae:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004cb2:	60c5      	str	r5, [r0, #12]
 8004cb4:	f04f 0c00 	mov.w	ip, #0
 8004cb8:	f10a 0514 	add.w	r5, sl, #20
 8004cbc:	f10a 0010 	add.w	r0, sl, #16
 8004cc0:	46c2      	mov	sl, r8
 8004cc2:	6926      	ldr	r6, [r4, #16]
 8004cc4:	f104 0914 	add.w	r9, r4, #20
 8004cc8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004ccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004cd0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004cd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004cd8:	fa1f f18b 	uxth.w	r1, fp
 8004cdc:	4461      	add	r1, ip
 8004cde:	fa1f fc83 	uxth.w	ip, r3
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	eba1 010c 	sub.w	r1, r1, ip
 8004ce8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004cec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004cf0:	b289      	uxth	r1, r1
 8004cf2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004cf6:	454e      	cmp	r6, r9
 8004cf8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004cfc:	f84a 3b04 	str.w	r3, [sl], #4
 8004d00:	d8e6      	bhi.n	8004cd0 <__mdiff+0x84>
 8004d02:	1b33      	subs	r3, r6, r4
 8004d04:	3b15      	subs	r3, #21
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	3415      	adds	r4, #21
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	42a6      	cmp	r6, r4
 8004d10:	bf38      	it	cc
 8004d12:	2304      	movcc	r3, #4
 8004d14:	441d      	add	r5, r3
 8004d16:	4443      	add	r3, r8
 8004d18:	461e      	mov	r6, r3
 8004d1a:	462c      	mov	r4, r5
 8004d1c:	4574      	cmp	r4, lr
 8004d1e:	d30e      	bcc.n	8004d3e <__mdiff+0xf2>
 8004d20:	f10e 0103 	add.w	r1, lr, #3
 8004d24:	1b49      	subs	r1, r1, r5
 8004d26:	f021 0103 	bic.w	r1, r1, #3
 8004d2a:	3d03      	subs	r5, #3
 8004d2c:	45ae      	cmp	lr, r5
 8004d2e:	bf38      	it	cc
 8004d30:	2100      	movcc	r1, #0
 8004d32:	4419      	add	r1, r3
 8004d34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004d38:	b18b      	cbz	r3, 8004d5e <__mdiff+0x112>
 8004d3a:	6117      	str	r7, [r2, #16]
 8004d3c:	e7a0      	b.n	8004c80 <__mdiff+0x34>
 8004d3e:	f854 8b04 	ldr.w	r8, [r4], #4
 8004d42:	fa1f f188 	uxth.w	r1, r8
 8004d46:	4461      	add	r1, ip
 8004d48:	1408      	asrs	r0, r1, #16
 8004d4a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004d4e:	b289      	uxth	r1, r1
 8004d50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004d58:	f846 1b04 	str.w	r1, [r6], #4
 8004d5c:	e7de      	b.n	8004d1c <__mdiff+0xd0>
 8004d5e:	3f01      	subs	r7, #1
 8004d60:	e7e8      	b.n	8004d34 <__mdiff+0xe8>
 8004d62:	bf00      	nop
 8004d64:	08006064 	.word	0x08006064
 8004d68:	080060f4 	.word	0x080060f4

08004d6c <__ulp>:
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <__ulp+0x48>)
 8004d6e:	400b      	ands	r3, r1
 8004d70:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dd02      	ble.n	8004d7e <__ulp+0x12>
 8004d78:	2000      	movs	r0, #0
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4770      	bx	lr
 8004d7e:	425b      	negs	r3, r3
 8004d80:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004d84:	f04f 0000 	mov.w	r0, #0
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004d90:	da04      	bge.n	8004d9c <__ulp+0x30>
 8004d92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004d96:	fa43 f102 	asr.w	r1, r3, r2
 8004d9a:	4770      	bx	lr
 8004d9c:	f1a2 0314 	sub.w	r3, r2, #20
 8004da0:	2b1e      	cmp	r3, #30
 8004da2:	bfd6      	itet	le
 8004da4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004da8:	2301      	movgt	r3, #1
 8004daa:	fa22 f303 	lsrle.w	r3, r2, r3
 8004dae:	4618      	mov	r0, r3
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	7ff00000 	.word	0x7ff00000

08004db8 <__b2d>:
 8004db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dbc:	6907      	ldr	r7, [r0, #16]
 8004dbe:	f100 0914 	add.w	r9, r0, #20
 8004dc2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8004dc6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8004dca:	f1a7 0804 	sub.w	r8, r7, #4
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff fd52 	bl	8004878 <__hi0bits>
 8004dd4:	f1c0 0320 	rsb	r3, r0, #32
 8004dd8:	280a      	cmp	r0, #10
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	491f      	ldr	r1, [pc, #124]	; (8004e5c <__b2d+0xa4>)
 8004dde:	dc17      	bgt.n	8004e10 <__b2d+0x58>
 8004de0:	45c1      	cmp	r9, r8
 8004de2:	bf28      	it	cs
 8004de4:	2200      	movcs	r2, #0
 8004de6:	f1c0 0c0b 	rsb	ip, r0, #11
 8004dea:	fa26 f30c 	lsr.w	r3, r6, ip
 8004dee:	bf38      	it	cc
 8004df0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8004df4:	ea43 0501 	orr.w	r5, r3, r1
 8004df8:	f100 0315 	add.w	r3, r0, #21
 8004dfc:	fa06 f303 	lsl.w	r3, r6, r3
 8004e00:	fa22 f20c 	lsr.w	r2, r2, ip
 8004e04:	ea43 0402 	orr.w	r4, r3, r2
 8004e08:	4620      	mov	r0, r4
 8004e0a:	4629      	mov	r1, r5
 8004e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e10:	45c1      	cmp	r9, r8
 8004e12:	bf2e      	itee	cs
 8004e14:	2200      	movcs	r2, #0
 8004e16:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8004e1a:	f1a7 0808 	subcc.w	r8, r7, #8
 8004e1e:	f1b0 030b 	subs.w	r3, r0, #11
 8004e22:	d016      	beq.n	8004e52 <__b2d+0x9a>
 8004e24:	f1c3 0720 	rsb	r7, r3, #32
 8004e28:	fa22 f107 	lsr.w	r1, r2, r7
 8004e2c:	45c8      	cmp	r8, r9
 8004e2e:	fa06 f603 	lsl.w	r6, r6, r3
 8004e32:	ea46 0601 	orr.w	r6, r6, r1
 8004e36:	bf94      	ite	ls
 8004e38:	2100      	movls	r1, #0
 8004e3a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8004e3e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8004e42:	fa02 f003 	lsl.w	r0, r2, r3
 8004e46:	40f9      	lsrs	r1, r7
 8004e48:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004e4c:	ea40 0401 	orr.w	r4, r0, r1
 8004e50:	e7da      	b.n	8004e08 <__b2d+0x50>
 8004e52:	4614      	mov	r4, r2
 8004e54:	ea46 0501 	orr.w	r5, r6, r1
 8004e58:	e7d6      	b.n	8004e08 <__b2d+0x50>
 8004e5a:	bf00      	nop
 8004e5c:	3ff00000 	.word	0x3ff00000

08004e60 <__d2b>:
 8004e60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e64:	2101      	movs	r1, #1
 8004e66:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004e6a:	4690      	mov	r8, r2
 8004e6c:	461d      	mov	r5, r3
 8004e6e:	f7ff fc0d 	bl	800468c <_Balloc>
 8004e72:	4604      	mov	r4, r0
 8004e74:	b930      	cbnz	r0, 8004e84 <__d2b+0x24>
 8004e76:	4602      	mov	r2, r0
 8004e78:	f240 310a 	movw	r1, #778	; 0x30a
 8004e7c:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <__d2b+0xb0>)
 8004e7e:	4825      	ldr	r0, [pc, #148]	; (8004f14 <__d2b+0xb4>)
 8004e80:	f7ff f842 	bl	8003f08 <__assert_func>
 8004e84:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004e88:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004e8c:	bb2d      	cbnz	r5, 8004eda <__d2b+0x7a>
 8004e8e:	9301      	str	r3, [sp, #4]
 8004e90:	f1b8 0300 	subs.w	r3, r8, #0
 8004e94:	d026      	beq.n	8004ee4 <__d2b+0x84>
 8004e96:	4668      	mov	r0, sp
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	f7ff fd0d 	bl	80048b8 <__lo0bits>
 8004e9e:	9900      	ldr	r1, [sp, #0]
 8004ea0:	b1f0      	cbz	r0, 8004ee0 <__d2b+0x80>
 8004ea2:	9a01      	ldr	r2, [sp, #4]
 8004ea4:	f1c0 0320 	rsb	r3, r0, #32
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	430b      	orrs	r3, r1
 8004eae:	40c2      	lsrs	r2, r0
 8004eb0:	6163      	str	r3, [r4, #20]
 8004eb2:	9201      	str	r2, [sp, #4]
 8004eb4:	9b01      	ldr	r3, [sp, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bf14      	ite	ne
 8004eba:	2102      	movne	r1, #2
 8004ebc:	2101      	moveq	r1, #1
 8004ebe:	61a3      	str	r3, [r4, #24]
 8004ec0:	6121      	str	r1, [r4, #16]
 8004ec2:	b1c5      	cbz	r5, 8004ef6 <__d2b+0x96>
 8004ec4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004ec8:	4405      	add	r5, r0
 8004eca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ece:	603d      	str	r5, [r7, #0]
 8004ed0:	6030      	str	r0, [r6, #0]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	b002      	add	sp, #8
 8004ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ede:	e7d6      	b.n	8004e8e <__d2b+0x2e>
 8004ee0:	6161      	str	r1, [r4, #20]
 8004ee2:	e7e7      	b.n	8004eb4 <__d2b+0x54>
 8004ee4:	a801      	add	r0, sp, #4
 8004ee6:	f7ff fce7 	bl	80048b8 <__lo0bits>
 8004eea:	2101      	movs	r1, #1
 8004eec:	9b01      	ldr	r3, [sp, #4]
 8004eee:	6121      	str	r1, [r4, #16]
 8004ef0:	6163      	str	r3, [r4, #20]
 8004ef2:	3020      	adds	r0, #32
 8004ef4:	e7e5      	b.n	8004ec2 <__d2b+0x62>
 8004ef6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004efa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004efe:	6038      	str	r0, [r7, #0]
 8004f00:	6918      	ldr	r0, [r3, #16]
 8004f02:	f7ff fcb9 	bl	8004878 <__hi0bits>
 8004f06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004f0a:	6031      	str	r1, [r6, #0]
 8004f0c:	e7e1      	b.n	8004ed2 <__d2b+0x72>
 8004f0e:	bf00      	nop
 8004f10:	08006064 	.word	0x08006064
 8004f14:	080060f4 	.word	0x080060f4

08004f18 <__ratio>:
 8004f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	4688      	mov	r8, r1
 8004f1e:	4669      	mov	r1, sp
 8004f20:	4681      	mov	r9, r0
 8004f22:	f7ff ff49 	bl	8004db8 <__b2d>
 8004f26:	460f      	mov	r7, r1
 8004f28:	4604      	mov	r4, r0
 8004f2a:	460d      	mov	r5, r1
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	a901      	add	r1, sp, #4
 8004f30:	f7ff ff42 	bl	8004db8 <__b2d>
 8004f34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f38:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004f3c:	468b      	mov	fp, r1
 8004f3e:	eba3 0c02 	sub.w	ip, r3, r2
 8004f42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bfd5      	itete	le
 8004f50:	460a      	movle	r2, r1
 8004f52:	462a      	movgt	r2, r5
 8004f54:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004f58:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004f5c:	bfd8      	it	le
 8004f5e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004f62:	465b      	mov	r3, fp
 8004f64:	4602      	mov	r2, r0
 8004f66:	4639      	mov	r1, r7
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7fb fbdf 	bl	800072c <__aeabi_ddiv>
 8004f6e:	b003      	add	sp, #12
 8004f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f74 <__copybits>:
 8004f74:	3901      	subs	r1, #1
 8004f76:	b570      	push	{r4, r5, r6, lr}
 8004f78:	1149      	asrs	r1, r1, #5
 8004f7a:	6914      	ldr	r4, [r2, #16]
 8004f7c:	3101      	adds	r1, #1
 8004f7e:	f102 0314 	add.w	r3, r2, #20
 8004f82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004f86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f8a:	1f05      	subs	r5, r0, #4
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d30c      	bcc.n	8004faa <__copybits+0x36>
 8004f90:	1aa3      	subs	r3, r4, r2
 8004f92:	3b11      	subs	r3, #17
 8004f94:	f023 0303 	bic.w	r3, r3, #3
 8004f98:	3211      	adds	r2, #17
 8004f9a:	42a2      	cmp	r2, r4
 8004f9c:	bf88      	it	hi
 8004f9e:	2300      	movhi	r3, #0
 8004fa0:	4418      	add	r0, r3
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	4288      	cmp	r0, r1
 8004fa6:	d305      	bcc.n	8004fb4 <__copybits+0x40>
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	f853 6b04 	ldr.w	r6, [r3], #4
 8004fae:	f845 6f04 	str.w	r6, [r5, #4]!
 8004fb2:	e7eb      	b.n	8004f8c <__copybits+0x18>
 8004fb4:	f840 3b04 	str.w	r3, [r0], #4
 8004fb8:	e7f4      	b.n	8004fa4 <__copybits+0x30>

08004fba <__any_on>:
 8004fba:	f100 0214 	add.w	r2, r0, #20
 8004fbe:	6900      	ldr	r0, [r0, #16]
 8004fc0:	114b      	asrs	r3, r1, #5
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	db11      	blt.n	8004fec <__any_on+0x32>
 8004fc8:	dd0a      	ble.n	8004fe0 <__any_on+0x26>
 8004fca:	f011 011f 	ands.w	r1, r1, #31
 8004fce:	d007      	beq.n	8004fe0 <__any_on+0x26>
 8004fd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8004fd4:	fa24 f001 	lsr.w	r0, r4, r1
 8004fd8:	fa00 f101 	lsl.w	r1, r0, r1
 8004fdc:	428c      	cmp	r4, r1
 8004fde:	d10b      	bne.n	8004ff8 <__any_on+0x3e>
 8004fe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d803      	bhi.n	8004ff0 <__any_on+0x36>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	4603      	mov	r3, r0
 8004fee:	e7f7      	b.n	8004fe0 <__any_on+0x26>
 8004ff0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	d0f5      	beq.n	8004fe4 <__any_on+0x2a>
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	e7f6      	b.n	8004fea <__any_on+0x30>

08004ffc <_calloc_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	fb02 f501 	mul.w	r5, r2, r1
 8005002:	4629      	mov	r1, r5
 8005004:	f7fe f890 	bl	8003128 <_malloc_r>
 8005008:	4604      	mov	r4, r0
 800500a:	b118      	cbz	r0, 8005014 <_calloc_r+0x18>
 800500c:	462a      	mov	r2, r5
 800500e:	2100      	movs	r1, #0
 8005010:	f7fe f836 	bl	8003080 <memset>
 8005014:	4620      	mov	r0, r4
 8005016:	bd38      	pop	{r3, r4, r5, pc}

08005018 <__sfputc_r>:
 8005018:	6893      	ldr	r3, [r2, #8]
 800501a:	b410      	push	{r4}
 800501c:	3b01      	subs	r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	6093      	str	r3, [r2, #8]
 8005022:	da07      	bge.n	8005034 <__sfputc_r+0x1c>
 8005024:	6994      	ldr	r4, [r2, #24]
 8005026:	42a3      	cmp	r3, r4
 8005028:	db01      	blt.n	800502e <__sfputc_r+0x16>
 800502a:	290a      	cmp	r1, #10
 800502c:	d102      	bne.n	8005034 <__sfputc_r+0x1c>
 800502e:	bc10      	pop	{r4}
 8005030:	f000 baf8 	b.w	8005624 <__swbuf_r>
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	1c58      	adds	r0, r3, #1
 8005038:	6010      	str	r0, [r2, #0]
 800503a:	7019      	strb	r1, [r3, #0]
 800503c:	4608      	mov	r0, r1
 800503e:	bc10      	pop	{r4}
 8005040:	4770      	bx	lr

08005042 <__sfputs_r>:
 8005042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005044:	4606      	mov	r6, r0
 8005046:	460f      	mov	r7, r1
 8005048:	4614      	mov	r4, r2
 800504a:	18d5      	adds	r5, r2, r3
 800504c:	42ac      	cmp	r4, r5
 800504e:	d101      	bne.n	8005054 <__sfputs_r+0x12>
 8005050:	2000      	movs	r0, #0
 8005052:	e007      	b.n	8005064 <__sfputs_r+0x22>
 8005054:	463a      	mov	r2, r7
 8005056:	4630      	mov	r0, r6
 8005058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505c:	f7ff ffdc 	bl	8005018 <__sfputc_r>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d1f3      	bne.n	800504c <__sfputs_r+0xa>
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005068 <_vfiprintf_r>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	460d      	mov	r5, r1
 800506e:	4614      	mov	r4, r2
 8005070:	4698      	mov	r8, r3
 8005072:	4606      	mov	r6, r0
 8005074:	b09d      	sub	sp, #116	; 0x74
 8005076:	b118      	cbz	r0, 8005080 <_vfiprintf_r+0x18>
 8005078:	6983      	ldr	r3, [r0, #24]
 800507a:	b90b      	cbnz	r3, 8005080 <_vfiprintf_r+0x18>
 800507c:	f000 fcc2 	bl	8005a04 <__sinit>
 8005080:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <_vfiprintf_r+0x240>)
 8005082:	429d      	cmp	r5, r3
 8005084:	d11b      	bne.n	80050be <_vfiprintf_r+0x56>
 8005086:	6875      	ldr	r5, [r6, #4]
 8005088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800508a:	07d9      	lsls	r1, r3, #31
 800508c:	d405      	bmi.n	800509a <_vfiprintf_r+0x32>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	059a      	lsls	r2, r3, #22
 8005092:	d402      	bmi.n	800509a <_vfiprintf_r+0x32>
 8005094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005096:	f000 fd53 	bl	8005b40 <__retarget_lock_acquire_recursive>
 800509a:	89ab      	ldrh	r3, [r5, #12]
 800509c:	071b      	lsls	r3, r3, #28
 800509e:	d501      	bpl.n	80050a4 <_vfiprintf_r+0x3c>
 80050a0:	692b      	ldr	r3, [r5, #16]
 80050a2:	b9eb      	cbnz	r3, 80050e0 <_vfiprintf_r+0x78>
 80050a4:	4629      	mov	r1, r5
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 fb1c 	bl	80056e4 <__swsetup_r>
 80050ac:	b1c0      	cbz	r0, 80050e0 <_vfiprintf_r+0x78>
 80050ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050b0:	07dc      	lsls	r4, r3, #31
 80050b2:	d50e      	bpl.n	80050d2 <_vfiprintf_r+0x6a>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	b01d      	add	sp, #116	; 0x74
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050be:	4b7b      	ldr	r3, [pc, #492]	; (80052ac <_vfiprintf_r+0x244>)
 80050c0:	429d      	cmp	r5, r3
 80050c2:	d101      	bne.n	80050c8 <_vfiprintf_r+0x60>
 80050c4:	68b5      	ldr	r5, [r6, #8]
 80050c6:	e7df      	b.n	8005088 <_vfiprintf_r+0x20>
 80050c8:	4b79      	ldr	r3, [pc, #484]	; (80052b0 <_vfiprintf_r+0x248>)
 80050ca:	429d      	cmp	r5, r3
 80050cc:	bf08      	it	eq
 80050ce:	68f5      	ldreq	r5, [r6, #12]
 80050d0:	e7da      	b.n	8005088 <_vfiprintf_r+0x20>
 80050d2:	89ab      	ldrh	r3, [r5, #12]
 80050d4:	0598      	lsls	r0, r3, #22
 80050d6:	d4ed      	bmi.n	80050b4 <_vfiprintf_r+0x4c>
 80050d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050da:	f000 fd32 	bl	8005b42 <__retarget_lock_release_recursive>
 80050de:	e7e9      	b.n	80050b4 <_vfiprintf_r+0x4c>
 80050e0:	2300      	movs	r3, #0
 80050e2:	9309      	str	r3, [sp, #36]	; 0x24
 80050e4:	2320      	movs	r3, #32
 80050e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ea:	2330      	movs	r3, #48	; 0x30
 80050ec:	f04f 0901 	mov.w	r9, #1
 80050f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80050f4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80052b4 <_vfiprintf_r+0x24c>
 80050f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050fc:	4623      	mov	r3, r4
 80050fe:	469a      	mov	sl, r3
 8005100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005104:	b10a      	cbz	r2, 800510a <_vfiprintf_r+0xa2>
 8005106:	2a25      	cmp	r2, #37	; 0x25
 8005108:	d1f9      	bne.n	80050fe <_vfiprintf_r+0x96>
 800510a:	ebba 0b04 	subs.w	fp, sl, r4
 800510e:	d00b      	beq.n	8005128 <_vfiprintf_r+0xc0>
 8005110:	465b      	mov	r3, fp
 8005112:	4622      	mov	r2, r4
 8005114:	4629      	mov	r1, r5
 8005116:	4630      	mov	r0, r6
 8005118:	f7ff ff93 	bl	8005042 <__sfputs_r>
 800511c:	3001      	adds	r0, #1
 800511e:	f000 80aa 	beq.w	8005276 <_vfiprintf_r+0x20e>
 8005122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005124:	445a      	add	r2, fp
 8005126:	9209      	str	r2, [sp, #36]	; 0x24
 8005128:	f89a 3000 	ldrb.w	r3, [sl]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80a2 	beq.w	8005276 <_vfiprintf_r+0x20e>
 8005132:	2300      	movs	r3, #0
 8005134:	f04f 32ff 	mov.w	r2, #4294967295
 8005138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800513c:	f10a 0a01 	add.w	sl, sl, #1
 8005140:	9304      	str	r3, [sp, #16]
 8005142:	9307      	str	r3, [sp, #28]
 8005144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005148:	931a      	str	r3, [sp, #104]	; 0x68
 800514a:	4654      	mov	r4, sl
 800514c:	2205      	movs	r2, #5
 800514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005152:	4858      	ldr	r0, [pc, #352]	; (80052b4 <_vfiprintf_r+0x24c>)
 8005154:	f000 fd5a 	bl	8005c0c <memchr>
 8005158:	9a04      	ldr	r2, [sp, #16]
 800515a:	b9d8      	cbnz	r0, 8005194 <_vfiprintf_r+0x12c>
 800515c:	06d1      	lsls	r1, r2, #27
 800515e:	bf44      	itt	mi
 8005160:	2320      	movmi	r3, #32
 8005162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005166:	0713      	lsls	r3, r2, #28
 8005168:	bf44      	itt	mi
 800516a:	232b      	movmi	r3, #43	; 0x2b
 800516c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005170:	f89a 3000 	ldrb.w	r3, [sl]
 8005174:	2b2a      	cmp	r3, #42	; 0x2a
 8005176:	d015      	beq.n	80051a4 <_vfiprintf_r+0x13c>
 8005178:	4654      	mov	r4, sl
 800517a:	2000      	movs	r0, #0
 800517c:	f04f 0c0a 	mov.w	ip, #10
 8005180:	9a07      	ldr	r2, [sp, #28]
 8005182:	4621      	mov	r1, r4
 8005184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005188:	3b30      	subs	r3, #48	; 0x30
 800518a:	2b09      	cmp	r3, #9
 800518c:	d94e      	bls.n	800522c <_vfiprintf_r+0x1c4>
 800518e:	b1b0      	cbz	r0, 80051be <_vfiprintf_r+0x156>
 8005190:	9207      	str	r2, [sp, #28]
 8005192:	e014      	b.n	80051be <_vfiprintf_r+0x156>
 8005194:	eba0 0308 	sub.w	r3, r0, r8
 8005198:	fa09 f303 	lsl.w	r3, r9, r3
 800519c:	4313      	orrs	r3, r2
 800519e:	46a2      	mov	sl, r4
 80051a0:	9304      	str	r3, [sp, #16]
 80051a2:	e7d2      	b.n	800514a <_vfiprintf_r+0xe2>
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	1d19      	adds	r1, r3, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	9103      	str	r1, [sp, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	bfbb      	ittet	lt
 80051b0:	425b      	neglt	r3, r3
 80051b2:	f042 0202 	orrlt.w	r2, r2, #2
 80051b6:	9307      	strge	r3, [sp, #28]
 80051b8:	9307      	strlt	r3, [sp, #28]
 80051ba:	bfb8      	it	lt
 80051bc:	9204      	strlt	r2, [sp, #16]
 80051be:	7823      	ldrb	r3, [r4, #0]
 80051c0:	2b2e      	cmp	r3, #46	; 0x2e
 80051c2:	d10c      	bne.n	80051de <_vfiprintf_r+0x176>
 80051c4:	7863      	ldrb	r3, [r4, #1]
 80051c6:	2b2a      	cmp	r3, #42	; 0x2a
 80051c8:	d135      	bne.n	8005236 <_vfiprintf_r+0x1ce>
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	3402      	adds	r4, #2
 80051ce:	1d1a      	adds	r2, r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	9203      	str	r2, [sp, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bfb8      	it	lt
 80051d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80051dc:	9305      	str	r3, [sp, #20]
 80051de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052c4 <_vfiprintf_r+0x25c>
 80051e2:	2203      	movs	r2, #3
 80051e4:	4650      	mov	r0, sl
 80051e6:	7821      	ldrb	r1, [r4, #0]
 80051e8:	f000 fd10 	bl	8005c0c <memchr>
 80051ec:	b140      	cbz	r0, 8005200 <_vfiprintf_r+0x198>
 80051ee:	2340      	movs	r3, #64	; 0x40
 80051f0:	eba0 000a 	sub.w	r0, r0, sl
 80051f4:	fa03 f000 	lsl.w	r0, r3, r0
 80051f8:	9b04      	ldr	r3, [sp, #16]
 80051fa:	3401      	adds	r4, #1
 80051fc:	4303      	orrs	r3, r0
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005204:	2206      	movs	r2, #6
 8005206:	482c      	ldr	r0, [pc, #176]	; (80052b8 <_vfiprintf_r+0x250>)
 8005208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800520c:	f000 fcfe 	bl	8005c0c <memchr>
 8005210:	2800      	cmp	r0, #0
 8005212:	d03f      	beq.n	8005294 <_vfiprintf_r+0x22c>
 8005214:	4b29      	ldr	r3, [pc, #164]	; (80052bc <_vfiprintf_r+0x254>)
 8005216:	bb1b      	cbnz	r3, 8005260 <_vfiprintf_r+0x1f8>
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	3307      	adds	r3, #7
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	3308      	adds	r3, #8
 8005222:	9303      	str	r3, [sp, #12]
 8005224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005226:	443b      	add	r3, r7
 8005228:	9309      	str	r3, [sp, #36]	; 0x24
 800522a:	e767      	b.n	80050fc <_vfiprintf_r+0x94>
 800522c:	460c      	mov	r4, r1
 800522e:	2001      	movs	r0, #1
 8005230:	fb0c 3202 	mla	r2, ip, r2, r3
 8005234:	e7a5      	b.n	8005182 <_vfiprintf_r+0x11a>
 8005236:	2300      	movs	r3, #0
 8005238:	f04f 0c0a 	mov.w	ip, #10
 800523c:	4619      	mov	r1, r3
 800523e:	3401      	adds	r4, #1
 8005240:	9305      	str	r3, [sp, #20]
 8005242:	4620      	mov	r0, r4
 8005244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005248:	3a30      	subs	r2, #48	; 0x30
 800524a:	2a09      	cmp	r2, #9
 800524c:	d903      	bls.n	8005256 <_vfiprintf_r+0x1ee>
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0c5      	beq.n	80051de <_vfiprintf_r+0x176>
 8005252:	9105      	str	r1, [sp, #20]
 8005254:	e7c3      	b.n	80051de <_vfiprintf_r+0x176>
 8005256:	4604      	mov	r4, r0
 8005258:	2301      	movs	r3, #1
 800525a:	fb0c 2101 	mla	r1, ip, r1, r2
 800525e:	e7f0      	b.n	8005242 <_vfiprintf_r+0x1da>
 8005260:	ab03      	add	r3, sp, #12
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	462a      	mov	r2, r5
 8005266:	4630      	mov	r0, r6
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <_vfiprintf_r+0x258>)
 800526a:	a904      	add	r1, sp, #16
 800526c:	f3af 8000 	nop.w
 8005270:	4607      	mov	r7, r0
 8005272:	1c78      	adds	r0, r7, #1
 8005274:	d1d6      	bne.n	8005224 <_vfiprintf_r+0x1bc>
 8005276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005278:	07d9      	lsls	r1, r3, #31
 800527a:	d405      	bmi.n	8005288 <_vfiprintf_r+0x220>
 800527c:	89ab      	ldrh	r3, [r5, #12]
 800527e:	059a      	lsls	r2, r3, #22
 8005280:	d402      	bmi.n	8005288 <_vfiprintf_r+0x220>
 8005282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005284:	f000 fc5d 	bl	8005b42 <__retarget_lock_release_recursive>
 8005288:	89ab      	ldrh	r3, [r5, #12]
 800528a:	065b      	lsls	r3, r3, #25
 800528c:	f53f af12 	bmi.w	80050b4 <_vfiprintf_r+0x4c>
 8005290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005292:	e711      	b.n	80050b8 <_vfiprintf_r+0x50>
 8005294:	ab03      	add	r3, sp, #12
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	462a      	mov	r2, r5
 800529a:	4630      	mov	r0, r6
 800529c:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <_vfiprintf_r+0x258>)
 800529e:	a904      	add	r1, sp, #16
 80052a0:	f000 f882 	bl	80053a8 <_printf_i>
 80052a4:	e7e4      	b.n	8005270 <_vfiprintf_r+0x208>
 80052a6:	bf00      	nop
 80052a8:	080063a8 	.word	0x080063a8
 80052ac:	080063c8 	.word	0x080063c8
 80052b0:	08006388 	.word	0x08006388
 80052b4:	08006254 	.word	0x08006254
 80052b8:	0800625e 	.word	0x0800625e
 80052bc:	00000000 	.word	0x00000000
 80052c0:	08005043 	.word	0x08005043
 80052c4:	0800625a 	.word	0x0800625a

080052c8 <_printf_common>:
 80052c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052cc:	4616      	mov	r6, r2
 80052ce:	4699      	mov	r9, r3
 80052d0:	688a      	ldr	r2, [r1, #8]
 80052d2:	690b      	ldr	r3, [r1, #16]
 80052d4:	4607      	mov	r7, r0
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bfb8      	it	lt
 80052da:	4613      	movlt	r3, r2
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e2:	460c      	mov	r4, r1
 80052e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e8:	b10a      	cbz	r2, 80052ee <_printf_common+0x26>
 80052ea:	3301      	adds	r3, #1
 80052ec:	6033      	str	r3, [r6, #0]
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	0699      	lsls	r1, r3, #26
 80052f2:	bf42      	ittt	mi
 80052f4:	6833      	ldrmi	r3, [r6, #0]
 80052f6:	3302      	addmi	r3, #2
 80052f8:	6033      	strmi	r3, [r6, #0]
 80052fa:	6825      	ldr	r5, [r4, #0]
 80052fc:	f015 0506 	ands.w	r5, r5, #6
 8005300:	d106      	bne.n	8005310 <_printf_common+0x48>
 8005302:	f104 0a19 	add.w	sl, r4, #25
 8005306:	68e3      	ldr	r3, [r4, #12]
 8005308:	6832      	ldr	r2, [r6, #0]
 800530a:	1a9b      	subs	r3, r3, r2
 800530c:	42ab      	cmp	r3, r5
 800530e:	dc28      	bgt.n	8005362 <_printf_common+0x9a>
 8005310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005314:	1e13      	subs	r3, r2, #0
 8005316:	6822      	ldr	r2, [r4, #0]
 8005318:	bf18      	it	ne
 800531a:	2301      	movne	r3, #1
 800531c:	0692      	lsls	r2, r2, #26
 800531e:	d42d      	bmi.n	800537c <_printf_common+0xb4>
 8005320:	4649      	mov	r1, r9
 8005322:	4638      	mov	r0, r7
 8005324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005328:	47c0      	blx	r8
 800532a:	3001      	adds	r0, #1
 800532c:	d020      	beq.n	8005370 <_printf_common+0xa8>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	68e5      	ldr	r5, [r4, #12]
 8005332:	f003 0306 	and.w	r3, r3, #6
 8005336:	2b04      	cmp	r3, #4
 8005338:	bf18      	it	ne
 800533a:	2500      	movne	r5, #0
 800533c:	6832      	ldr	r2, [r6, #0]
 800533e:	f04f 0600 	mov.w	r6, #0
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	bf08      	it	eq
 8005346:	1aad      	subeq	r5, r5, r2
 8005348:	6922      	ldr	r2, [r4, #16]
 800534a:	bf08      	it	eq
 800534c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005350:	4293      	cmp	r3, r2
 8005352:	bfc4      	itt	gt
 8005354:	1a9b      	subgt	r3, r3, r2
 8005356:	18ed      	addgt	r5, r5, r3
 8005358:	341a      	adds	r4, #26
 800535a:	42b5      	cmp	r5, r6
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xcc>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xac>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4649      	mov	r1, r9
 8005368:	4638      	mov	r0, r7
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xb0>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c4      	b.n	8005306 <_printf_common+0x3e>
 800537c:	2030      	movs	r0, #48	; 0x30
 800537e:	18e1      	adds	r1, r4, r3
 8005380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538a:	4422      	add	r2, r4
 800538c:	3302      	adds	r3, #2
 800538e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005392:	e7c5      	b.n	8005320 <_printf_common+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xa8>
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7d9      	b.n	800535a <_printf_common+0x92>
	...

080053a8 <_printf_i>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	460c      	mov	r4, r1
 80053ae:	7e27      	ldrb	r7, [r4, #24]
 80053b0:	4691      	mov	r9, r2
 80053b2:	2f78      	cmp	r7, #120	; 0x78
 80053b4:	4680      	mov	r8, r0
 80053b6:	469a      	mov	sl, r3
 80053b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053be:	d807      	bhi.n	80053d0 <_printf_i+0x28>
 80053c0:	2f62      	cmp	r7, #98	; 0x62
 80053c2:	d80a      	bhi.n	80053da <_printf_i+0x32>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f000 80d9 	beq.w	800557c <_printf_i+0x1d4>
 80053ca:	2f58      	cmp	r7, #88	; 0x58
 80053cc:	f000 80a4 	beq.w	8005518 <_printf_i+0x170>
 80053d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d8:	e03a      	b.n	8005450 <_printf_i+0xa8>
 80053da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053de:	2b15      	cmp	r3, #21
 80053e0:	d8f6      	bhi.n	80053d0 <_printf_i+0x28>
 80053e2:	a001      	add	r0, pc, #4	; (adr r0, 80053e8 <_printf_i+0x40>)
 80053e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005455 	.word	0x08005455
 80053f0:	080053d1 	.word	0x080053d1
 80053f4:	080053d1 	.word	0x080053d1
 80053f8:	080053d1 	.word	0x080053d1
 80053fc:	080053d1 	.word	0x080053d1
 8005400:	08005455 	.word	0x08005455
 8005404:	080053d1 	.word	0x080053d1
 8005408:	080053d1 	.word	0x080053d1
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	08005563 	.word	0x08005563
 8005418:	08005485 	.word	0x08005485
 800541c:	08005545 	.word	0x08005545
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	08005585 	.word	0x08005585
 800542c:	080053d1 	.word	0x080053d1
 8005430:	08005485 	.word	0x08005485
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	0800554d 	.word	0x0800554d
 8005440:	680b      	ldr	r3, [r1, #0]
 8005442:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005446:	1d1a      	adds	r2, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	600a      	str	r2, [r1, #0]
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005450:	2301      	movs	r3, #1
 8005452:	e0a4      	b.n	800559e <_printf_i+0x1f6>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	6808      	ldr	r0, [r1, #0]
 8005458:	062e      	lsls	r6, r5, #24
 800545a:	f100 0304 	add.w	r3, r0, #4
 800545e:	d50a      	bpl.n	8005476 <_printf_i+0xce>
 8005460:	6805      	ldr	r5, [r0, #0]
 8005462:	600b      	str	r3, [r1, #0]
 8005464:	2d00      	cmp	r5, #0
 8005466:	da03      	bge.n	8005470 <_printf_i+0xc8>
 8005468:	232d      	movs	r3, #45	; 0x2d
 800546a:	426d      	negs	r5, r5
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	230a      	movs	r3, #10
 8005472:	485e      	ldr	r0, [pc, #376]	; (80055ec <_printf_i+0x244>)
 8005474:	e019      	b.n	80054aa <_printf_i+0x102>
 8005476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800547a:	6805      	ldr	r5, [r0, #0]
 800547c:	600b      	str	r3, [r1, #0]
 800547e:	bf18      	it	ne
 8005480:	b22d      	sxthne	r5, r5
 8005482:	e7ef      	b.n	8005464 <_printf_i+0xbc>
 8005484:	680b      	ldr	r3, [r1, #0]
 8005486:	6825      	ldr	r5, [r4, #0]
 8005488:	1d18      	adds	r0, r3, #4
 800548a:	6008      	str	r0, [r1, #0]
 800548c:	0628      	lsls	r0, r5, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xec>
 8005490:	681d      	ldr	r5, [r3, #0]
 8005492:	e002      	b.n	800549a <_printf_i+0xf2>
 8005494:	0669      	lsls	r1, r5, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xe8>
 8005498:	881d      	ldrh	r5, [r3, #0]
 800549a:	2f6f      	cmp	r7, #111	; 0x6f
 800549c:	bf0c      	ite	eq
 800549e:	2308      	moveq	r3, #8
 80054a0:	230a      	movne	r3, #10
 80054a2:	4852      	ldr	r0, [pc, #328]	; (80055ec <_printf_i+0x244>)
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054aa:	6866      	ldr	r6, [r4, #4]
 80054ac:	2e00      	cmp	r6, #0
 80054ae:	bfa8      	it	ge
 80054b0:	6821      	ldrge	r1, [r4, #0]
 80054b2:	60a6      	str	r6, [r4, #8]
 80054b4:	bfa4      	itt	ge
 80054b6:	f021 0104 	bicge.w	r1, r1, #4
 80054ba:	6021      	strge	r1, [r4, #0]
 80054bc:	b90d      	cbnz	r5, 80054c2 <_printf_i+0x11a>
 80054be:	2e00      	cmp	r6, #0
 80054c0:	d04d      	beq.n	800555e <_printf_i+0x1b6>
 80054c2:	4616      	mov	r6, r2
 80054c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80054c8:	fb03 5711 	mls	r7, r3, r1, r5
 80054cc:	5dc7      	ldrb	r7, [r0, r7]
 80054ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054d2:	462f      	mov	r7, r5
 80054d4:	42bb      	cmp	r3, r7
 80054d6:	460d      	mov	r5, r1
 80054d8:	d9f4      	bls.n	80054c4 <_printf_i+0x11c>
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d10b      	bne.n	80054f6 <_printf_i+0x14e>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	07df      	lsls	r7, r3, #31
 80054e2:	d508      	bpl.n	80054f6 <_printf_i+0x14e>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	6861      	ldr	r1, [r4, #4]
 80054e8:	4299      	cmp	r1, r3
 80054ea:	bfde      	ittt	le
 80054ec:	2330      	movle	r3, #48	; 0x30
 80054ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054f6:	1b92      	subs	r2, r2, r6
 80054f8:	6122      	str	r2, [r4, #16]
 80054fa:	464b      	mov	r3, r9
 80054fc:	4621      	mov	r1, r4
 80054fe:	4640      	mov	r0, r8
 8005500:	f8cd a000 	str.w	sl, [sp]
 8005504:	aa03      	add	r2, sp, #12
 8005506:	f7ff fedf 	bl	80052c8 <_printf_common>
 800550a:	3001      	adds	r0, #1
 800550c:	d14c      	bne.n	80055a8 <_printf_i+0x200>
 800550e:	f04f 30ff 	mov.w	r0, #4294967295
 8005512:	b004      	add	sp, #16
 8005514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005518:	4834      	ldr	r0, [pc, #208]	; (80055ec <_printf_i+0x244>)
 800551a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800551e:	680e      	ldr	r6, [r1, #0]
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	f856 5b04 	ldr.w	r5, [r6], #4
 8005526:	061f      	lsls	r7, r3, #24
 8005528:	600e      	str	r6, [r1, #0]
 800552a:	d514      	bpl.n	8005556 <_printf_i+0x1ae>
 800552c:	07d9      	lsls	r1, r3, #31
 800552e:	bf44      	itt	mi
 8005530:	f043 0320 	orrmi.w	r3, r3, #32
 8005534:	6023      	strmi	r3, [r4, #0]
 8005536:	b91d      	cbnz	r5, 8005540 <_printf_i+0x198>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	f023 0320 	bic.w	r3, r3, #32
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	2310      	movs	r3, #16
 8005542:	e7af      	b.n	80054a4 <_printf_i+0xfc>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	f043 0320 	orr.w	r3, r3, #32
 800554a:	6023      	str	r3, [r4, #0]
 800554c:	2378      	movs	r3, #120	; 0x78
 800554e:	4828      	ldr	r0, [pc, #160]	; (80055f0 <_printf_i+0x248>)
 8005550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005554:	e7e3      	b.n	800551e <_printf_i+0x176>
 8005556:	065e      	lsls	r6, r3, #25
 8005558:	bf48      	it	mi
 800555a:	b2ad      	uxthmi	r5, r5
 800555c:	e7e6      	b.n	800552c <_printf_i+0x184>
 800555e:	4616      	mov	r6, r2
 8005560:	e7bb      	b.n	80054da <_printf_i+0x132>
 8005562:	680b      	ldr	r3, [r1, #0]
 8005564:	6826      	ldr	r6, [r4, #0]
 8005566:	1d1d      	adds	r5, r3, #4
 8005568:	6960      	ldr	r0, [r4, #20]
 800556a:	600d      	str	r5, [r1, #0]
 800556c:	0635      	lsls	r5, r6, #24
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	d501      	bpl.n	8005576 <_printf_i+0x1ce>
 8005572:	6018      	str	r0, [r3, #0]
 8005574:	e002      	b.n	800557c <_printf_i+0x1d4>
 8005576:	0671      	lsls	r1, r6, #25
 8005578:	d5fb      	bpl.n	8005572 <_printf_i+0x1ca>
 800557a:	8018      	strh	r0, [r3, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	4616      	mov	r6, r2
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	e7ba      	b.n	80054fa <_printf_i+0x152>
 8005584:	680b      	ldr	r3, [r1, #0]
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	600a      	str	r2, [r1, #0]
 800558a:	681e      	ldr	r6, [r3, #0]
 800558c:	2100      	movs	r1, #0
 800558e:	4630      	mov	r0, r6
 8005590:	6862      	ldr	r2, [r4, #4]
 8005592:	f000 fb3b 	bl	8005c0c <memchr>
 8005596:	b108      	cbz	r0, 800559c <_printf_i+0x1f4>
 8005598:	1b80      	subs	r0, r0, r6
 800559a:	6060      	str	r0, [r4, #4]
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	6123      	str	r3, [r4, #16]
 80055a0:	2300      	movs	r3, #0
 80055a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a6:	e7a8      	b.n	80054fa <_printf_i+0x152>
 80055a8:	4632      	mov	r2, r6
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	47d0      	blx	sl
 80055b2:	3001      	adds	r0, #1
 80055b4:	d0ab      	beq.n	800550e <_printf_i+0x166>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	079b      	lsls	r3, r3, #30
 80055ba:	d413      	bmi.n	80055e4 <_printf_i+0x23c>
 80055bc:	68e0      	ldr	r0, [r4, #12]
 80055be:	9b03      	ldr	r3, [sp, #12]
 80055c0:	4298      	cmp	r0, r3
 80055c2:	bfb8      	it	lt
 80055c4:	4618      	movlt	r0, r3
 80055c6:	e7a4      	b.n	8005512 <_printf_i+0x16a>
 80055c8:	2301      	movs	r3, #1
 80055ca:	4632      	mov	r2, r6
 80055cc:	4649      	mov	r1, r9
 80055ce:	4640      	mov	r0, r8
 80055d0:	47d0      	blx	sl
 80055d2:	3001      	adds	r0, #1
 80055d4:	d09b      	beq.n	800550e <_printf_i+0x166>
 80055d6:	3501      	adds	r5, #1
 80055d8:	68e3      	ldr	r3, [r4, #12]
 80055da:	9903      	ldr	r1, [sp, #12]
 80055dc:	1a5b      	subs	r3, r3, r1
 80055de:	42ab      	cmp	r3, r5
 80055e0:	dcf2      	bgt.n	80055c8 <_printf_i+0x220>
 80055e2:	e7eb      	b.n	80055bc <_printf_i+0x214>
 80055e4:	2500      	movs	r5, #0
 80055e6:	f104 0619 	add.w	r6, r4, #25
 80055ea:	e7f5      	b.n	80055d8 <_printf_i+0x230>
 80055ec:	08006265 	.word	0x08006265
 80055f0:	08006276 	.word	0x08006276

080055f4 <nan>:
 80055f4:	2000      	movs	r0, #0
 80055f6:	4901      	ldr	r1, [pc, #4]	; (80055fc <nan+0x8>)
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	7ff80000 	.word	0x7ff80000

08005600 <strncmp>:
 8005600:	b510      	push	{r4, lr}
 8005602:	b16a      	cbz	r2, 8005620 <strncmp+0x20>
 8005604:	3901      	subs	r1, #1
 8005606:	1884      	adds	r4, r0, r2
 8005608:	f810 3b01 	ldrb.w	r3, [r0], #1
 800560c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005610:	4293      	cmp	r3, r2
 8005612:	d103      	bne.n	800561c <strncmp+0x1c>
 8005614:	42a0      	cmp	r0, r4
 8005616:	d001      	beq.n	800561c <strncmp+0x1c>
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1f5      	bne.n	8005608 <strncmp+0x8>
 800561c:	1a98      	subs	r0, r3, r2
 800561e:	bd10      	pop	{r4, pc}
 8005620:	4610      	mov	r0, r2
 8005622:	e7fc      	b.n	800561e <strncmp+0x1e>

08005624 <__swbuf_r>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	460e      	mov	r6, r1
 8005628:	4614      	mov	r4, r2
 800562a:	4605      	mov	r5, r0
 800562c:	b118      	cbz	r0, 8005636 <__swbuf_r+0x12>
 800562e:	6983      	ldr	r3, [r0, #24]
 8005630:	b90b      	cbnz	r3, 8005636 <__swbuf_r+0x12>
 8005632:	f000 f9e7 	bl	8005a04 <__sinit>
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <__swbuf_r+0x98>)
 8005638:	429c      	cmp	r4, r3
 800563a:	d12b      	bne.n	8005694 <__swbuf_r+0x70>
 800563c:	686c      	ldr	r4, [r5, #4]
 800563e:	69a3      	ldr	r3, [r4, #24]
 8005640:	60a3      	str	r3, [r4, #8]
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	071a      	lsls	r2, r3, #28
 8005646:	d52f      	bpl.n	80056a8 <__swbuf_r+0x84>
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	b36b      	cbz	r3, 80056a8 <__swbuf_r+0x84>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	6820      	ldr	r0, [r4, #0]
 8005650:	b2f6      	uxtb	r6, r6
 8005652:	1ac0      	subs	r0, r0, r3
 8005654:	6963      	ldr	r3, [r4, #20]
 8005656:	4637      	mov	r7, r6
 8005658:	4283      	cmp	r3, r0
 800565a:	dc04      	bgt.n	8005666 <__swbuf_r+0x42>
 800565c:	4621      	mov	r1, r4
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f93c 	bl	80058dc <_fflush_r>
 8005664:	bb30      	cbnz	r0, 80056b4 <__swbuf_r+0x90>
 8005666:	68a3      	ldr	r3, [r4, #8]
 8005668:	3001      	adds	r0, #1
 800566a:	3b01      	subs	r3, #1
 800566c:	60a3      	str	r3, [r4, #8]
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	701e      	strb	r6, [r3, #0]
 8005676:	6963      	ldr	r3, [r4, #20]
 8005678:	4283      	cmp	r3, r0
 800567a:	d004      	beq.n	8005686 <__swbuf_r+0x62>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	07db      	lsls	r3, r3, #31
 8005680:	d506      	bpl.n	8005690 <__swbuf_r+0x6c>
 8005682:	2e0a      	cmp	r6, #10
 8005684:	d104      	bne.n	8005690 <__swbuf_r+0x6c>
 8005686:	4621      	mov	r1, r4
 8005688:	4628      	mov	r0, r5
 800568a:	f000 f927 	bl	80058dc <_fflush_r>
 800568e:	b988      	cbnz	r0, 80056b4 <__swbuf_r+0x90>
 8005690:	4638      	mov	r0, r7
 8005692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005694:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <__swbuf_r+0x9c>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d101      	bne.n	800569e <__swbuf_r+0x7a>
 800569a:	68ac      	ldr	r4, [r5, #8]
 800569c:	e7cf      	b.n	800563e <__swbuf_r+0x1a>
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <__swbuf_r+0xa0>)
 80056a0:	429c      	cmp	r4, r3
 80056a2:	bf08      	it	eq
 80056a4:	68ec      	ldreq	r4, [r5, #12]
 80056a6:	e7ca      	b.n	800563e <__swbuf_r+0x1a>
 80056a8:	4621      	mov	r1, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f81a 	bl	80056e4 <__swsetup_r>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d0cb      	beq.n	800564c <__swbuf_r+0x28>
 80056b4:	f04f 37ff 	mov.w	r7, #4294967295
 80056b8:	e7ea      	b.n	8005690 <__swbuf_r+0x6c>
 80056ba:	bf00      	nop
 80056bc:	080063a8 	.word	0x080063a8
 80056c0:	080063c8 	.word	0x080063c8
 80056c4:	08006388 	.word	0x08006388

080056c8 <__ascii_wctomb>:
 80056c8:	4603      	mov	r3, r0
 80056ca:	4608      	mov	r0, r1
 80056cc:	b141      	cbz	r1, 80056e0 <__ascii_wctomb+0x18>
 80056ce:	2aff      	cmp	r2, #255	; 0xff
 80056d0:	d904      	bls.n	80056dc <__ascii_wctomb+0x14>
 80056d2:	228a      	movs	r2, #138	; 0x8a
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	4770      	bx	lr
 80056dc:	2001      	movs	r0, #1
 80056de:	700a      	strb	r2, [r1, #0]
 80056e0:	4770      	bx	lr
	...

080056e4 <__swsetup_r>:
 80056e4:	4b32      	ldr	r3, [pc, #200]	; (80057b0 <__swsetup_r+0xcc>)
 80056e6:	b570      	push	{r4, r5, r6, lr}
 80056e8:	681d      	ldr	r5, [r3, #0]
 80056ea:	4606      	mov	r6, r0
 80056ec:	460c      	mov	r4, r1
 80056ee:	b125      	cbz	r5, 80056fa <__swsetup_r+0x16>
 80056f0:	69ab      	ldr	r3, [r5, #24]
 80056f2:	b913      	cbnz	r3, 80056fa <__swsetup_r+0x16>
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 f985 	bl	8005a04 <__sinit>
 80056fa:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <__swsetup_r+0xd0>)
 80056fc:	429c      	cmp	r4, r3
 80056fe:	d10f      	bne.n	8005720 <__swsetup_r+0x3c>
 8005700:	686c      	ldr	r4, [r5, #4]
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005708:	0719      	lsls	r1, r3, #28
 800570a:	d42c      	bmi.n	8005766 <__swsetup_r+0x82>
 800570c:	06dd      	lsls	r5, r3, #27
 800570e:	d411      	bmi.n	8005734 <__swsetup_r+0x50>
 8005710:	2309      	movs	r3, #9
 8005712:	6033      	str	r3, [r6, #0]
 8005714:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005718:	f04f 30ff 	mov.w	r0, #4294967295
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	e03e      	b.n	800579e <__swsetup_r+0xba>
 8005720:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <__swsetup_r+0xd4>)
 8005722:	429c      	cmp	r4, r3
 8005724:	d101      	bne.n	800572a <__swsetup_r+0x46>
 8005726:	68ac      	ldr	r4, [r5, #8]
 8005728:	e7eb      	b.n	8005702 <__swsetup_r+0x1e>
 800572a:	4b24      	ldr	r3, [pc, #144]	; (80057bc <__swsetup_r+0xd8>)
 800572c:	429c      	cmp	r4, r3
 800572e:	bf08      	it	eq
 8005730:	68ec      	ldreq	r4, [r5, #12]
 8005732:	e7e6      	b.n	8005702 <__swsetup_r+0x1e>
 8005734:	0758      	lsls	r0, r3, #29
 8005736:	d512      	bpl.n	800575e <__swsetup_r+0x7a>
 8005738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800573a:	b141      	cbz	r1, 800574e <__swsetup_r+0x6a>
 800573c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005740:	4299      	cmp	r1, r3
 8005742:	d002      	beq.n	800574a <__swsetup_r+0x66>
 8005744:	4630      	mov	r0, r6
 8005746:	f7fd fca3 	bl	8003090 <_free_r>
 800574a:	2300      	movs	r3, #0
 800574c:	6363      	str	r3, [r4, #52]	; 0x34
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	2300      	movs	r3, #0
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	6023      	str	r3, [r4, #0]
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f043 0308 	orr.w	r3, r3, #8
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	6923      	ldr	r3, [r4, #16]
 8005768:	b94b      	cbnz	r3, 800577e <__swsetup_r+0x9a>
 800576a:	89a3      	ldrh	r3, [r4, #12]
 800576c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005774:	d003      	beq.n	800577e <__swsetup_r+0x9a>
 8005776:	4621      	mov	r1, r4
 8005778:	4630      	mov	r0, r6
 800577a:	f000 fa07 	bl	8005b8c <__smakebuf_r>
 800577e:	89a0      	ldrh	r0, [r4, #12]
 8005780:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005784:	f010 0301 	ands.w	r3, r0, #1
 8005788:	d00a      	beq.n	80057a0 <__swsetup_r+0xbc>
 800578a:	2300      	movs	r3, #0
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6963      	ldr	r3, [r4, #20]
 8005790:	425b      	negs	r3, r3
 8005792:	61a3      	str	r3, [r4, #24]
 8005794:	6923      	ldr	r3, [r4, #16]
 8005796:	b943      	cbnz	r3, 80057aa <__swsetup_r+0xc6>
 8005798:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800579c:	d1ba      	bne.n	8005714 <__swsetup_r+0x30>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	0781      	lsls	r1, r0, #30
 80057a2:	bf58      	it	pl
 80057a4:	6963      	ldrpl	r3, [r4, #20]
 80057a6:	60a3      	str	r3, [r4, #8]
 80057a8:	e7f4      	b.n	8005794 <__swsetup_r+0xb0>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e7f7      	b.n	800579e <__swsetup_r+0xba>
 80057ae:	bf00      	nop
 80057b0:	2000000c 	.word	0x2000000c
 80057b4:	080063a8 	.word	0x080063a8
 80057b8:	080063c8 	.word	0x080063c8
 80057bc:	08006388 	.word	0x08006388

080057c0 <abort>:
 80057c0:	2006      	movs	r0, #6
 80057c2:	b508      	push	{r3, lr}
 80057c4:	f000 fa58 	bl	8005c78 <raise>
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7fb ff74 	bl	80016b6 <_exit>
	...

080057d0 <__sflush_r>:
 80057d0:	898a      	ldrh	r2, [r1, #12]
 80057d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	4605      	mov	r5, r0
 80057d8:	0710      	lsls	r0, r2, #28
 80057da:	460c      	mov	r4, r1
 80057dc:	d458      	bmi.n	8005890 <__sflush_r+0xc0>
 80057de:	684b      	ldr	r3, [r1, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	dc05      	bgt.n	80057f0 <__sflush_r+0x20>
 80057e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	dc02      	bgt.n	80057f0 <__sflush_r+0x20>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d0f9      	beq.n	80057ea <__sflush_r+0x1a>
 80057f6:	2300      	movs	r3, #0
 80057f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057fc:	682f      	ldr	r7, [r5, #0]
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	d032      	beq.n	8005868 <__sflush_r+0x98>
 8005802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005804:	89a3      	ldrh	r3, [r4, #12]
 8005806:	075a      	lsls	r2, r3, #29
 8005808:	d505      	bpl.n	8005816 <__sflush_r+0x46>
 800580a:	6863      	ldr	r3, [r4, #4]
 800580c:	1ac0      	subs	r0, r0, r3
 800580e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005810:	b10b      	cbz	r3, 8005816 <__sflush_r+0x46>
 8005812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005814:	1ac0      	subs	r0, r0, r3
 8005816:	2300      	movs	r3, #0
 8005818:	4602      	mov	r2, r0
 800581a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800581c:	4628      	mov	r0, r5
 800581e:	6a21      	ldr	r1, [r4, #32]
 8005820:	47b0      	blx	r6
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	d106      	bne.n	8005836 <__sflush_r+0x66>
 8005828:	6829      	ldr	r1, [r5, #0]
 800582a:	291d      	cmp	r1, #29
 800582c:	d82c      	bhi.n	8005888 <__sflush_r+0xb8>
 800582e:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <__sflush_r+0x108>)
 8005830:	40ca      	lsrs	r2, r1
 8005832:	07d6      	lsls	r6, r2, #31
 8005834:	d528      	bpl.n	8005888 <__sflush_r+0xb8>
 8005836:	2200      	movs	r2, #0
 8005838:	6062      	str	r2, [r4, #4]
 800583a:	6922      	ldr	r2, [r4, #16]
 800583c:	04d9      	lsls	r1, r3, #19
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	d504      	bpl.n	800584c <__sflush_r+0x7c>
 8005842:	1c42      	adds	r2, r0, #1
 8005844:	d101      	bne.n	800584a <__sflush_r+0x7a>
 8005846:	682b      	ldr	r3, [r5, #0]
 8005848:	b903      	cbnz	r3, 800584c <__sflush_r+0x7c>
 800584a:	6560      	str	r0, [r4, #84]	; 0x54
 800584c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584e:	602f      	str	r7, [r5, #0]
 8005850:	2900      	cmp	r1, #0
 8005852:	d0ca      	beq.n	80057ea <__sflush_r+0x1a>
 8005854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005858:	4299      	cmp	r1, r3
 800585a:	d002      	beq.n	8005862 <__sflush_r+0x92>
 800585c:	4628      	mov	r0, r5
 800585e:	f7fd fc17 	bl	8003090 <_free_r>
 8005862:	2000      	movs	r0, #0
 8005864:	6360      	str	r0, [r4, #52]	; 0x34
 8005866:	e7c1      	b.n	80057ec <__sflush_r+0x1c>
 8005868:	6a21      	ldr	r1, [r4, #32]
 800586a:	2301      	movs	r3, #1
 800586c:	4628      	mov	r0, r5
 800586e:	47b0      	blx	r6
 8005870:	1c41      	adds	r1, r0, #1
 8005872:	d1c7      	bne.n	8005804 <__sflush_r+0x34>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0c4      	beq.n	8005804 <__sflush_r+0x34>
 800587a:	2b1d      	cmp	r3, #29
 800587c:	d001      	beq.n	8005882 <__sflush_r+0xb2>
 800587e:	2b16      	cmp	r3, #22
 8005880:	d101      	bne.n	8005886 <__sflush_r+0xb6>
 8005882:	602f      	str	r7, [r5, #0]
 8005884:	e7b1      	b.n	80057ea <__sflush_r+0x1a>
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7ad      	b.n	80057ec <__sflush_r+0x1c>
 8005890:	690f      	ldr	r7, [r1, #16]
 8005892:	2f00      	cmp	r7, #0
 8005894:	d0a9      	beq.n	80057ea <__sflush_r+0x1a>
 8005896:	0793      	lsls	r3, r2, #30
 8005898:	bf18      	it	ne
 800589a:	2300      	movne	r3, #0
 800589c:	680e      	ldr	r6, [r1, #0]
 800589e:	bf08      	it	eq
 80058a0:	694b      	ldreq	r3, [r1, #20]
 80058a2:	eba6 0807 	sub.w	r8, r6, r7
 80058a6:	600f      	str	r7, [r1, #0]
 80058a8:	608b      	str	r3, [r1, #8]
 80058aa:	f1b8 0f00 	cmp.w	r8, #0
 80058ae:	dd9c      	ble.n	80057ea <__sflush_r+0x1a>
 80058b0:	4643      	mov	r3, r8
 80058b2:	463a      	mov	r2, r7
 80058b4:	4628      	mov	r0, r5
 80058b6:	6a21      	ldr	r1, [r4, #32]
 80058b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058ba:	47b0      	blx	r6
 80058bc:	2800      	cmp	r0, #0
 80058be:	dc06      	bgt.n	80058ce <__sflush_r+0xfe>
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f04f 30ff 	mov.w	r0, #4294967295
 80058c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ca:	81a3      	strh	r3, [r4, #12]
 80058cc:	e78e      	b.n	80057ec <__sflush_r+0x1c>
 80058ce:	4407      	add	r7, r0
 80058d0:	eba8 0800 	sub.w	r8, r8, r0
 80058d4:	e7e9      	b.n	80058aa <__sflush_r+0xda>
 80058d6:	bf00      	nop
 80058d8:	20400001 	.word	0x20400001

080058dc <_fflush_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	4605      	mov	r5, r0
 80058e2:	460c      	mov	r4, r1
 80058e4:	b913      	cbnz	r3, 80058ec <_fflush_r+0x10>
 80058e6:	2500      	movs	r5, #0
 80058e8:	4628      	mov	r0, r5
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	b118      	cbz	r0, 80058f6 <_fflush_r+0x1a>
 80058ee:	6983      	ldr	r3, [r0, #24]
 80058f0:	b90b      	cbnz	r3, 80058f6 <_fflush_r+0x1a>
 80058f2:	f000 f887 	bl	8005a04 <__sinit>
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <_fflush_r+0x6c>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	d11b      	bne.n	8005934 <_fflush_r+0x58>
 80058fc:	686c      	ldr	r4, [r5, #4]
 80058fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0ef      	beq.n	80058e6 <_fflush_r+0xa>
 8005906:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005908:	07d0      	lsls	r0, r2, #31
 800590a:	d404      	bmi.n	8005916 <_fflush_r+0x3a>
 800590c:	0599      	lsls	r1, r3, #22
 800590e:	d402      	bmi.n	8005916 <_fflush_r+0x3a>
 8005910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005912:	f000 f915 	bl	8005b40 <__retarget_lock_acquire_recursive>
 8005916:	4628      	mov	r0, r5
 8005918:	4621      	mov	r1, r4
 800591a:	f7ff ff59 	bl	80057d0 <__sflush_r>
 800591e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005920:	4605      	mov	r5, r0
 8005922:	07da      	lsls	r2, r3, #31
 8005924:	d4e0      	bmi.n	80058e8 <_fflush_r+0xc>
 8005926:	89a3      	ldrh	r3, [r4, #12]
 8005928:	059b      	lsls	r3, r3, #22
 800592a:	d4dd      	bmi.n	80058e8 <_fflush_r+0xc>
 800592c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800592e:	f000 f908 	bl	8005b42 <__retarget_lock_release_recursive>
 8005932:	e7d9      	b.n	80058e8 <_fflush_r+0xc>
 8005934:	4b05      	ldr	r3, [pc, #20]	; (800594c <_fflush_r+0x70>)
 8005936:	429c      	cmp	r4, r3
 8005938:	d101      	bne.n	800593e <_fflush_r+0x62>
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	e7df      	b.n	80058fe <_fflush_r+0x22>
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <_fflush_r+0x74>)
 8005940:	429c      	cmp	r4, r3
 8005942:	bf08      	it	eq
 8005944:	68ec      	ldreq	r4, [r5, #12]
 8005946:	e7da      	b.n	80058fe <_fflush_r+0x22>
 8005948:	080063a8 	.word	0x080063a8
 800594c:	080063c8 	.word	0x080063c8
 8005950:	08006388 	.word	0x08006388

08005954 <std>:
 8005954:	2300      	movs	r3, #0
 8005956:	b510      	push	{r4, lr}
 8005958:	4604      	mov	r4, r0
 800595a:	e9c0 3300 	strd	r3, r3, [r0]
 800595e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005962:	6083      	str	r3, [r0, #8]
 8005964:	8181      	strh	r1, [r0, #12]
 8005966:	6643      	str	r3, [r0, #100]	; 0x64
 8005968:	81c2      	strh	r2, [r0, #14]
 800596a:	6183      	str	r3, [r0, #24]
 800596c:	4619      	mov	r1, r3
 800596e:	2208      	movs	r2, #8
 8005970:	305c      	adds	r0, #92	; 0x5c
 8005972:	f7fd fb85 	bl	8003080 <memset>
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <std+0x38>)
 8005978:	6224      	str	r4, [r4, #32]
 800597a:	6263      	str	r3, [r4, #36]	; 0x24
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <std+0x3c>)
 800597e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <std+0x40>)
 8005982:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005984:	4b04      	ldr	r3, [pc, #16]	; (8005998 <std+0x44>)
 8005986:	6323      	str	r3, [r4, #48]	; 0x30
 8005988:	bd10      	pop	{r4, pc}
 800598a:	bf00      	nop
 800598c:	08005cb1 	.word	0x08005cb1
 8005990:	08005cd3 	.word	0x08005cd3
 8005994:	08005d0b 	.word	0x08005d0b
 8005998:	08005d2f 	.word	0x08005d2f

0800599c <_cleanup_r>:
 800599c:	4901      	ldr	r1, [pc, #4]	; (80059a4 <_cleanup_r+0x8>)
 800599e:	f000 b8af 	b.w	8005b00 <_fwalk_reent>
 80059a2:	bf00      	nop
 80059a4:	080058dd 	.word	0x080058dd

080059a8 <__sfmoreglue>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	2568      	movs	r5, #104	; 0x68
 80059ac:	1e4a      	subs	r2, r1, #1
 80059ae:	4355      	muls	r5, r2
 80059b0:	460e      	mov	r6, r1
 80059b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059b6:	f7fd fbb7 	bl	8003128 <_malloc_r>
 80059ba:	4604      	mov	r4, r0
 80059bc:	b140      	cbz	r0, 80059d0 <__sfmoreglue+0x28>
 80059be:	2100      	movs	r1, #0
 80059c0:	e9c0 1600 	strd	r1, r6, [r0]
 80059c4:	300c      	adds	r0, #12
 80059c6:	60a0      	str	r0, [r4, #8]
 80059c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059cc:	f7fd fb58 	bl	8003080 <memset>
 80059d0:	4620      	mov	r0, r4
 80059d2:	bd70      	pop	{r4, r5, r6, pc}

080059d4 <__sfp_lock_acquire>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__sfp_lock_acquire+0x8>)
 80059d6:	f000 b8b3 	b.w	8005b40 <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	200002f8 	.word	0x200002f8

080059e0 <__sfp_lock_release>:
 80059e0:	4801      	ldr	r0, [pc, #4]	; (80059e8 <__sfp_lock_release+0x8>)
 80059e2:	f000 b8ae 	b.w	8005b42 <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	200002f8 	.word	0x200002f8

080059ec <__sinit_lock_acquire>:
 80059ec:	4801      	ldr	r0, [pc, #4]	; (80059f4 <__sinit_lock_acquire+0x8>)
 80059ee:	f000 b8a7 	b.w	8005b40 <__retarget_lock_acquire_recursive>
 80059f2:	bf00      	nop
 80059f4:	200002f3 	.word	0x200002f3

080059f8 <__sinit_lock_release>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__sinit_lock_release+0x8>)
 80059fa:	f000 b8a2 	b.w	8005b42 <__retarget_lock_release_recursive>
 80059fe:	bf00      	nop
 8005a00:	200002f3 	.word	0x200002f3

08005a04 <__sinit>:
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4604      	mov	r4, r0
 8005a08:	f7ff fff0 	bl	80059ec <__sinit_lock_acquire>
 8005a0c:	69a3      	ldr	r3, [r4, #24]
 8005a0e:	b11b      	cbz	r3, 8005a18 <__sinit+0x14>
 8005a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a14:	f7ff bff0 	b.w	80059f8 <__sinit_lock_release>
 8005a18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <__sinit+0x68>)
 8005a20:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <__sinit+0x6c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a26:	42a3      	cmp	r3, r4
 8005a28:	bf08      	it	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	bf08      	it	eq
 8005a30:	61a3      	streq	r3, [r4, #24]
 8005a32:	f000 f81f 	bl	8005a74 <__sfp>
 8005a36:	6060      	str	r0, [r4, #4]
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f000 f81b 	bl	8005a74 <__sfp>
 8005a3e:	60a0      	str	r0, [r4, #8]
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 f817 	bl	8005a74 <__sfp>
 8005a46:	2200      	movs	r2, #0
 8005a48:	2104      	movs	r1, #4
 8005a4a:	60e0      	str	r0, [r4, #12]
 8005a4c:	6860      	ldr	r0, [r4, #4]
 8005a4e:	f7ff ff81 	bl	8005954 <std>
 8005a52:	2201      	movs	r2, #1
 8005a54:	2109      	movs	r1, #9
 8005a56:	68a0      	ldr	r0, [r4, #8]
 8005a58:	f7ff ff7c 	bl	8005954 <std>
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	2112      	movs	r1, #18
 8005a60:	68e0      	ldr	r0, [r4, #12]
 8005a62:	f7ff ff77 	bl	8005954 <std>
 8005a66:	2301      	movs	r3, #1
 8005a68:	61a3      	str	r3, [r4, #24]
 8005a6a:	e7d1      	b.n	8005a10 <__sinit+0xc>
 8005a6c:	08005f4c 	.word	0x08005f4c
 8005a70:	0800599d 	.word	0x0800599d

08005a74 <__sfp>:
 8005a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a76:	4607      	mov	r7, r0
 8005a78:	f7ff ffac 	bl	80059d4 <__sfp_lock_acquire>
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <__sfp+0x84>)
 8005a7e:	681e      	ldr	r6, [r3, #0]
 8005a80:	69b3      	ldr	r3, [r6, #24]
 8005a82:	b913      	cbnz	r3, 8005a8a <__sfp+0x16>
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff ffbd 	bl	8005a04 <__sinit>
 8005a8a:	3648      	adds	r6, #72	; 0x48
 8005a8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	d503      	bpl.n	8005a9c <__sfp+0x28>
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	b30b      	cbz	r3, 8005adc <__sfp+0x68>
 8005a98:	6836      	ldr	r6, [r6, #0]
 8005a9a:	e7f7      	b.n	8005a8c <__sfp+0x18>
 8005a9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005aa0:	b9d5      	cbnz	r5, 8005ad8 <__sfp+0x64>
 8005aa2:	4b16      	ldr	r3, [pc, #88]	; (8005afc <__sfp+0x88>)
 8005aa4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005aa8:	60e3      	str	r3, [r4, #12]
 8005aaa:	6665      	str	r5, [r4, #100]	; 0x64
 8005aac:	f000 f847 	bl	8005b3e <__retarget_lock_init_recursive>
 8005ab0:	f7ff ff96 	bl	80059e0 <__sfp_lock_release>
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005abc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ac0:	6025      	str	r5, [r4, #0]
 8005ac2:	61a5      	str	r5, [r4, #24]
 8005ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ac8:	f7fd fada 	bl	8003080 <memset>
 8005acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad8:	3468      	adds	r4, #104	; 0x68
 8005ada:	e7d9      	b.n	8005a90 <__sfp+0x1c>
 8005adc:	2104      	movs	r1, #4
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f7ff ff62 	bl	80059a8 <__sfmoreglue>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	6030      	str	r0, [r6, #0]
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d1d5      	bne.n	8005a98 <__sfp+0x24>
 8005aec:	f7ff ff78 	bl	80059e0 <__sfp_lock_release>
 8005af0:	230c      	movs	r3, #12
 8005af2:	603b      	str	r3, [r7, #0]
 8005af4:	e7ee      	b.n	8005ad4 <__sfp+0x60>
 8005af6:	bf00      	nop
 8005af8:	08005f4c 	.word	0x08005f4c
 8005afc:	ffff0001 	.word	0xffff0001

08005b00 <_fwalk_reent>:
 8005b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b04:	4606      	mov	r6, r0
 8005b06:	4688      	mov	r8, r1
 8005b08:	2700      	movs	r7, #0
 8005b0a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b12:	f1b9 0901 	subs.w	r9, r9, #1
 8005b16:	d505      	bpl.n	8005b24 <_fwalk_reent+0x24>
 8005b18:	6824      	ldr	r4, [r4, #0]
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	d1f7      	bne.n	8005b0e <_fwalk_reent+0xe>
 8005b1e:	4638      	mov	r0, r7
 8005b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b24:	89ab      	ldrh	r3, [r5, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d907      	bls.n	8005b3a <_fwalk_reent+0x3a>
 8005b2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	d003      	beq.n	8005b3a <_fwalk_reent+0x3a>
 8005b32:	4629      	mov	r1, r5
 8005b34:	4630      	mov	r0, r6
 8005b36:	47c0      	blx	r8
 8005b38:	4307      	orrs	r7, r0
 8005b3a:	3568      	adds	r5, #104	; 0x68
 8005b3c:	e7e9      	b.n	8005b12 <_fwalk_reent+0x12>

08005b3e <__retarget_lock_init_recursive>:
 8005b3e:	4770      	bx	lr

08005b40 <__retarget_lock_acquire_recursive>:
 8005b40:	4770      	bx	lr

08005b42 <__retarget_lock_release_recursive>:
 8005b42:	4770      	bx	lr

08005b44 <__swhatbuf_r>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	460e      	mov	r6, r1
 8005b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	461d      	mov	r5, r3
 8005b52:	b096      	sub	sp, #88	; 0x58
 8005b54:	da07      	bge.n	8005b66 <__swhatbuf_r+0x22>
 8005b56:	2300      	movs	r3, #0
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	89b3      	ldrh	r3, [r6, #12]
 8005b5c:	061a      	lsls	r2, r3, #24
 8005b5e:	d410      	bmi.n	8005b82 <__swhatbuf_r+0x3e>
 8005b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b64:	e00e      	b.n	8005b84 <__swhatbuf_r+0x40>
 8005b66:	466a      	mov	r2, sp
 8005b68:	f000 f908 	bl	8005d7c <_fstat_r>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	dbf2      	blt.n	8005b56 <__swhatbuf_r+0x12>
 8005b70:	9a01      	ldr	r2, [sp, #4]
 8005b72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b7a:	425a      	negs	r2, r3
 8005b7c:	415a      	adcs	r2, r3
 8005b7e:	602a      	str	r2, [r5, #0]
 8005b80:	e7ee      	b.n	8005b60 <__swhatbuf_r+0x1c>
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	2000      	movs	r0, #0
 8005b86:	6023      	str	r3, [r4, #0]
 8005b88:	b016      	add	sp, #88	; 0x58
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}

08005b8c <__smakebuf_r>:
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b90:	079d      	lsls	r5, r3, #30
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	d507      	bpl.n	8005ba8 <__smakebuf_r+0x1c>
 8005b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	6163      	str	r3, [r4, #20]
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd70      	pop	{r4, r5, r6, pc}
 8005ba8:	466a      	mov	r2, sp
 8005baa:	ab01      	add	r3, sp, #4
 8005bac:	f7ff ffca 	bl	8005b44 <__swhatbuf_r>
 8005bb0:	9900      	ldr	r1, [sp, #0]
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7fd fab7 	bl	8003128 <_malloc_r>
 8005bba:	b948      	cbnz	r0, 8005bd0 <__smakebuf_r+0x44>
 8005bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d4ef      	bmi.n	8005ba4 <__smakebuf_r+0x18>
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	e7e3      	b.n	8005b98 <__smakebuf_r+0xc>
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <__smakebuf_r+0x7c>)
 8005bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bdc:	81a3      	strh	r3, [r4, #12]
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	6120      	str	r0, [r4, #16]
 8005be2:	6163      	str	r3, [r4, #20]
 8005be4:	9b01      	ldr	r3, [sp, #4]
 8005be6:	b15b      	cbz	r3, 8005c00 <__smakebuf_r+0x74>
 8005be8:	4630      	mov	r0, r6
 8005bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bee:	f000 f8d7 	bl	8005da0 <_isatty_r>
 8005bf2:	b128      	cbz	r0, 8005c00 <__smakebuf_r+0x74>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	89a0      	ldrh	r0, [r4, #12]
 8005c02:	4305      	orrs	r5, r0
 8005c04:	81a5      	strh	r5, [r4, #12]
 8005c06:	e7cd      	b.n	8005ba4 <__smakebuf_r+0x18>
 8005c08:	0800599d 	.word	0x0800599d

08005c0c <memchr>:
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	b2c9      	uxtb	r1, r1
 8005c12:	4402      	add	r2, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	d101      	bne.n	8005c1e <memchr+0x12>
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e003      	b.n	8005c26 <memchr+0x1a>
 8005c1e:	7804      	ldrb	r4, [r0, #0]
 8005c20:	3301      	adds	r3, #1
 8005c22:	428c      	cmp	r4, r1
 8005c24:	d1f6      	bne.n	8005c14 <memchr+0x8>
 8005c26:	bd10      	pop	{r4, pc}

08005c28 <_raise_r>:
 8005c28:	291f      	cmp	r1, #31
 8005c2a:	b538      	push	{r3, r4, r5, lr}
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	460d      	mov	r5, r1
 8005c30:	d904      	bls.n	8005c3c <_raise_r+0x14>
 8005c32:	2316      	movs	r3, #22
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c3e:	b112      	cbz	r2, 8005c46 <_raise_r+0x1e>
 8005c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005c44:	b94b      	cbnz	r3, 8005c5a <_raise_r+0x32>
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f830 	bl	8005cac <_getpid_r>
 8005c4c:	462a      	mov	r2, r5
 8005c4e:	4601      	mov	r1, r0
 8005c50:	4620      	mov	r0, r4
 8005c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c56:	f000 b817 	b.w	8005c88 <_kill_r>
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d00a      	beq.n	8005c74 <_raise_r+0x4c>
 8005c5e:	1c59      	adds	r1, r3, #1
 8005c60:	d103      	bne.n	8005c6a <_raise_r+0x42>
 8005c62:	2316      	movs	r3, #22
 8005c64:	6003      	str	r3, [r0, #0]
 8005c66:	2001      	movs	r0, #1
 8005c68:	e7e7      	b.n	8005c3a <_raise_r+0x12>
 8005c6a:	2400      	movs	r4, #0
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005c72:	4798      	blx	r3
 8005c74:	2000      	movs	r0, #0
 8005c76:	e7e0      	b.n	8005c3a <_raise_r+0x12>

08005c78 <raise>:
 8005c78:	4b02      	ldr	r3, [pc, #8]	; (8005c84 <raise+0xc>)
 8005c7a:	4601      	mov	r1, r0
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	f7ff bfd3 	b.w	8005c28 <_raise_r>
 8005c82:	bf00      	nop
 8005c84:	2000000c 	.word	0x2000000c

08005c88 <_kill_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4d06      	ldr	r5, [pc, #24]	; (8005ca8 <_kill_r+0x20>)
 8005c8e:	4604      	mov	r4, r0
 8005c90:	4608      	mov	r0, r1
 8005c92:	4611      	mov	r1, r2
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	f7fb fcfe 	bl	8001696 <_kill>
 8005c9a:	1c43      	adds	r3, r0, #1
 8005c9c:	d102      	bne.n	8005ca4 <_kill_r+0x1c>
 8005c9e:	682b      	ldr	r3, [r5, #0]
 8005ca0:	b103      	cbz	r3, 8005ca4 <_kill_r+0x1c>
 8005ca2:	6023      	str	r3, [r4, #0]
 8005ca4:	bd38      	pop	{r3, r4, r5, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200002ec 	.word	0x200002ec

08005cac <_getpid_r>:
 8005cac:	f7fb bcec 	b.w	8001688 <_getpid>

08005cb0 <__sread>:
 8005cb0:	b510      	push	{r4, lr}
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb8:	f000 f894 	bl	8005de4 <_read_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	bfab      	itete	ge
 8005cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cc4:	181b      	addge	r3, r3, r0
 8005cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cca:	bfac      	ite	ge
 8005ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cce:	81a3      	strhlt	r3, [r4, #12]
 8005cd0:	bd10      	pop	{r4, pc}

08005cd2 <__swrite>:
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	461f      	mov	r7, r3
 8005cd8:	898b      	ldrh	r3, [r1, #12]
 8005cda:	4605      	mov	r5, r0
 8005cdc:	05db      	lsls	r3, r3, #23
 8005cde:	460c      	mov	r4, r1
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	d505      	bpl.n	8005cf0 <__swrite+0x1e>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cec:	f000 f868 	bl	8005dc0 <_lseek_r>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cf8:	81a3      	strh	r3, [r4, #12]
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d06:	f000 b817 	b.w	8005d38 <_write_r>

08005d0a <__sseek>:
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d12:	f000 f855 	bl	8005dc0 <_lseek_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	bf15      	itete	ne
 8005d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d26:	81a3      	strheq	r3, [r4, #12]
 8005d28:	bf18      	it	ne
 8005d2a:	81a3      	strhne	r3, [r4, #12]
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <__sclose>:
 8005d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d32:	f000 b813 	b.w	8005d5c <_close_r>
	...

08005d38 <_write_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	2200      	movs	r2, #0
 8005d42:	4d05      	ldr	r5, [pc, #20]	; (8005d58 <_write_r+0x20>)
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f7fb fcdc 	bl	8001704 <_write>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_write_r+0x1e>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_write_r+0x1e>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	200002ec 	.word	0x200002ec

08005d5c <_close_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4d05      	ldr	r5, [pc, #20]	; (8005d78 <_close_r+0x1c>)
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	f7fb fce8 	bl	800173c <_close>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d102      	bne.n	8005d76 <_close_r+0x1a>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	b103      	cbz	r3, 8005d76 <_close_r+0x1a>
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	bd38      	pop	{r3, r4, r5, pc}
 8005d78:	200002ec 	.word	0x200002ec

08005d7c <_fstat_r>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4d06      	ldr	r5, [pc, #24]	; (8005d9c <_fstat_r+0x20>)
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	f7fb fce2 	bl	8001752 <_fstat>
 8005d8e:	1c43      	adds	r3, r0, #1
 8005d90:	d102      	bne.n	8005d98 <_fstat_r+0x1c>
 8005d92:	682b      	ldr	r3, [r5, #0]
 8005d94:	b103      	cbz	r3, 8005d98 <_fstat_r+0x1c>
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	bd38      	pop	{r3, r4, r5, pc}
 8005d9a:	bf00      	nop
 8005d9c:	200002ec 	.word	0x200002ec

08005da0 <_isatty_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	2300      	movs	r3, #0
 8005da4:	4d05      	ldr	r5, [pc, #20]	; (8005dbc <_isatty_r+0x1c>)
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	f7fb fce0 	bl	8001770 <_isatty>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_isatty_r+0x1a>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_isatty_r+0x1a>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	200002ec 	.word	0x200002ec

08005dc0 <_lseek_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4d05      	ldr	r5, [pc, #20]	; (8005de0 <_lseek_r+0x20>)
 8005dcc:	602a      	str	r2, [r5, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f7fb fcd8 	bl	8001784 <_lseek>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_lseek_r+0x1e>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_lseek_r+0x1e>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	200002ec 	.word	0x200002ec

08005de4 <_read_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	2200      	movs	r2, #0
 8005dee:	4d05      	ldr	r5, [pc, #20]	; (8005e04 <_read_r+0x20>)
 8005df0:	602a      	str	r2, [r5, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f7fb fc69 	bl	80016ca <_read>
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d102      	bne.n	8005e02 <_read_r+0x1e>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b103      	cbz	r3, 8005e02 <_read_r+0x1e>
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	200002ec 	.word	0x200002ec

08005e08 <floor>:
 8005e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e0c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005e10:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005e14:	2e13      	cmp	r6, #19
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	4605      	mov	r5, r0
 8005e20:	dc34      	bgt.n	8005e8c <floor+0x84>
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	da15      	bge.n	8005e52 <floor+0x4a>
 8005e26:	a334      	add	r3, pc, #208	; (adr r3, 8005ef8 <floor+0xf0>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa f99e 	bl	800016c <__adddf3>
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	f7fa fde0 	bl	80009f8 <__aeabi_dcmpgt>
 8005e38:	b140      	cbz	r0, 8005e4c <floor+0x44>
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	da59      	bge.n	8005ef2 <floor+0xea>
 8005e3e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005e42:	ea57 0503 	orrs.w	r5, r7, r3
 8005e46:	d001      	beq.n	8005e4c <floor+0x44>
 8005e48:	2500      	movs	r5, #0
 8005e4a:	4c2d      	ldr	r4, [pc, #180]	; (8005f00 <floor+0xf8>)
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	462f      	mov	r7, r5
 8005e50:	e025      	b.n	8005e9e <floor+0x96>
 8005e52:	4a2c      	ldr	r2, [pc, #176]	; (8005f04 <floor+0xfc>)
 8005e54:	fa42 f806 	asr.w	r8, r2, r6
 8005e58:	ea01 0208 	and.w	r2, r1, r8
 8005e5c:	4302      	orrs	r2, r0
 8005e5e:	d01e      	beq.n	8005e9e <floor+0x96>
 8005e60:	a325      	add	r3, pc, #148	; (adr r3, 8005ef8 <floor+0xf0>)
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	f7fa f981 	bl	800016c <__adddf3>
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f7fa fdc3 	bl	80009f8 <__aeabi_dcmpgt>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0ea      	beq.n	8005e4c <floor+0x44>
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	bfbe      	ittt	lt
 8005e7a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005e7e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005e82:	19a4      	addlt	r4, r4, r6
 8005e84:	2500      	movs	r5, #0
 8005e86:	ea24 0408 	bic.w	r4, r4, r8
 8005e8a:	e7df      	b.n	8005e4c <floor+0x44>
 8005e8c:	2e33      	cmp	r6, #51	; 0x33
 8005e8e:	dd0a      	ble.n	8005ea6 <floor+0x9e>
 8005e90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005e94:	d103      	bne.n	8005e9e <floor+0x96>
 8005e96:	f7fa f969 	bl	800016c <__adddf3>
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005eae:	fa22 f808 	lsr.w	r8, r2, r8
 8005eb2:	ea18 0f00 	tst.w	r8, r0
 8005eb6:	d0f2      	beq.n	8005e9e <floor+0x96>
 8005eb8:	a30f      	add	r3, pc, #60	; (adr r3, 8005ef8 <floor+0xf0>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa f955 	bl	800016c <__adddf3>
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f7fa fd97 	bl	80009f8 <__aeabi_dcmpgt>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0be      	beq.n	8005e4c <floor+0x44>
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	da02      	bge.n	8005ed8 <floor+0xd0>
 8005ed2:	2e14      	cmp	r6, #20
 8005ed4:	d103      	bne.n	8005ede <floor+0xd6>
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	ea25 0508 	bic.w	r5, r5, r8
 8005edc:	e7b6      	b.n	8005e4c <floor+0x44>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005ee4:	fa03 f606 	lsl.w	r6, r3, r6
 8005ee8:	4435      	add	r5, r6
 8005eea:	42bd      	cmp	r5, r7
 8005eec:	bf38      	it	cc
 8005eee:	18e4      	addcc	r4, r4, r3
 8005ef0:	e7f2      	b.n	8005ed8 <floor+0xd0>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	462c      	mov	r4, r5
 8005ef6:	e7a9      	b.n	8005e4c <floor+0x44>
 8005ef8:	8800759c 	.word	0x8800759c
 8005efc:	7e37e43c 	.word	0x7e37e43c
 8005f00:	bff00000 	.word	0xbff00000
 8005f04:	000fffff 	.word	0x000fffff

08005f08 <_init>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	bf00      	nop
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr

08005f14 <_fini>:
 8005f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f16:	bf00      	nop
 8005f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1a:	bc08      	pop	{r3}
 8005f1c:	469e      	mov	lr, r3
 8005f1e:	4770      	bx	lr
