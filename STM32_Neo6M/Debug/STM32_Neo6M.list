
STM32_Neo6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080059d0  080059d0  000159d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea0  08005ea0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005ea0  08005ea0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ea0  08005ea0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200001e0  08006088  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08006088  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009090  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c24  00000000  00000000  00029299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018136  00000000  00000000  0002bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008419  00000000  00000000  00043dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083f27  00000000  00000000  0004c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d012e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e94  00000000  00000000  000d0184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080059b4 	.word	0x080059b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080059b4 	.word	0x080059b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	4621      	mov	r1, r4
 8000c70:	4628      	mov	r0, r5
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	f7ff fea1 	bl	80009bc <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x20>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc17 	bl	80004d8 <__aeabi_dmul>
 8000caa:	f7ff feaf 	bl	8000a0c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fb98 	bl	80003e4 <__aeabi_ui2d>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb8:	f7ff fc0e 	bl	80004d8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fa50 	bl	8000168 <__aeabi_dsub>
 8000cc8:	f7ff fea0 	bl	8000a0c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <GPS_Init>:

	return decDeg;
}

void GPS_Init()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	gps.index = 0;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <GPS_Init+0x18>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&neo, &gps.rx, 1);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4903      	ldr	r1, [pc, #12]	; (8000cf4 <GPS_Init+0x1c>)
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <GPS_Init+0x20>)
 8000ce8:	f001 fbfd 	bl	80024e6 <HAL_UART_Receive_IT>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000208 	.word	0x20000208
 8000cf4:	2000020c 	.word	0x2000020c
 8000cf8:	2000025c 	.word	0x2000025c

08000cfc <GPS_Callback>:

void GPS_Callback()
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	if(gps.rx == '\n')
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <GPS_Callback+0x44>)
 8000d02:	791b      	ldrb	r3, [r3, #4]
 8000d04:	2b0a      	cmp	r3, #10
 8000d06:	d107      	bne.n	8000d18 <GPS_Callback+0x1c>
	{
		gps.flag = true;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <GPS_Callback+0x44>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		gps.index = 0;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <GPS_Callback+0x44>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	715a      	strb	r2, [r3, #5]
 8000d16:	e00b      	b.n	8000d30 <GPS_Callback+0x34>
	}
	else gps.buffer[gps.index ++] = gps.rx;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <GPS_Callback+0x44>)
 8000d1a:	795b      	ldrb	r3, [r3, #5]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	b2d1      	uxtb	r1, r2
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <GPS_Callback+0x44>)
 8000d22:	7151      	strb	r1, [r2, #5]
 8000d24:	4619      	mov	r1, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <GPS_Callback+0x44>)
 8000d28:	791a      	ldrb	r2, [r3, #4]
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <GPS_Callback+0x44>)
 8000d2c:	440b      	add	r3, r1
 8000d2e:	719a      	strb	r2, [r3, #6]
	HAL_UART_Receive_IT(&neo, &gps.rx, 1);
 8000d30:	2201      	movs	r2, #1
 8000d32:	4904      	ldr	r1, [pc, #16]	; (8000d44 <GPS_Callback+0x48>)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <GPS_Callback+0x4c>)
 8000d36:	f001 fbd6 	bl	80024e6 <HAL_UART_Receive_IT>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000208 	.word	0x20000208
 8000d44:	2000020c 	.word	0x2000020c
 8000d48:	2000025c 	.word	0x2000025c

08000d4c <GPS_ProcessData>:
//		gps.flag = false;
//	}
//}

void GPS_ProcessData()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	if(gps.flag == true)
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <GPS_ProcessData+0xa4>)
 8000d54:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d044      	beq.n	8000de6 <GPS_ProcessData+0x9a>
	{
		char* response = strstr((char*)gps.buffer, "$GPGGA");
 8000d5c:	4925      	ldr	r1, [pc, #148]	; (8000df4 <GPS_ProcessData+0xa8>)
 8000d5e:	4826      	ldr	r0, [pc, #152]	; (8000df8 <GPS_ProcessData+0xac>)
 8000d60:	f001 ff56 	bl	8002c10 <strstr>
 8000d64:	6078      	str	r0, [r7, #4]
		if(response != NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d031      	beq.n	8000dd0 <GPS_ProcessData+0x84>
		{
			char* token = strtok(response, ",");
 8000d6c:	4923      	ldr	r1, [pc, #140]	; (8000dfc <GPS_ProcessData+0xb0>)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f002 fd86 	bl	8003880 <strtok>
 8000d74:	6038      	str	r0, [r7, #0]
			strcpy(gps.gpgga.time, strtok(NULL, ","));
 8000d76:	4921      	ldr	r1, [pc, #132]	; (8000dfc <GPS_ProcessData+0xb0>)
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f002 fd81 	bl	8003880 <strtok>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4619      	mov	r1, r3
 8000d82:	481f      	ldr	r0, [pc, #124]	; (8000e00 <GPS_ProcessData+0xb4>)
 8000d84:	f001 ff3c 	bl	8002c00 <strcpy>
			gps.gpgga.latitude = atof(strtok(NULL, ","));
 8000d88:	491c      	ldr	r1, [pc, #112]	; (8000dfc <GPS_ProcessData+0xb0>)
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f002 fd78 	bl	8003880 <strtok>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 fefe 	bl	8002b94 <atof>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff10 	bl	8000bc0 <__aeabi_i2f>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <GPS_ProcessData+0xa4>)
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
			gps.gpgga.ns_indicator = strtok(NULL, ",");
 8000da6:	4915      	ldr	r1, [pc, #84]	; (8000dfc <GPS_ProcessData+0xb0>)
 8000da8:	2000      	movs	r0, #0
 8000daa:	f002 fd69 	bl	8003880 <strtok>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <GPS_ProcessData+0xa4>)
 8000db2:	6453      	str	r3, [r2, #68]	; 0x44
			gps.gpgga.longtitude_str = strtok(NULL, ",");
 8000db4:	4911      	ldr	r1, [pc, #68]	; (8000dfc <GPS_ProcessData+0xb0>)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f002 fd62 	bl	8003880 <strtok>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a0c      	ldr	r2, [pc, #48]	; (8000df0 <GPS_ProcessData+0xa4>)
 8000dc0:	6493      	str	r3, [r2, #72]	; 0x48
			gps.gpgga.ew_indicator = strtok(NULL, ",");
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <GPS_ProcessData+0xb0>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f002 fd5b 	bl	8003880 <strtok>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <GPS_ProcessData+0xa4>)
 8000dce:	6513      	str	r3, [r2, #80]	; 0x50
		}
		HAL_UART_Transmit(&debug, gps.buffer, sizeof(gps.buffer), 2000);
 8000dd0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000dd4:	2228      	movs	r2, #40	; 0x28
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <GPS_ProcessData+0xac>)
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <GPS_ProcessData+0xb8>)
 8000dda:	f001 faf2 	bl	80023c2 <HAL_UART_Transmit>
		gps.flag = false;
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <GPS_ProcessData+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000208 	.word	0x20000208
 8000df4:	080059d0 	.word	0x080059d0
 8000df8:	2000020e 	.word	0x2000020e
 8000dfc:	080059d8 	.word	0x080059d8
 8000e00:	20000238 	.word	0x20000238
 8000e04:	2000029c 	.word	0x2000029c

08000e08 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern GPS_Struct gps;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	GPS_Callback();
 8000e10:	f7ff ff74 	bl	8000cfc <GPS_Callback>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e20:	f000 fae6 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e24:	f000 f80b 	bl	8000e3e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e28:	f000 f8a2 	bl	8000f70 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e2c:	f000 f84c 	bl	8000ec8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e30:	f000 f874 	bl	8000f1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 8000e34:	f7ff ff50 	bl	8000cd8 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_ProcessData();
 8000e38:	f7ff ff88 	bl	8000d4c <GPS_ProcessData>
 8000e3c:	e7fc      	b.n	8000e38 <main+0x1c>

08000e3e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b090      	sub	sp, #64	; 0x40
 8000e42:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	2228      	movs	r2, #40	; 0x28
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fecf 	bl	8002bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fe34 	bl	8001af4 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e92:	f000 f8b9 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	230f      	movs	r3, #15
 8000e98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f001 f89f 	bl	8001ff4 <HAL_RCC_ClockConfig>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ebc:	f000 f8a4 	bl	8001008 <Error_Handler>
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	3740      	adds	r7, #64	; 0x40
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_USART1_UART_Init+0x50>)
 8000ed0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ed4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_USART1_UART_Init+0x4c>)
 8000f00:	f001 fa12 	bl	8002328 <HAL_UART_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f0a:	f000 f87d 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000025c 	.word	0x2000025c
 8000f18:	40013800 	.word	0x40013800

08000f1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_USART2_UART_Init+0x50>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_USART2_UART_Init+0x4c>)
 8000f54:	f001 f9e8 	bl	8002328 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f000 f853 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000029c 	.word	0x2000029c
 8000f6c:	40004400 	.word	0x40004400

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0310 	add.w	r3, r7, #16
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f84:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_GPIO_Init+0x90>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <MX_GPIO_Init+0x90>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_GPIO_Init+0x90>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_GPIO_Init+0x90>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_GPIO_Init+0x90>)
 8000fa2:	f043 0320 	orr.w	r3, r3, #32
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_GPIO_Init+0x90>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0320 	and.w	r3, r3, #32
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <MX_GPIO_Init+0x90>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <MX_GPIO_Init+0x90>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MX_GPIO_Init+0x90>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	480c      	ldr	r0, [pc, #48]	; (8001004 <MX_GPIO_Init+0x94>)
 8000fd4:	f000 fd76 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0x94>)
 8000ff2:	f000 fbe3 	bl	80017bc <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	40011000 	.word	0x40011000

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_MspInit+0x5c>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <HAL_MspInit+0x5c>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6193      	str	r3, [r2, #24]
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_MspInit+0x5c>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_MspInit+0x5c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_MspInit+0x5c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_MspInit+0x5c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_MspInit+0x60>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_MspInit+0x60>)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000

08001078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <HAL_UART_MspInit+0x118>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d13a      	bne.n	800110e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <HAL_UART_MspInit+0x11c>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a3d      	ldr	r2, [pc, #244]	; (8001194 <HAL_UART_MspInit+0x11c>)
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HAL_UART_MspInit+0x11c>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_UART_MspInit+0x11c>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a37      	ldr	r2, [pc, #220]	; (8001194 <HAL_UART_MspInit+0x11c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <HAL_UART_MspInit+0x11c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	4619      	mov	r1, r3
 80010dc:	482e      	ldr	r0, [pc, #184]	; (8001198 <HAL_UART_MspInit+0x120>)
 80010de:	f000 fb6d 	bl	80017bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 80010e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4828      	ldr	r0, [pc, #160]	; (8001198 <HAL_UART_MspInit+0x120>)
 80010f8:	f000 fb60 	bl	80017bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2101      	movs	r1, #1
 8001100:	2025      	movs	r0, #37	; 0x25
 8001102:	f000 faae 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001106:	2025      	movs	r0, #37	; 0x25
 8001108:	f000 fac7 	bl	800169a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110c:	e03c      	b.n	8001188 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a22      	ldr	r2, [pc, #136]	; (800119c <HAL_UART_MspInit+0x124>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d137      	bne.n	8001188 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_UART_MspInit+0x11c>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_UART_MspInit+0x11c>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001122:	61d3      	str	r3, [r2, #28]
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_UART_MspInit+0x11c>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_UART_MspInit+0x11c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_UART_MspInit+0x11c>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0x11c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001148:	2304      	movs	r3, #4
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	4619      	mov	r1, r3
 800115a:	480f      	ldr	r0, [pc, #60]	; (8001198 <HAL_UART_MspInit+0x120>)
 800115c:	f000 fb2e 	bl	80017bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8001160:	2308      	movs	r3, #8
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4619      	mov	r1, r3
 8001172:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_UART_MspInit+0x120>)
 8001174:	f000 fb22 	bl	80017bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	2026      	movs	r0, #38	; 0x26
 800117e:	f000 fa70 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001182:	2026      	movs	r0, #38	; 0x26
 8001184:	f000 fa89 	bl	800169a <HAL_NVIC_EnableIRQ>
}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40013800 	.word	0x40013800
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800
 800119c:	40004400 	.word	0x40004400

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e6:	f000 f949 	bl	800147c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USART1_IRQHandler+0x10>)
 80011f6:	f001 f9cb 	bl	8002590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000025c 	.word	0x2000025c

08001204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <USART2_IRQHandler+0x10>)
 800120a:	f001 f9c1 	bl	8002590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000029c 	.word	0x2000029c

08001218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <_kill>:

int _kill(int pid, int sig)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001230:	f001 fcb4 	bl	8002b9c <__errno>
 8001234:	4603      	mov	r3, r0
 8001236:	2216      	movs	r2, #22
 8001238:	601a      	str	r2, [r3, #0]
	return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <_exit>:

void _exit (int status)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800124e:	f04f 31ff 	mov.w	r1, #4294967295
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffe7 	bl	8001226 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001258:	e7fe      	b.n	8001258 <_exit+0x12>

0800125a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e00a      	b.n	8001282 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800126c:	f3af 8000 	nop.w
 8001270:	4601      	mov	r1, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	60ba      	str	r2, [r7, #8]
 8001278:	b2ca      	uxtb	r2, r1
 800127a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	dbf0      	blt.n	800126c <_read+0x12>
	}

return len;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	e009      	b.n	80012ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	60ba      	str	r2, [r7, #8]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dbf1      	blt.n	80012a6 <_write+0x12>
	}
	return len;
 80012c2:	687b      	ldr	r3, [r7, #4]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_close>:

int _close(int file)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f2:	605a      	str	r2, [r3, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_isatty>:

int _isatty(int file)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	return 1;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f001 fc1e 	bl	8002b9c <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20005000 	.word	0x20005000
 800138c:	00000400 	.word	0x00000400
 8001390:	200001fc 	.word	0x200001fc
 8001394:	200002f0 	.word	0x200002f0

08001398 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80013a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80013a6:	e003      	b.n	80013b0 <LoopCopyDataInit>

080013a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80013aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80013ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80013ae:	3104      	adds	r1, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013b0:	480a      	ldr	r0, [pc, #40]	; (80013dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013b8:	d3f6      	bcc.n	80013a8 <CopyDataInit>
  ldr r2, =_sbss
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013bc:	e002      	b.n	80013c4 <LoopFillZerobss>

080013be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013c0:	f842 3b04 	str.w	r3, [r2], #4

080013c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013c8:	d3f9      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ca:	f7ff ffe5 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f001 fbeb 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013d2:	f7ff fd23 	bl	8000e1c <main>
  bx lr
 80013d6:	4770      	bx	lr
  ldr r3, =_sidata
 80013d8:	08005ea8 	.word	0x08005ea8
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013e0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80013e4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80013e8:	200002f0 	.word	0x200002f0

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_Init+0x28>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_Init+0x28>)
 80013fa:	f043 0310 	orr.w	r3, r3, #16
 80013fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f923 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f808 	bl	800141c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800140c:	f7ff fe02 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000

0800141c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x54>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	fbb3 f3f1 	udiv	r3, r3, r1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f93b 	bl	80016b6 <HAL_SYSTICK_Config>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e00e      	b.n	8001468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d80a      	bhi.n	8001466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f903 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <HAL_InitTick+0x5c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e000      	b.n	8001468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000
 8001474:	20000008 	.word	0x20000008
 8001478:	20000004 	.word	0x20000004

0800147c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_IncTick+0x1c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_IncTick+0x20>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4413      	add	r3, r2
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_IncTick+0x20>)
 800148e:	6013      	str	r3, [r2, #0]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000008 	.word	0x20000008
 800149c:	200002dc 	.word	0x200002dc

080014a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <HAL_GetTick+0x10>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	200002dc 	.word	0x200002dc

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff90 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff2d 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff42 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff35 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d005      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e051      	b.n	8001796 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020e 	bic.w	r2, r2, #14
 8001700:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_DMA_Abort_IT+0xd0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d029      	beq.n	8001770 <HAL_DMA_Abort_IT+0xa0>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a20      	ldr	r2, [pc, #128]	; (80017a4 <HAL_DMA_Abort_IT+0xd4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d022      	beq.n	800176c <HAL_DMA_Abort_IT+0x9c>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_DMA_Abort_IT+0xd8>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d01a      	beq.n	8001766 <HAL_DMA_Abort_IT+0x96>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_DMA_Abort_IT+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d012      	beq.n	8001760 <HAL_DMA_Abort_IT+0x90>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_DMA_Abort_IT+0xe0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00a      	beq.n	800175a <HAL_DMA_Abort_IT+0x8a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_DMA_Abort_IT+0xe4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d102      	bne.n	8001754 <HAL_DMA_Abort_IT+0x84>
 800174e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001752:	e00e      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001758:	e00b      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	e008      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	e005      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176a:	e002      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 800176c:	2310      	movs	r3, #16
 800176e:	e000      	b.n	8001772 <HAL_DMA_Abort_IT+0xa2>
 8001770:	2301      	movs	r3, #1
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <HAL_DMA_Abort_IT+0xe8>)
 8001774:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
    } 
  }
  return status;
 8001796:	7bfb      	ldrb	r3, [r7, #15]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40020008 	.word	0x40020008
 80017a4:	4002001c 	.word	0x4002001c
 80017a8:	40020030 	.word	0x40020030
 80017ac:	40020044 	.word	0x40020044
 80017b0:	40020058 	.word	0x40020058
 80017b4:	4002006c 	.word	0x4002006c
 80017b8:	40020000 	.word	0x40020000

080017bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017bc:	b480      	push	{r7}
 80017be:	b08b      	sub	sp, #44	; 0x2c
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e169      	b.n	8001aa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 8158 	bne.w	8001a9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a9a      	ldr	r2, [pc, #616]	; (8001a5c <HAL_GPIO_Init+0x2a0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 80017f8:	4a98      	ldr	r2, [pc, #608]	; (8001a5c <HAL_GPIO_Init+0x2a0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d875      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 80017fe:	4a98      	ldr	r2, [pc, #608]	; (8001a60 <HAL_GPIO_Init+0x2a4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d058      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001804:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <HAL_GPIO_Init+0x2a4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d86f      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800180a:	4a96      	ldr	r2, [pc, #600]	; (8001a64 <HAL_GPIO_Init+0x2a8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d052      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001810:	4a94      	ldr	r2, [pc, #592]	; (8001a64 <HAL_GPIO_Init+0x2a8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d869      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001816:	4a94      	ldr	r2, [pc, #592]	; (8001a68 <HAL_GPIO_Init+0x2ac>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d04c      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 800181c:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_GPIO_Init+0x2ac>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d863      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001822:	4a92      	ldr	r2, [pc, #584]	; (8001a6c <HAL_GPIO_Init+0x2b0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d046      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
 8001828:	4a90      	ldr	r2, [pc, #576]	; (8001a6c <HAL_GPIO_Init+0x2b0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d85d      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d82a      	bhi.n	8001888 <HAL_GPIO_Init+0xcc>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d859      	bhi.n	80018ea <HAL_GPIO_Init+0x12e>
 8001836:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_GPIO_Init+0x80>)
 8001838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183c:	080018b7 	.word	0x080018b7
 8001840:	08001891 	.word	0x08001891
 8001844:	080018a3 	.word	0x080018a3
 8001848:	080018e5 	.word	0x080018e5
 800184c:	080018eb 	.word	0x080018eb
 8001850:	080018eb 	.word	0x080018eb
 8001854:	080018eb 	.word	0x080018eb
 8001858:	080018eb 	.word	0x080018eb
 800185c:	080018eb 	.word	0x080018eb
 8001860:	080018eb 	.word	0x080018eb
 8001864:	080018eb 	.word	0x080018eb
 8001868:	080018eb 	.word	0x080018eb
 800186c:	080018eb 	.word	0x080018eb
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080018eb 	.word	0x080018eb
 8001878:	080018eb 	.word	0x080018eb
 800187c:	080018eb 	.word	0x080018eb
 8001880:	08001899 	.word	0x08001899
 8001884:	080018ad 	.word	0x080018ad
 8001888:	4a79      	ldr	r2, [pc, #484]	; (8001a70 <HAL_GPIO_Init+0x2b4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188e:	e02c      	b.n	80018ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e029      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	3304      	adds	r3, #4
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e024      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	3308      	adds	r3, #8
 80018a8:	623b      	str	r3, [r7, #32]
          break;
 80018aa:	e01f      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	330c      	adds	r3, #12
 80018b2:	623b      	str	r3, [r7, #32]
          break;
 80018b4:	e01a      	b.n	80018ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018be:	2304      	movs	r3, #4
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e013      	b.n	80018ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d105      	bne.n	80018d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	611a      	str	r2, [r3, #16]
          break;
 80018d6:	e009      	b.n	80018ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d8:	2308      	movs	r3, #8
 80018da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	615a      	str	r2, [r3, #20]
          break;
 80018e2:	e003      	b.n	80018ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e000      	b.n	80018ec <HAL_GPIO_Init+0x130>
          break;
 80018ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d801      	bhi.n	80018f6 <HAL_GPIO_Init+0x13a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	e001      	b.n	80018fa <HAL_GPIO_Init+0x13e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	3304      	adds	r3, #4
 80018fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2bff      	cmp	r3, #255	; 0xff
 8001900:	d802      	bhi.n	8001908 <HAL_GPIO_Init+0x14c>
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	e002      	b.n	800190e <HAL_GPIO_Init+0x152>
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3b08      	subs	r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	210f      	movs	r1, #15
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80b1 	beq.w	8001a9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a4c      	ldr	r2, [pc, #304]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x2b8>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2bc>)
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a40      	ldr	r2, [pc, #256]	; (8001a7c <HAL_GPIO_Init+0x2c0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x1ec>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3f      	ldr	r2, [pc, #252]	; (8001a80 <HAL_GPIO_Init+0x2c4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1e8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a3e      	ldr	r2, [pc, #248]	; (8001a84 <HAL_GPIO_Init+0x2c8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1e4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <HAL_GPIO_Init+0x2cc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1e0>
 8001998:	2303      	movs	r3, #3
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 800199c:	2304      	movs	r3, #4
 800199e:	e004      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e002      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_GPIO_Init+0x1ee>
 80019a8:	2300      	movs	r3, #0
 80019aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ac:	f002 0203 	and.w	r2, r2, #3
 80019b0:	0092      	lsls	r2, r2, #2
 80019b2:	4093      	lsls	r3, r2
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ba:	492f      	ldr	r1, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x2bc>)
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	3302      	adds	r3, #2
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d006      	beq.n	80019e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d4:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	492c      	ldr	r1, [pc, #176]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	4928      	ldr	r1, [pc, #160]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019fc:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	491e      	ldr	r1, [pc, #120]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4918      	ldr	r1, [pc, #96]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4914      	ldr	r1, [pc, #80]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d021      	beq.n	8001a90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	490e      	ldr	r1, [pc, #56]	; (8001a8c <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e021      	b.n	8001a9e <HAL_GPIO_Init+0x2e2>
 8001a5a:	bf00      	nop
 8001a5c:	10320000 	.word	0x10320000
 8001a60:	10310000 	.word	0x10310000
 8001a64:	10220000 	.word	0x10220000
 8001a68:	10210000 	.word	0x10210000
 8001a6c:	10120000 	.word	0x10120000
 8001a70:	10110000 	.word	0x10110000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40011400 	.word	0x40011400
 8001a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	4909      	ldr	r1, [pc, #36]	; (8001ac0 <HAL_GPIO_Init+0x304>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f47f ae8e 	bne.w	80017d0 <HAL_GPIO_Init+0x14>
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	372c      	adds	r7, #44	; 0x2c
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae0:	e003      	b.n	8001aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	041a      	lsls	r2, r3, #16
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	611a      	str	r2, [r3, #16]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e26c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8087 	beq.w	8001c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b14:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d00c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b20:	4b8f      	ldr	r3, [pc, #572]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d112      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d06c      	beq.n	8001c20 <HAL_RCC_OscConfig+0x12c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d168      	bne.n	8001c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e246      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x76>
 8001b5c:	4b80      	ldr	r3, [pc, #512]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a7f      	ldr	r2, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e02e      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x98>
 8001b72:	4b7b      	ldr	r3, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7a      	ldr	r2, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a77      	ldr	r2, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e01d      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xbc>
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a71      	ldr	r2, [pc, #452]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e00b      	b.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
 8001bb0:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d013      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff fc66 	bl	80014a0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fc62 	bl	80014a0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1fa      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe4>
 8001bf6:	e014      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fc52 	bl	80014a0 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c00:	f7ff fc4e 	bl	80014a0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b64      	cmp	r3, #100	; 0x64
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e1e6      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x10c>
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d063      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2e:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c3a:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d11c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x18c>
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d116      	bne.n	8001c80 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	4b43      	ldr	r3, [pc, #268]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d001      	beq.n	8001c6a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e1ba      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4939      	ldr	r1, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d020      	beq.n	8001cca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fc07 	bl	80014a0 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c96:	f7ff fc03 	bl	80014a0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e19b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4927      	ldr	r1, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cca:	4b26      	ldr	r3, [pc, #152]	; (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fbe6 	bl	80014a0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fbe2 	bl	80014a0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e17a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d03a      	beq.n	8001d78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7ff fbc6 	bl	80014a0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7ff fbc2 	bl	80014a0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e15a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 fad8 	bl	80022ec <RCC_Delay>
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7ff fbac 	bl	80014a0 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d4a:	e00f      	b.n	8001d6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fba8 	bl	80014a0 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d908      	bls.n	8001d6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e140      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	42420000 	.word	0x42420000
 8001d68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6c:	4b9e      	ldr	r3, [pc, #632]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1e9      	bne.n	8001d4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80a6 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8a:	4b97      	ldr	r3, [pc, #604]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10d      	bne.n	8001db2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4b94      	ldr	r3, [pc, #592]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a93      	ldr	r2, [pc, #588]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b91      	ldr	r3, [pc, #580]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b8e      	ldr	r3, [pc, #568]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a8a      	ldr	r2, [pc, #552]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7ff fb69 	bl	80014a0 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7ff fb65 	bl	80014a0 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	; 0x64
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0fd      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b81      	ldr	r3, [pc, #516]	; (8001fec <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x312>
 8001df8:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6213      	str	r3, [r2, #32]
 8001e04:	e02d      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x334>
 8001e0e:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a75      	ldr	r2, [pc, #468]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 0301 	bic.w	r3, r3, #1
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a72      	ldr	r2, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	e01c      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x356>
 8001e30:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a6c      	ldr	r2, [pc, #432]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4b6a      	ldr	r3, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a69      	ldr	r2, [pc, #420]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e00b      	b.n	8001e62 <HAL_RCC_OscConfig+0x36e>
 8001e4a:	4b67      	ldr	r3, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a66      	ldr	r2, [pc, #408]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6213      	str	r3, [r2, #32]
 8001e56:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0304 	bic.w	r3, r3, #4
 8001e60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d015      	beq.n	8001e96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fb19 	bl	80014a0 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e72:	f7ff fb15 	bl	80014a0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e0ab      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	4b57      	ldr	r3, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ee      	beq.n	8001e72 <HAL_RCC_OscConfig+0x37e>
 8001e94:	e014      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fb03 	bl	80014a0 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff faff 	bl	80014a0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e095      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ee      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d105      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec6:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8081 	beq.w	8001fde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001edc:	4b42      	ldr	r3, [pc, #264]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d061      	beq.n	8001fac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d146      	bne.n	8001f7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x4fc>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fad3 	bl	80014a0 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efe:	f7ff facf 	bl	80014a0 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e067      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	4b35      	ldr	r3, [pc, #212]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	492d      	ldr	r1, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a19      	ldr	r1, [r3, #32]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_RCC_OscConfig+0x4fc>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7ff faa3 	bl	80014a0 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5e:	f7ff fa9f 	bl	80014a0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e037      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x46a>
 8001f7c:	e02f      	b.n	8001fde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <HAL_RCC_OscConfig+0x4fc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fa8c 	bl	80014a0 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fa88 	bl	80014a0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e020      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x498>
 8001faa:	e018      	b.n	8001fde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e013      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x4f4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	42420060 	.word	0x42420060

08001ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0d0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d910      	bls.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 0207 	bic.w	r2, r3, #7
 800201e:	4965      	ldr	r1, [pc, #404]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0b8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a58      	ldr	r2, [pc, #352]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800205a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002068:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a52      	ldr	r2, [pc, #328]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002072:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	494d      	ldr	r1, [pc, #308]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d040      	beq.n	8002114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d115      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e07f      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e073      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020d2:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f023 0203 	bic.w	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7ff f9dc 	bl	80014a0 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7ff f9d8 	bl	80014a0 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e053      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 020c 	and.w	r2, r3, #12
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	429a      	cmp	r2, r3
 8002112:	d1eb      	bne.n	80020ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d210      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e032      	b.n	80021aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4916      	ldr	r1, [pc, #88]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	490e      	ldr	r1, [pc, #56]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002182:	f000 f821 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 8002186:	4602      	mov	r2, r0
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	490a      	ldr	r1, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	5ccb      	ldrb	r3, [r1, r3]
 8002196:	fa22 f303 	lsr.w	r3, r2, r3
 800219a:	4a09      	ldr	r2, [pc, #36]	; (80021c0 <HAL_RCC_ClockConfig+0x1cc>)
 800219c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_ClockConfig+0x1d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f93a 	bl	800141c <HAL_InitTick>

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	080059ec 	.word	0x080059ec
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b490      	push	{r4, r7}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021d0:	1d3c      	adds	r4, r7, #4
 80021d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021d8:	f240 2301 	movw	r3, #513	; 0x201
 80021dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x40>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x46>
 8002206:	e02d      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 800220a:	623b      	str	r3, [r7, #32]
      break;
 800220c:	e02d      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800221a:	4413      	add	r3, r2
 800221c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002220:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <HAL_RCC_GetSysClockFreq+0xb4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c5b      	lsrs	r3, r3, #17
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800223a:	4413      	add	r3, r2
 800223c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002240:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002246:	fb02 f203 	mul.w	r2, r2, r3
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	e004      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002258:	fb02 f303 	mul.w	r3, r2, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	623b      	str	r3, [r7, #32]
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002266:	623b      	str	r3, [r7, #32]
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	6a3b      	ldr	r3, [r7, #32]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bc90      	pop	{r4, r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	080059dc 	.word	0x080059dc
 800227c:	40021000 	.word	0x40021000
 8002280:	007a1200 	.word	0x007a1200
 8002284:	003d0900 	.word	0x003d0900

08002288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800228c:	4b02      	ldr	r3, [pc, #8]	; (8002298 <HAL_RCC_GetHCLKFreq+0x10>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	20000000 	.word	0x20000000

0800229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022a0:	f7ff fff2 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	080059fc 	.word	0x080059fc

080022c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c8:	f7ff ffde 	bl	8002288 <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	0adb      	lsrs	r3, r3, #11
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4903      	ldr	r1, [pc, #12]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	080059fc 	.word	0x080059fc

080022ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <RCC_Delay+0x34>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <RCC_Delay+0x38>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0a5b      	lsrs	r3, r3, #9
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002308:	bf00      	nop
  }
  while (Delay --);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e5a      	subs	r2, r3, #1
 800230e:	60fa      	str	r2, [r7, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f9      	bne.n	8002308 <RCC_Delay+0x1c>
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000000 	.word	0x20000000
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e03f      	b.n	80023ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fe92 	bl	8001078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800236a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fb83 	bl	8002a78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b08a      	sub	sp, #40	; 0x28
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d17c      	bne.n	80024dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_UART_Transmit+0x2c>
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e075      	b.n	80024de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Transmit+0x3e>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e06e      	b.n	80024de <HAL_UART_Transmit+0x11c>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2221      	movs	r2, #33	; 0x21
 8002412:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002416:	f7ff f843 	bl	80014a0 <HAL_GetTick>
 800241a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	88fa      	ldrh	r2, [r7, #6]
 8002426:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002430:	d108      	bne.n	8002444 <HAL_UART_Transmit+0x82>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d104      	bne.n	8002444 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	e003      	b.n	800244c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002454:	e02a      	b.n	80024ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f9a7 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e036      	b.n	80024de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10b      	bne.n	800248e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	3302      	adds	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	e007      	b.n	800249e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	781a      	ldrb	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	3301      	adds	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1cf      	bne.n	8002456 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2200      	movs	r2, #0
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f977 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2302      	movs	r3, #2
  }
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	4613      	mov	r3, r2
 80024f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d140      	bne.n	8002582 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_UART_Receive_IT+0x26>
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e039      	b.n	8002584 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_UART_Receive_IT+0x38>
 800251a:	2302      	movs	r3, #2
 800251c:	e032      	b.n	8002584 <HAL_UART_Receive_IT+0x9e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2222      	movs	r2, #34	; 0x22
 8002542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
	...

08002590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_UART_IRQHandler+0x52>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f9cc 	bl	8002978 <UART_Receive_IT>
      return;
 80025e0:	e0d0      	b.n	8002784 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80b0 	beq.w	800274a <HAL_UART_IRQHandler+0x1ba>
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_UART_IRQHandler+0x70>
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a5 	beq.w	800274a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_UART_IRQHandler+0x90>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_UART_IRQHandler+0xb0>
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	f043 0202 	orr.w	r2, r3, #2
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_UART_IRQHandler+0xd0>
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	f043 0204 	orr.w	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00f      	beq.n	800268a <HAL_UART_IRQHandler+0xfa>
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d104      	bne.n	800267e <HAL_UART_IRQHandler+0xee>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	f043 0208 	orr.w	r2, r3, #8
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d077      	beq.n	8002782 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_UART_IRQHandler+0x11c>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f966 	bl	8002978 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_UART_IRQHandler+0x144>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d031      	beq.n	8002738 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8b7 	bl	8002848 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d023      	beq.n	8002730 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026f6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_UART_IRQHandler+0x1fc>)
 8002706:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe ffdf 	bl	80016d0 <HAL_DMA_Abort_IT>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d016      	beq.n	8002746 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002722:	4610      	mov	r0, r2
 8002724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002726:	e00e      	b.n	8002746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f83a 	bl	80027a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272e:	e00a      	b.n	8002746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f836 	bl	80027a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002736:	e006      	b.n	8002746 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f832 	bl	80027a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002744:	e01d      	b.n	8002782 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002746:	bf00      	nop
    return;
 8002748:	e01b      	b.n	8002782 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_UART_IRQHandler+0x1d6>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8a3 	bl	80028aa <UART_Transmit_IT>
    return;
 8002764:	e00e      	b.n	8002784 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_UART_IRQHandler+0x1f4>
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8e4 	bl	8002948 <UART_EndTransmit_IT>
    return;
 8002780:	e000      	b.n	8002784 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002782:	bf00      	nop
  }
}
 8002784:	3720      	adds	r7, #32
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	08002883 	.word	0x08002883

08002790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr

080027a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c4:	e02c      	b.n	8002820 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d028      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80027d4:	f7fe fe64 	bl	80014a0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d21d      	bcs.n	8002820 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e00f      	b.n	8002840 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d0c3      	beq.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800285e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f7ff ff80 	bl	80027a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b21      	cmp	r3, #33	; 0x21
 80028bc:	d13e      	bne.n	800293c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	d114      	bne.n	80028f2 <UART_Transmit_IT+0x48>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d110      	bne.n	80028f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	1c9a      	adds	r2, r3, #2
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	e008      	b.n	8002904 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6211      	str	r1, [r2, #32]
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29b      	uxth	r3, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002926:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002936:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800295e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff11 	bl	8002790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b22      	cmp	r3, #34	; 0x22
 800298a:	d170      	bne.n	8002a6e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002994:	d117      	bne.n	80029c6 <UART_Receive_IT+0x4e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d113      	bne.n	80029c6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	1c9a      	adds	r2, r3, #2
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
 80029c4:	e026      	b.n	8002a14 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d007      	beq.n	80029ea <UART_Receive_IT+0x72>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10a      	bne.n	80029f8 <UART_Receive_IT+0x80>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e008      	b.n	8002a0a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4619      	mov	r1, r3
 8002a22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d120      	bne.n	8002a6a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0220 	bic.w	r2, r2, #32
 8002a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0201 	bic.w	r2, r2, #1
 8002a56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe f9d1 	bl	8000e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e002      	b.n	8002a70 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ab2:	f023 030c 	bic.w	r3, r3, #12
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	68b9      	ldr	r1, [r7, #8]
 8002abc:	430b      	orrs	r3, r1
 8002abe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <UART_SetConfig+0x114>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d103      	bne.n	8002ae8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7ff fbf0 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	e002      	b.n	8002aee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ae8:	f7ff fbd8 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8002aec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009a      	lsls	r2, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b04:	4a22      	ldr	r2, [pc, #136]	; (8002b90 <UART_SetConfig+0x118>)
 8002b06:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	0119      	lsls	r1, r3, #4
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009a      	lsls	r2, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <UART_SetConfig+0x118>)
 8002b26:	fba3 0302 	umull	r0, r3, r3, r2
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2064      	movs	r0, #100	; 0x64
 8002b2e:	fb00 f303 	mul.w	r3, r0, r3
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	3332      	adds	r3, #50	; 0x32
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <UART_SetConfig+0x118>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b44:	4419      	add	r1, r3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	441a      	add	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <UART_SetConfig+0x118>)
 8002b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2064      	movs	r0, #100	; 0x64
 8002b66:	fb00 f303 	mul.w	r3, r0, r3
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	3332      	adds	r3, #50	; 0x32
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <UART_SetConfig+0x118>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	f003 020f 	and.w	r2, r3, #15
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	440a      	add	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40013800 	.word	0x40013800
 8002b90:	51eb851f 	.word	0x51eb851f

08002b94 <atof>:
 8002b94:	2100      	movs	r1, #0
 8002b96:	f000 be67 	b.w	8003868 <strtod>
	...

08002b9c <__errno>:
 8002b9c:	4b01      	ldr	r3, [pc, #4]	; (8002ba4 <__errno+0x8>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2600      	movs	r6, #0
 8002bac:	4d0c      	ldr	r5, [pc, #48]	; (8002be0 <__libc_init_array+0x38>)
 8002bae:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	f002 fefc 	bl	80059b4 <_init>
 8002bbc:	2600      	movs	r6, #0
 8002bbe:	4d0a      	ldr	r5, [pc, #40]	; (8002be8 <__libc_init_array+0x40>)
 8002bc0:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <__libc_init_array+0x44>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	42a6      	cmp	r6, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd0:	4798      	blx	r3
 8002bd2:	3601      	adds	r6, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bda:	4798      	blx	r3
 8002bdc:	3601      	adds	r6, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	08005ea0 	.word	0x08005ea0
 8002be4:	08005ea0 	.word	0x08005ea0
 8002be8:	08005ea0 	.word	0x08005ea0
 8002bec:	08005ea4 	.word	0x08005ea4

08002bf0 <memset>:
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4402      	add	r2, r0
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <memset+0xa>
 8002bf8:	4770      	bx	lr
 8002bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfe:	e7f9      	b.n	8002bf4 <memset+0x4>

08002c00 <strcpy>:
 8002c00:	4603      	mov	r3, r0
 8002c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c06:	f803 2b01 	strb.w	r2, [r3], #1
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	d1f9      	bne.n	8002c02 <strcpy+0x2>
 8002c0e:	4770      	bx	lr

08002c10 <strstr>:
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	780c      	ldrb	r4, [r1, #0]
 8002c14:	b164      	cbz	r4, 8002c30 <strstr+0x20>
 8002c16:	4603      	mov	r3, r0
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	1c5e      	adds	r6, r3, #1
 8002c1e:	b90a      	cbnz	r2, 8002c24 <strstr+0x14>
 8002c20:	4610      	mov	r0, r2
 8002c22:	e005      	b.n	8002c30 <strstr+0x20>
 8002c24:	4294      	cmp	r4, r2
 8002c26:	d108      	bne.n	8002c3a <strstr+0x2a>
 8002c28:	460d      	mov	r5, r1
 8002c2a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002c2e:	b902      	cbnz	r2, 8002c32 <strstr+0x22>
 8002c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c32:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002c36:	4297      	cmp	r7, r2
 8002c38:	d0f7      	beq.n	8002c2a <strstr+0x1a>
 8002c3a:	4633      	mov	r3, r6
 8002c3c:	e7ec      	b.n	8002c18 <strstr+0x8>

08002c3e <sulp>:
 8002c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c42:	460f      	mov	r7, r1
 8002c44:	4690      	mov	r8, r2
 8002c46:	f001 fda5 	bl	8004794 <__ulp>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	460d      	mov	r5, r1
 8002c4e:	f1b8 0f00 	cmp.w	r8, #0
 8002c52:	d011      	beq.n	8002c78 <sulp+0x3a>
 8002c54:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8002c58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	dd0b      	ble.n	8002c78 <sulp+0x3a>
 8002c60:	2400      	movs	r4, #0
 8002c62:	051b      	lsls	r3, r3, #20
 8002c64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002c68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	462b      	mov	r3, r5
 8002c70:	f7fd fc32 	bl	80004d8 <__aeabi_dmul>
 8002c74:	4604      	mov	r4, r0
 8002c76:	460d      	mov	r5, r1
 8002c78:	4620      	mov	r0, r4
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c80 <_strtod_l>:
 8002c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c84:	469b      	mov	fp, r3
 8002c86:	2300      	movs	r3, #0
 8002c88:	b0a1      	sub	sp, #132	; 0x84
 8002c8a:	931c      	str	r3, [sp, #112]	; 0x70
 8002c8c:	4ba1      	ldr	r3, [pc, #644]	; (8002f14 <_strtod_l+0x294>)
 8002c8e:	4682      	mov	sl, r0
 8002c90:	681f      	ldr	r7, [r3, #0]
 8002c92:	460e      	mov	r6, r1
 8002c94:	4638      	mov	r0, r7
 8002c96:	9217      	str	r2, [sp, #92]	; 0x5c
 8002c98:	f7fd fa5a 	bl	8000150 <strlen>
 8002c9c:	f04f 0800 	mov.w	r8, #0
 8002ca0:	4604      	mov	r4, r0
 8002ca2:	f04f 0900 	mov.w	r9, #0
 8002ca6:	961b      	str	r6, [sp, #108]	; 0x6c
 8002ca8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	2a2b      	cmp	r2, #43	; 0x2b
 8002cae:	d04c      	beq.n	8002d4a <_strtod_l+0xca>
 8002cb0:	d83a      	bhi.n	8002d28 <_strtod_l+0xa8>
 8002cb2:	2a0d      	cmp	r2, #13
 8002cb4:	d833      	bhi.n	8002d1e <_strtod_l+0x9e>
 8002cb6:	2a08      	cmp	r2, #8
 8002cb8:	d833      	bhi.n	8002d22 <_strtod_l+0xa2>
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d03d      	beq.n	8002d3a <_strtod_l+0xba>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	930c      	str	r3, [sp, #48]	; 0x30
 8002cc2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002cc4:	782b      	ldrb	r3, [r5, #0]
 8002cc6:	2b30      	cmp	r3, #48	; 0x30
 8002cc8:	f040 80af 	bne.w	8002e2a <_strtod_l+0x1aa>
 8002ccc:	786b      	ldrb	r3, [r5, #1]
 8002cce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002cd2:	2b58      	cmp	r3, #88	; 0x58
 8002cd4:	d16c      	bne.n	8002db0 <_strtod_l+0x130>
 8002cd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cd8:	4650      	mov	r0, sl
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	ab1c      	add	r3, sp, #112	; 0x70
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4a8d      	ldr	r2, [pc, #564]	; (8002f18 <_strtod_l+0x298>)
 8002ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8002ce6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ce8:	a91b      	add	r1, sp, #108	; 0x6c
 8002cea:	f000 febd 	bl	8003a68 <__gethex>
 8002cee:	f010 0607 	ands.w	r6, r0, #7
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	d005      	beq.n	8002d02 <_strtod_l+0x82>
 8002cf6:	2e06      	cmp	r6, #6
 8002cf8:	d129      	bne.n	8002d4e <_strtod_l+0xce>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	3501      	adds	r5, #1
 8002cfe:	951b      	str	r5, [sp, #108]	; 0x6c
 8002d00:	930c      	str	r3, [sp, #48]	; 0x30
 8002d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 8596 	bne.w	8003836 <_strtod_l+0xbb6>
 8002d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d0c:	b1d3      	cbz	r3, 8002d44 <_strtod_l+0xc4>
 8002d0e:	4642      	mov	r2, r8
 8002d10:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002d14:	4610      	mov	r0, r2
 8002d16:	4619      	mov	r1, r3
 8002d18:	b021      	add	sp, #132	; 0x84
 8002d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d1e:	2a20      	cmp	r2, #32
 8002d20:	d1cd      	bne.n	8002cbe <_strtod_l+0x3e>
 8002d22:	3301      	adds	r3, #1
 8002d24:	931b      	str	r3, [sp, #108]	; 0x6c
 8002d26:	e7bf      	b.n	8002ca8 <_strtod_l+0x28>
 8002d28:	2a2d      	cmp	r2, #45	; 0x2d
 8002d2a:	d1c8      	bne.n	8002cbe <_strtod_l+0x3e>
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	920c      	str	r2, [sp, #48]	; 0x30
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	921b      	str	r2, [sp, #108]	; 0x6c
 8002d34:	785b      	ldrb	r3, [r3, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1c3      	bne.n	8002cc2 <_strtod_l+0x42>
 8002d3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002d3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 8577 	bne.w	8003832 <_strtod_l+0xbb2>
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	e7e4      	b.n	8002d14 <_strtod_l+0x94>
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	e7ef      	b.n	8002d2e <_strtod_l+0xae>
 8002d4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002d50:	b13a      	cbz	r2, 8002d62 <_strtod_l+0xe2>
 8002d52:	2135      	movs	r1, #53	; 0x35
 8002d54:	a81e      	add	r0, sp, #120	; 0x78
 8002d56:	f001 fe21 	bl	800499c <__copybits>
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002d5e:	f001 f9e9 	bl	8004134 <_Bfree>
 8002d62:	3e01      	subs	r6, #1
 8002d64:	2e05      	cmp	r6, #5
 8002d66:	d807      	bhi.n	8002d78 <_strtod_l+0xf8>
 8002d68:	e8df f006 	tbb	[pc, r6]
 8002d6c:	1d180b0e 	.word	0x1d180b0e
 8002d70:	030e      	.short	0x030e
 8002d72:	f04f 0900 	mov.w	r9, #0
 8002d76:	46c8      	mov	r8, r9
 8002d78:	0721      	lsls	r1, r4, #28
 8002d7a:	d5c2      	bpl.n	8002d02 <_strtod_l+0x82>
 8002d7c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8002d80:	e7bf      	b.n	8002d02 <_strtod_l+0x82>
 8002d82:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8002d86:	e7f7      	b.n	8002d78 <_strtod_l+0xf8>
 8002d88:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002d8a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8002d8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002d92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d96:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8002d9a:	e7ed      	b.n	8002d78 <_strtod_l+0xf8>
 8002d9c:	f04f 0800 	mov.w	r8, #0
 8002da0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8002f1c <_strtod_l+0x29c>
 8002da4:	e7e8      	b.n	8002d78 <_strtod_l+0xf8>
 8002da6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8002daa:	f04f 38ff 	mov.w	r8, #4294967295
 8002dae:	e7e3      	b.n	8002d78 <_strtod_l+0xf8>
 8002db0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	921b      	str	r2, [sp, #108]	; 0x6c
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	2b30      	cmp	r3, #48	; 0x30
 8002dba:	d0f9      	beq.n	8002db0 <_strtod_l+0x130>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0a0      	beq.n	8002d02 <_strtod_l+0x82>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9307      	str	r3, [sp, #28]
 8002dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002dc6:	220a      	movs	r2, #10
 8002dc8:	9308      	str	r3, [sp, #32]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	469b      	mov	fp, r3
 8002dce:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002dd2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002dd4:	7805      	ldrb	r5, [r0, #0]
 8002dd6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002dda:	b2d9      	uxtb	r1, r3
 8002ddc:	2909      	cmp	r1, #9
 8002dde:	d926      	bls.n	8002e2e <_strtod_l+0x1ae>
 8002de0:	4622      	mov	r2, r4
 8002de2:	4639      	mov	r1, r7
 8002de4:	f002 f9d6 	bl	8005194 <strncmp>
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d032      	beq.n	8002e52 <_strtod_l+0x1d2>
 8002dec:	2000      	movs	r0, #0
 8002dee:	462b      	mov	r3, r5
 8002df0:	465c      	mov	r4, fp
 8002df2:	4602      	mov	r2, r0
 8002df4:	9004      	str	r0, [sp, #16]
 8002df6:	2b65      	cmp	r3, #101	; 0x65
 8002df8:	d001      	beq.n	8002dfe <_strtod_l+0x17e>
 8002dfa:	2b45      	cmp	r3, #69	; 0x45
 8002dfc:	d113      	bne.n	8002e26 <_strtod_l+0x1a6>
 8002dfe:	b91c      	cbnz	r4, 8002e08 <_strtod_l+0x188>
 8002e00:	9b07      	ldr	r3, [sp, #28]
 8002e02:	4303      	orrs	r3, r0
 8002e04:	d099      	beq.n	8002d3a <_strtod_l+0xba>
 8002e06:	2400      	movs	r4, #0
 8002e08:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8002e0a:	1c73      	adds	r3, r6, #1
 8002e0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8002e0e:	7873      	ldrb	r3, [r6, #1]
 8002e10:	2b2b      	cmp	r3, #43	; 0x2b
 8002e12:	d078      	beq.n	8002f06 <_strtod_l+0x286>
 8002e14:	2b2d      	cmp	r3, #45	; 0x2d
 8002e16:	d07b      	beq.n	8002f10 <_strtod_l+0x290>
 8002e18:	2700      	movs	r7, #0
 8002e1a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002e1e:	2909      	cmp	r1, #9
 8002e20:	f240 8082 	bls.w	8002f28 <_strtod_l+0x2a8>
 8002e24:	961b      	str	r6, [sp, #108]	; 0x6c
 8002e26:	2500      	movs	r5, #0
 8002e28:	e09e      	b.n	8002f68 <_strtod_l+0x2e8>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e7c9      	b.n	8002dc2 <_strtod_l+0x142>
 8002e2e:	f1bb 0f08 	cmp.w	fp, #8
 8002e32:	bfd5      	itete	le
 8002e34:	9906      	ldrle	r1, [sp, #24]
 8002e36:	9905      	ldrgt	r1, [sp, #20]
 8002e38:	fb02 3301 	mlale	r3, r2, r1, r3
 8002e3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8002e40:	f100 0001 	add.w	r0, r0, #1
 8002e44:	bfd4      	ite	le
 8002e46:	9306      	strle	r3, [sp, #24]
 8002e48:	9305      	strgt	r3, [sp, #20]
 8002e4a:	f10b 0b01 	add.w	fp, fp, #1
 8002e4e:	901b      	str	r0, [sp, #108]	; 0x6c
 8002e50:	e7bf      	b.n	8002dd2 <_strtod_l+0x152>
 8002e52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e54:	191a      	adds	r2, r3, r4
 8002e56:	921b      	str	r2, [sp, #108]	; 0x6c
 8002e58:	5d1b      	ldrb	r3, [r3, r4]
 8002e5a:	f1bb 0f00 	cmp.w	fp, #0
 8002e5e:	d036      	beq.n	8002ece <_strtod_l+0x24e>
 8002e60:	465c      	mov	r4, fp
 8002e62:	9004      	str	r0, [sp, #16]
 8002e64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002e68:	2a09      	cmp	r2, #9
 8002e6a:	d912      	bls.n	8002e92 <_strtod_l+0x212>
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	e7c2      	b.n	8002df6 <_strtod_l+0x176>
 8002e70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e72:	3001      	adds	r0, #1
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	921b      	str	r2, [sp, #108]	; 0x6c
 8002e78:	785b      	ldrb	r3, [r3, #1]
 8002e7a:	2b30      	cmp	r3, #48	; 0x30
 8002e7c:	d0f8      	beq.n	8002e70 <_strtod_l+0x1f0>
 8002e7e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8002e82:	2a08      	cmp	r2, #8
 8002e84:	f200 84dc 	bhi.w	8003840 <_strtod_l+0xbc0>
 8002e88:	9004      	str	r0, [sp, #16]
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002e90:	9208      	str	r2, [sp, #32]
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	f100 0201 	add.w	r2, r0, #1
 8002e98:	d013      	beq.n	8002ec2 <_strtod_l+0x242>
 8002e9a:	9904      	ldr	r1, [sp, #16]
 8002e9c:	1905      	adds	r5, r0, r4
 8002e9e:	4411      	add	r1, r2
 8002ea0:	9104      	str	r1, [sp, #16]
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	210a      	movs	r1, #10
 8002ea6:	42aa      	cmp	r2, r5
 8002ea8:	d113      	bne.n	8002ed2 <_strtod_l+0x252>
 8002eaa:	1822      	adds	r2, r4, r0
 8002eac:	2a08      	cmp	r2, #8
 8002eae:	f104 0401 	add.w	r4, r4, #1
 8002eb2:	4404      	add	r4, r0
 8002eb4:	dc1b      	bgt.n	8002eee <_strtod_l+0x26e>
 8002eb6:	220a      	movs	r2, #10
 8002eb8:	9906      	ldr	r1, [sp, #24]
 8002eba:	fb02 3301 	mla	r3, r2, r1, r3
 8002ebe:	9306      	str	r3, [sp, #24]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	1c59      	adds	r1, r3, #1
 8002ec8:	911b      	str	r1, [sp, #108]	; 0x6c
 8002eca:	785b      	ldrb	r3, [r3, #1]
 8002ecc:	e7ca      	b.n	8002e64 <_strtod_l+0x1e4>
 8002ece:	4658      	mov	r0, fp
 8002ed0:	e7d3      	b.n	8002e7a <_strtod_l+0x1fa>
 8002ed2:	2a08      	cmp	r2, #8
 8002ed4:	dc04      	bgt.n	8002ee0 <_strtod_l+0x260>
 8002ed6:	9f06      	ldr	r7, [sp, #24]
 8002ed8:	434f      	muls	r7, r1
 8002eda:	9706      	str	r7, [sp, #24]
 8002edc:	3201      	adds	r2, #1
 8002ede:	e7e2      	b.n	8002ea6 <_strtod_l+0x226>
 8002ee0:	1c57      	adds	r7, r2, #1
 8002ee2:	2f10      	cmp	r7, #16
 8002ee4:	bfde      	ittt	le
 8002ee6:	9f05      	ldrle	r7, [sp, #20]
 8002ee8:	434f      	mulle	r7, r1
 8002eea:	9705      	strle	r7, [sp, #20]
 8002eec:	e7f6      	b.n	8002edc <_strtod_l+0x25c>
 8002eee:	2c10      	cmp	r4, #16
 8002ef0:	bfdf      	itttt	le
 8002ef2:	220a      	movle	r2, #10
 8002ef4:	9905      	ldrle	r1, [sp, #20]
 8002ef6:	fb02 3301 	mlale	r3, r2, r1, r3
 8002efa:	9305      	strle	r3, [sp, #20]
 8002efc:	e7e0      	b.n	8002ec0 <_strtod_l+0x240>
 8002efe:	2300      	movs	r3, #0
 8002f00:	2201      	movs	r2, #1
 8002f02:	9304      	str	r3, [sp, #16]
 8002f04:	e77c      	b.n	8002e00 <_strtod_l+0x180>
 8002f06:	2700      	movs	r7, #0
 8002f08:	1cb3      	adds	r3, r6, #2
 8002f0a:	931b      	str	r3, [sp, #108]	; 0x6c
 8002f0c:	78b3      	ldrb	r3, [r6, #2]
 8002f0e:	e784      	b.n	8002e1a <_strtod_l+0x19a>
 8002f10:	2701      	movs	r7, #1
 8002f12:	e7f9      	b.n	8002f08 <_strtod_l+0x288>
 8002f14:	08005b98 	.word	0x08005b98
 8002f18:	08005a14 	.word	0x08005a14
 8002f1c:	7ff00000 	.word	0x7ff00000
 8002f20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	911b      	str	r1, [sp, #108]	; 0x6c
 8002f26:	785b      	ldrb	r3, [r3, #1]
 8002f28:	2b30      	cmp	r3, #48	; 0x30
 8002f2a:	d0f9      	beq.n	8002f20 <_strtod_l+0x2a0>
 8002f2c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8002f30:	2908      	cmp	r1, #8
 8002f32:	f63f af78 	bhi.w	8002e26 <_strtod_l+0x1a6>
 8002f36:	f04f 0e0a 	mov.w	lr, #10
 8002f3a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8002f3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f40:	9309      	str	r3, [sp, #36]	; 0x24
 8002f42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	911b      	str	r1, [sp, #108]	; 0x6c
 8002f48:	785b      	ldrb	r3, [r3, #1]
 8002f4a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002f4e:	2d09      	cmp	r5, #9
 8002f50:	d935      	bls.n	8002fbe <_strtod_l+0x33e>
 8002f52:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002f54:	1b49      	subs	r1, r1, r5
 8002f56:	2908      	cmp	r1, #8
 8002f58:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8002f5c:	dc02      	bgt.n	8002f64 <_strtod_l+0x2e4>
 8002f5e:	4565      	cmp	r5, ip
 8002f60:	bfa8      	it	ge
 8002f62:	4665      	movge	r5, ip
 8002f64:	b107      	cbz	r7, 8002f68 <_strtod_l+0x2e8>
 8002f66:	426d      	negs	r5, r5
 8002f68:	2c00      	cmp	r4, #0
 8002f6a:	d14c      	bne.n	8003006 <_strtod_l+0x386>
 8002f6c:	9907      	ldr	r1, [sp, #28]
 8002f6e:	4301      	orrs	r1, r0
 8002f70:	f47f aec7 	bne.w	8002d02 <_strtod_l+0x82>
 8002f74:	2a00      	cmp	r2, #0
 8002f76:	f47f aee0 	bne.w	8002d3a <_strtod_l+0xba>
 8002f7a:	2b69      	cmp	r3, #105	; 0x69
 8002f7c:	d026      	beq.n	8002fcc <_strtod_l+0x34c>
 8002f7e:	dc23      	bgt.n	8002fc8 <_strtod_l+0x348>
 8002f80:	2b49      	cmp	r3, #73	; 0x49
 8002f82:	d023      	beq.n	8002fcc <_strtod_l+0x34c>
 8002f84:	2b4e      	cmp	r3, #78	; 0x4e
 8002f86:	f47f aed8 	bne.w	8002d3a <_strtod_l+0xba>
 8002f8a:	499c      	ldr	r1, [pc, #624]	; (80031fc <_strtod_l+0x57c>)
 8002f8c:	a81b      	add	r0, sp, #108	; 0x6c
 8002f8e:	f000 ffb9 	bl	8003f04 <__match>
 8002f92:	2800      	cmp	r0, #0
 8002f94:	f43f aed1 	beq.w	8002d3a <_strtod_l+0xba>
 8002f98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b28      	cmp	r3, #40	; 0x28
 8002f9e:	d12c      	bne.n	8002ffa <_strtod_l+0x37a>
 8002fa0:	4997      	ldr	r1, [pc, #604]	; (8003200 <_strtod_l+0x580>)
 8002fa2:	aa1e      	add	r2, sp, #120	; 0x78
 8002fa4:	a81b      	add	r0, sp, #108	; 0x6c
 8002fa6:	f000 ffc1 	bl	8003f2c <__hexnan>
 8002faa:	2805      	cmp	r0, #5
 8002fac:	d125      	bne.n	8002ffa <_strtod_l+0x37a>
 8002fae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002fb0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8002fb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8002fb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8002fbc:	e6a1      	b.n	8002d02 <_strtod_l+0x82>
 8002fbe:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8002fc2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8002fc6:	e7bc      	b.n	8002f42 <_strtod_l+0x2c2>
 8002fc8:	2b6e      	cmp	r3, #110	; 0x6e
 8002fca:	e7dc      	b.n	8002f86 <_strtod_l+0x306>
 8002fcc:	498d      	ldr	r1, [pc, #564]	; (8003204 <_strtod_l+0x584>)
 8002fce:	a81b      	add	r0, sp, #108	; 0x6c
 8002fd0:	f000 ff98 	bl	8003f04 <__match>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f43f aeb0 	beq.w	8002d3a <_strtod_l+0xba>
 8002fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002fdc:	498a      	ldr	r1, [pc, #552]	; (8003208 <_strtod_l+0x588>)
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	a81b      	add	r0, sp, #108	; 0x6c
 8002fe2:	931b      	str	r3, [sp, #108]	; 0x6c
 8002fe4:	f000 ff8e 	bl	8003f04 <__match>
 8002fe8:	b910      	cbnz	r0, 8002ff0 <_strtod_l+0x370>
 8002fea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002fec:	3301      	adds	r3, #1
 8002fee:	931b      	str	r3, [sp, #108]	; 0x6c
 8002ff0:	f04f 0800 	mov.w	r8, #0
 8002ff4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003218 <_strtod_l+0x598>
 8002ff8:	e683      	b.n	8002d02 <_strtod_l+0x82>
 8002ffa:	4884      	ldr	r0, [pc, #528]	; (800320c <_strtod_l+0x58c>)
 8002ffc:	f002 f8b4 	bl	8005168 <nan>
 8003000:	4680      	mov	r8, r0
 8003002:	4689      	mov	r9, r1
 8003004:	e67d      	b.n	8002d02 <_strtod_l+0x82>
 8003006:	9b04      	ldr	r3, [sp, #16]
 8003008:	f1bb 0f00 	cmp.w	fp, #0
 800300c:	bf08      	it	eq
 800300e:	46a3      	moveq	fp, r4
 8003010:	1aeb      	subs	r3, r5, r3
 8003012:	2c10      	cmp	r4, #16
 8003014:	9806      	ldr	r0, [sp, #24]
 8003016:	4626      	mov	r6, r4
 8003018:	9307      	str	r3, [sp, #28]
 800301a:	bfa8      	it	ge
 800301c:	2610      	movge	r6, #16
 800301e:	f7fd f9e1 	bl	80003e4 <__aeabi_ui2d>
 8003022:	2c09      	cmp	r4, #9
 8003024:	4680      	mov	r8, r0
 8003026:	4689      	mov	r9, r1
 8003028:	dd13      	ble.n	8003052 <_strtod_l+0x3d2>
 800302a:	4b79      	ldr	r3, [pc, #484]	; (8003210 <_strtod_l+0x590>)
 800302c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003030:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003034:	f7fd fa50 	bl	80004d8 <__aeabi_dmul>
 8003038:	4680      	mov	r8, r0
 800303a:	9805      	ldr	r0, [sp, #20]
 800303c:	4689      	mov	r9, r1
 800303e:	f7fd f9d1 	bl	80003e4 <__aeabi_ui2d>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4640      	mov	r0, r8
 8003048:	4649      	mov	r1, r9
 800304a:	f7fd f88f 	bl	800016c <__adddf3>
 800304e:	4680      	mov	r8, r0
 8003050:	4689      	mov	r9, r1
 8003052:	2c0f      	cmp	r4, #15
 8003054:	dc36      	bgt.n	80030c4 <_strtod_l+0x444>
 8003056:	9b07      	ldr	r3, [sp, #28]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f43f ae52 	beq.w	8002d02 <_strtod_l+0x82>
 800305e:	dd22      	ble.n	80030a6 <_strtod_l+0x426>
 8003060:	2b16      	cmp	r3, #22
 8003062:	dc09      	bgt.n	8003078 <_strtod_l+0x3f8>
 8003064:	4c6a      	ldr	r4, [pc, #424]	; (8003210 <_strtod_l+0x590>)
 8003066:	4642      	mov	r2, r8
 8003068:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800306c:	464b      	mov	r3, r9
 800306e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003072:	f7fd fa31 	bl	80004d8 <__aeabi_dmul>
 8003076:	e7c3      	b.n	8003000 <_strtod_l+0x380>
 8003078:	9a07      	ldr	r2, [sp, #28]
 800307a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800307e:	4293      	cmp	r3, r2
 8003080:	db20      	blt.n	80030c4 <_strtod_l+0x444>
 8003082:	4d63      	ldr	r5, [pc, #396]	; (8003210 <_strtod_l+0x590>)
 8003084:	f1c4 040f 	rsb	r4, r4, #15
 8003088:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800308c:	4642      	mov	r2, r8
 800308e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003092:	464b      	mov	r3, r9
 8003094:	f7fd fa20 	bl	80004d8 <__aeabi_dmul>
 8003098:	9b07      	ldr	r3, [sp, #28]
 800309a:	1b1c      	subs	r4, r3, r4
 800309c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80030a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80030a4:	e7e5      	b.n	8003072 <_strtod_l+0x3f2>
 80030a6:	9b07      	ldr	r3, [sp, #28]
 80030a8:	3316      	adds	r3, #22
 80030aa:	db0b      	blt.n	80030c4 <_strtod_l+0x444>
 80030ac:	9b04      	ldr	r3, [sp, #16]
 80030ae:	4a58      	ldr	r2, [pc, #352]	; (8003210 <_strtod_l+0x590>)
 80030b0:	1b5d      	subs	r5, r3, r5
 80030b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80030b6:	4640      	mov	r0, r8
 80030b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80030bc:	4649      	mov	r1, r9
 80030be:	f7fd fb35 	bl	800072c <__aeabi_ddiv>
 80030c2:	e79d      	b.n	8003000 <_strtod_l+0x380>
 80030c4:	9b07      	ldr	r3, [sp, #28]
 80030c6:	1ba6      	subs	r6, r4, r6
 80030c8:	441e      	add	r6, r3
 80030ca:	2e00      	cmp	r6, #0
 80030cc:	dd71      	ble.n	80031b2 <_strtod_l+0x532>
 80030ce:	f016 030f 	ands.w	r3, r6, #15
 80030d2:	d00a      	beq.n	80030ea <_strtod_l+0x46a>
 80030d4:	494e      	ldr	r1, [pc, #312]	; (8003210 <_strtod_l+0x590>)
 80030d6:	4642      	mov	r2, r8
 80030d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80030dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030e0:	464b      	mov	r3, r9
 80030e2:	f7fd f9f9 	bl	80004d8 <__aeabi_dmul>
 80030e6:	4680      	mov	r8, r0
 80030e8:	4689      	mov	r9, r1
 80030ea:	f036 060f 	bics.w	r6, r6, #15
 80030ee:	d050      	beq.n	8003192 <_strtod_l+0x512>
 80030f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80030f4:	dd27      	ble.n	8003146 <_strtod_l+0x4c6>
 80030f6:	f04f 0b00 	mov.w	fp, #0
 80030fa:	f8cd b010 	str.w	fp, [sp, #16]
 80030fe:	f8cd b020 	str.w	fp, [sp, #32]
 8003102:	f8cd b018 	str.w	fp, [sp, #24]
 8003106:	2322      	movs	r3, #34	; 0x22
 8003108:	f04f 0800 	mov.w	r8, #0
 800310c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003218 <_strtod_l+0x598>
 8003110:	f8ca 3000 	str.w	r3, [sl]
 8003114:	9b08      	ldr	r3, [sp, #32]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f43f adf3 	beq.w	8002d02 <_strtod_l+0x82>
 800311c:	4650      	mov	r0, sl
 800311e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003120:	f001 f808 	bl	8004134 <_Bfree>
 8003124:	4650      	mov	r0, sl
 8003126:	9906      	ldr	r1, [sp, #24]
 8003128:	f001 f804 	bl	8004134 <_Bfree>
 800312c:	4650      	mov	r0, sl
 800312e:	9904      	ldr	r1, [sp, #16]
 8003130:	f001 f800 	bl	8004134 <_Bfree>
 8003134:	4650      	mov	r0, sl
 8003136:	9908      	ldr	r1, [sp, #32]
 8003138:	f000 fffc 	bl	8004134 <_Bfree>
 800313c:	4659      	mov	r1, fp
 800313e:	4650      	mov	r0, sl
 8003140:	f000 fff8 	bl	8004134 <_Bfree>
 8003144:	e5dd      	b.n	8002d02 <_strtod_l+0x82>
 8003146:	2300      	movs	r3, #0
 8003148:	4640      	mov	r0, r8
 800314a:	4649      	mov	r1, r9
 800314c:	461f      	mov	r7, r3
 800314e:	1136      	asrs	r6, r6, #4
 8003150:	2e01      	cmp	r6, #1
 8003152:	dc21      	bgt.n	8003198 <_strtod_l+0x518>
 8003154:	b10b      	cbz	r3, 800315a <_strtod_l+0x4da>
 8003156:	4680      	mov	r8, r0
 8003158:	4689      	mov	r9, r1
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <_strtod_l+0x594>)
 800315c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8003160:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8003164:	4642      	mov	r2, r8
 8003166:	e9d7 0100 	ldrd	r0, r1, [r7]
 800316a:	464b      	mov	r3, r9
 800316c:	f7fd f9b4 	bl	80004d8 <__aeabi_dmul>
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <_strtod_l+0x598>)
 8003172:	460a      	mov	r2, r1
 8003174:	400b      	ands	r3, r1
 8003176:	4929      	ldr	r1, [pc, #164]	; (800321c <_strtod_l+0x59c>)
 8003178:	4680      	mov	r8, r0
 800317a:	428b      	cmp	r3, r1
 800317c:	d8bb      	bhi.n	80030f6 <_strtod_l+0x476>
 800317e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003182:	428b      	cmp	r3, r1
 8003184:	bf86      	itte	hi
 8003186:	f04f 38ff 	movhi.w	r8, #4294967295
 800318a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003220 <_strtod_l+0x5a0>
 800318e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8003192:	2300      	movs	r3, #0
 8003194:	9305      	str	r3, [sp, #20]
 8003196:	e07e      	b.n	8003296 <_strtod_l+0x616>
 8003198:	07f2      	lsls	r2, r6, #31
 800319a:	d507      	bpl.n	80031ac <_strtod_l+0x52c>
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <_strtod_l+0x594>)
 800319e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd f997 	bl	80004d8 <__aeabi_dmul>
 80031aa:	2301      	movs	r3, #1
 80031ac:	3701      	adds	r7, #1
 80031ae:	1076      	asrs	r6, r6, #1
 80031b0:	e7ce      	b.n	8003150 <_strtod_l+0x4d0>
 80031b2:	d0ee      	beq.n	8003192 <_strtod_l+0x512>
 80031b4:	4276      	negs	r6, r6
 80031b6:	f016 020f 	ands.w	r2, r6, #15
 80031ba:	d00a      	beq.n	80031d2 <_strtod_l+0x552>
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <_strtod_l+0x590>)
 80031be:	4640      	mov	r0, r8
 80031c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80031c4:	4649      	mov	r1, r9
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f7fd faaf 	bl	800072c <__aeabi_ddiv>
 80031ce:	4680      	mov	r8, r0
 80031d0:	4689      	mov	r9, r1
 80031d2:	1136      	asrs	r6, r6, #4
 80031d4:	d0dd      	beq.n	8003192 <_strtod_l+0x512>
 80031d6:	2e1f      	cmp	r6, #31
 80031d8:	dd24      	ble.n	8003224 <_strtod_l+0x5a4>
 80031da:	f04f 0b00 	mov.w	fp, #0
 80031de:	f8cd b010 	str.w	fp, [sp, #16]
 80031e2:	f8cd b020 	str.w	fp, [sp, #32]
 80031e6:	f8cd b018 	str.w	fp, [sp, #24]
 80031ea:	2322      	movs	r3, #34	; 0x22
 80031ec:	f04f 0800 	mov.w	r8, #0
 80031f0:	f04f 0900 	mov.w	r9, #0
 80031f4:	f8ca 3000 	str.w	r3, [sl]
 80031f8:	e78c      	b.n	8003114 <_strtod_l+0x494>
 80031fa:	bf00      	nop
 80031fc:	08005a11 	.word	0x08005a11
 8003200:	08005a28 	.word	0x08005a28
 8003204:	08005a08 	.word	0x08005a08
 8003208:	08005a0b 	.word	0x08005a0b
 800320c:	08005b1b 	.word	0x08005b1b
 8003210:	08005c38 	.word	0x08005c38
 8003214:	08005c10 	.word	0x08005c10
 8003218:	7ff00000 	.word	0x7ff00000
 800321c:	7ca00000 	.word	0x7ca00000
 8003220:	7fefffff 	.word	0x7fefffff
 8003224:	f016 0310 	ands.w	r3, r6, #16
 8003228:	bf18      	it	ne
 800322a:	236a      	movne	r3, #106	; 0x6a
 800322c:	4640      	mov	r0, r8
 800322e:	9305      	str	r3, [sp, #20]
 8003230:	4649      	mov	r1, r9
 8003232:	2300      	movs	r3, #0
 8003234:	4fb2      	ldr	r7, [pc, #712]	; (8003500 <_strtod_l+0x880>)
 8003236:	07f2      	lsls	r2, r6, #31
 8003238:	d504      	bpl.n	8003244 <_strtod_l+0x5c4>
 800323a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323e:	f7fd f94b 	bl	80004d8 <__aeabi_dmul>
 8003242:	2301      	movs	r3, #1
 8003244:	1076      	asrs	r6, r6, #1
 8003246:	f107 0708 	add.w	r7, r7, #8
 800324a:	d1f4      	bne.n	8003236 <_strtod_l+0x5b6>
 800324c:	b10b      	cbz	r3, 8003252 <_strtod_l+0x5d2>
 800324e:	4680      	mov	r8, r0
 8003250:	4689      	mov	r9, r1
 8003252:	9b05      	ldr	r3, [sp, #20]
 8003254:	b1bb      	cbz	r3, 8003286 <_strtod_l+0x606>
 8003256:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800325a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800325e:	2b00      	cmp	r3, #0
 8003260:	4649      	mov	r1, r9
 8003262:	dd10      	ble.n	8003286 <_strtod_l+0x606>
 8003264:	2b1f      	cmp	r3, #31
 8003266:	f340 812b 	ble.w	80034c0 <_strtod_l+0x840>
 800326a:	2b34      	cmp	r3, #52	; 0x34
 800326c:	bfd8      	it	le
 800326e:	f04f 32ff 	movle.w	r2, #4294967295
 8003272:	f04f 0800 	mov.w	r8, #0
 8003276:	bfcf      	iteee	gt
 8003278:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800327c:	3b20      	suble	r3, #32
 800327e:	fa02 f303 	lslle.w	r3, r2, r3
 8003282:	ea03 0901 	andle.w	r9, r3, r1
 8003286:	2200      	movs	r2, #0
 8003288:	2300      	movs	r3, #0
 800328a:	4640      	mov	r0, r8
 800328c:	4649      	mov	r1, r9
 800328e:	f7fd fb8b 	bl	80009a8 <__aeabi_dcmpeq>
 8003292:	2800      	cmp	r0, #0
 8003294:	d1a1      	bne.n	80031da <_strtod_l+0x55a>
 8003296:	9b06      	ldr	r3, [sp, #24]
 8003298:	465a      	mov	r2, fp
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4650      	mov	r0, sl
 800329e:	4623      	mov	r3, r4
 80032a0:	9908      	ldr	r1, [sp, #32]
 80032a2:	f000 ffb3 	bl	800420c <__s2b>
 80032a6:	9008      	str	r0, [sp, #32]
 80032a8:	2800      	cmp	r0, #0
 80032aa:	f43f af24 	beq.w	80030f6 <_strtod_l+0x476>
 80032ae:	9b04      	ldr	r3, [sp, #16]
 80032b0:	f04f 0b00 	mov.w	fp, #0
 80032b4:	1b5d      	subs	r5, r3, r5
 80032b6:	9b07      	ldr	r3, [sp, #28]
 80032b8:	f8cd b010 	str.w	fp, [sp, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bfb4      	ite	lt
 80032c0:	462b      	movlt	r3, r5
 80032c2:	2300      	movge	r3, #0
 80032c4:	930e      	str	r3, [sp, #56]	; 0x38
 80032c6:	9b07      	ldr	r3, [sp, #28]
 80032c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80032cc:	9316      	str	r3, [sp, #88]	; 0x58
 80032ce:	9b08      	ldr	r3, [sp, #32]
 80032d0:	4650      	mov	r0, sl
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	f000 feee 	bl	80040b4 <_Balloc>
 80032d8:	9006      	str	r0, [sp, #24]
 80032da:	2800      	cmp	r0, #0
 80032dc:	f43f af13 	beq.w	8003106 <_strtod_l+0x486>
 80032e0:	9b08      	ldr	r3, [sp, #32]
 80032e2:	300c      	adds	r0, #12
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	f103 010c 	add.w	r1, r3, #12
 80032ea:	3202      	adds	r2, #2
 80032ec:	0092      	lsls	r2, r2, #2
 80032ee:	f000 fed3 	bl	8004098 <memcpy>
 80032f2:	ab1e      	add	r3, sp, #120	; 0x78
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	ab1d      	add	r3, sp, #116	; 0x74
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	4642      	mov	r2, r8
 80032fc:	464b      	mov	r3, r9
 80032fe:	4650      	mov	r0, sl
 8003300:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003304:	f001 fac0 	bl	8004888 <__d2b>
 8003308:	901c      	str	r0, [sp, #112]	; 0x70
 800330a:	2800      	cmp	r0, #0
 800330c:	f43f aefb 	beq.w	8003106 <_strtod_l+0x486>
 8003310:	2101      	movs	r1, #1
 8003312:	4650      	mov	r0, sl
 8003314:	f001 f812 	bl	800433c <__i2b>
 8003318:	4603      	mov	r3, r0
 800331a:	9004      	str	r0, [sp, #16]
 800331c:	2800      	cmp	r0, #0
 800331e:	f43f aef2 	beq.w	8003106 <_strtod_l+0x486>
 8003322:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003324:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003326:	2d00      	cmp	r5, #0
 8003328:	bfab      	itete	ge
 800332a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800332c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800332e:	18ee      	addge	r6, r5, r3
 8003330:	1b5c      	sublt	r4, r3, r5
 8003332:	9b05      	ldr	r3, [sp, #20]
 8003334:	bfa8      	it	ge
 8003336:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003338:	eba5 0503 	sub.w	r5, r5, r3
 800333c:	4415      	add	r5, r2
 800333e:	4b71      	ldr	r3, [pc, #452]	; (8003504 <_strtod_l+0x884>)
 8003340:	f105 35ff 	add.w	r5, r5, #4294967295
 8003344:	bfb8      	it	lt
 8003346:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003348:	429d      	cmp	r5, r3
 800334a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800334e:	f280 80c9 	bge.w	80034e4 <_strtod_l+0x864>
 8003352:	1b5b      	subs	r3, r3, r5
 8003354:	2b1f      	cmp	r3, #31
 8003356:	f04f 0701 	mov.w	r7, #1
 800335a:	eba2 0203 	sub.w	r2, r2, r3
 800335e:	f300 80b6 	bgt.w	80034ce <_strtod_l+0x84e>
 8003362:	2500      	movs	r5, #0
 8003364:	fa07 f303 	lsl.w	r3, r7, r3
 8003368:	930f      	str	r3, [sp, #60]	; 0x3c
 800336a:	18b7      	adds	r7, r6, r2
 800336c:	9b05      	ldr	r3, [sp, #20]
 800336e:	42be      	cmp	r6, r7
 8003370:	4414      	add	r4, r2
 8003372:	441c      	add	r4, r3
 8003374:	4633      	mov	r3, r6
 8003376:	bfa8      	it	ge
 8003378:	463b      	movge	r3, r7
 800337a:	42a3      	cmp	r3, r4
 800337c:	bfa8      	it	ge
 800337e:	4623      	movge	r3, r4
 8003380:	2b00      	cmp	r3, #0
 8003382:	bfc2      	ittt	gt
 8003384:	1aff      	subgt	r7, r7, r3
 8003386:	1ae4      	subgt	r4, r4, r3
 8003388:	1af6      	subgt	r6, r6, r3
 800338a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800338c:	2b00      	cmp	r3, #0
 800338e:	dd17      	ble.n	80033c0 <_strtod_l+0x740>
 8003390:	461a      	mov	r2, r3
 8003392:	4650      	mov	r0, sl
 8003394:	9904      	ldr	r1, [sp, #16]
 8003396:	f001 f88b 	bl	80044b0 <__pow5mult>
 800339a:	9004      	str	r0, [sp, #16]
 800339c:	2800      	cmp	r0, #0
 800339e:	f43f aeb2 	beq.w	8003106 <_strtod_l+0x486>
 80033a2:	4601      	mov	r1, r0
 80033a4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80033a6:	4650      	mov	r0, sl
 80033a8:	f000 ffde 	bl	8004368 <__multiply>
 80033ac:	9009      	str	r0, [sp, #36]	; 0x24
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f43f aea9 	beq.w	8003106 <_strtod_l+0x486>
 80033b4:	4650      	mov	r0, sl
 80033b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80033b8:	f000 febc 	bl	8004134 <_Bfree>
 80033bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033be:	931c      	str	r3, [sp, #112]	; 0x70
 80033c0:	2f00      	cmp	r7, #0
 80033c2:	f300 8093 	bgt.w	80034ec <_strtod_l+0x86c>
 80033c6:	9b07      	ldr	r3, [sp, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	dd08      	ble.n	80033de <_strtod_l+0x75e>
 80033cc:	4650      	mov	r0, sl
 80033ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80033d0:	9906      	ldr	r1, [sp, #24]
 80033d2:	f001 f86d 	bl	80044b0 <__pow5mult>
 80033d6:	9006      	str	r0, [sp, #24]
 80033d8:	2800      	cmp	r0, #0
 80033da:	f43f ae94 	beq.w	8003106 <_strtod_l+0x486>
 80033de:	2c00      	cmp	r4, #0
 80033e0:	dd08      	ble.n	80033f4 <_strtod_l+0x774>
 80033e2:	4622      	mov	r2, r4
 80033e4:	4650      	mov	r0, sl
 80033e6:	9906      	ldr	r1, [sp, #24]
 80033e8:	f001 f8bc 	bl	8004564 <__lshift>
 80033ec:	9006      	str	r0, [sp, #24]
 80033ee:	2800      	cmp	r0, #0
 80033f0:	f43f ae89 	beq.w	8003106 <_strtod_l+0x486>
 80033f4:	2e00      	cmp	r6, #0
 80033f6:	dd08      	ble.n	800340a <_strtod_l+0x78a>
 80033f8:	4632      	mov	r2, r6
 80033fa:	4650      	mov	r0, sl
 80033fc:	9904      	ldr	r1, [sp, #16]
 80033fe:	f001 f8b1 	bl	8004564 <__lshift>
 8003402:	9004      	str	r0, [sp, #16]
 8003404:	2800      	cmp	r0, #0
 8003406:	f43f ae7e 	beq.w	8003106 <_strtod_l+0x486>
 800340a:	4650      	mov	r0, sl
 800340c:	9a06      	ldr	r2, [sp, #24]
 800340e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003410:	f001 f930 	bl	8004674 <__mdiff>
 8003414:	4683      	mov	fp, r0
 8003416:	2800      	cmp	r0, #0
 8003418:	f43f ae75 	beq.w	8003106 <_strtod_l+0x486>
 800341c:	2400      	movs	r4, #0
 800341e:	68c3      	ldr	r3, [r0, #12]
 8003420:	9904      	ldr	r1, [sp, #16]
 8003422:	60c4      	str	r4, [r0, #12]
 8003424:	930d      	str	r3, [sp, #52]	; 0x34
 8003426:	f001 f909 	bl	800463c <__mcmp>
 800342a:	42a0      	cmp	r0, r4
 800342c:	da70      	bge.n	8003510 <_strtod_l+0x890>
 800342e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003430:	ea53 0308 	orrs.w	r3, r3, r8
 8003434:	f040 8096 	bne.w	8003564 <_strtod_l+0x8e4>
 8003438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 8091 	bne.w	8003564 <_strtod_l+0x8e4>
 8003442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003446:	0d1b      	lsrs	r3, r3, #20
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800344e:	f240 8089 	bls.w	8003564 <_strtod_l+0x8e4>
 8003452:	f8db 3014 	ldr.w	r3, [fp, #20]
 8003456:	b923      	cbnz	r3, 8003462 <_strtod_l+0x7e2>
 8003458:	f8db 3010 	ldr.w	r3, [fp, #16]
 800345c:	2b01      	cmp	r3, #1
 800345e:	f340 8081 	ble.w	8003564 <_strtod_l+0x8e4>
 8003462:	4659      	mov	r1, fp
 8003464:	2201      	movs	r2, #1
 8003466:	4650      	mov	r0, sl
 8003468:	f001 f87c 	bl	8004564 <__lshift>
 800346c:	9904      	ldr	r1, [sp, #16]
 800346e:	4683      	mov	fp, r0
 8003470:	f001 f8e4 	bl	800463c <__mcmp>
 8003474:	2800      	cmp	r0, #0
 8003476:	dd75      	ble.n	8003564 <_strtod_l+0x8e4>
 8003478:	9905      	ldr	r1, [sp, #20]
 800347a:	464b      	mov	r3, r9
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <_strtod_l+0x888>)
 800347e:	2900      	cmp	r1, #0
 8003480:	f000 8091 	beq.w	80035a6 <_strtod_l+0x926>
 8003484:	ea02 0109 	and.w	r1, r2, r9
 8003488:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800348c:	f300 808b 	bgt.w	80035a6 <_strtod_l+0x926>
 8003490:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8003494:	f77f aea9 	ble.w	80031ea <_strtod_l+0x56a>
 8003498:	2300      	movs	r3, #0
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <_strtod_l+0x88c>)
 800349c:	4640      	mov	r0, r8
 800349e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80034a2:	4649      	mov	r1, r9
 80034a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80034a8:	f7fd f816 	bl	80004d8 <__aeabi_dmul>
 80034ac:	460b      	mov	r3, r1
 80034ae:	4303      	orrs	r3, r0
 80034b0:	bf08      	it	eq
 80034b2:	2322      	moveq	r3, #34	; 0x22
 80034b4:	4680      	mov	r8, r0
 80034b6:	4689      	mov	r9, r1
 80034b8:	bf08      	it	eq
 80034ba:	f8ca 3000 	streq.w	r3, [sl]
 80034be:	e62d      	b.n	800311c <_strtod_l+0x49c>
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	ea03 0808 	and.w	r8, r3, r8
 80034cc:	e6db      	b.n	8003286 <_strtod_l+0x606>
 80034ce:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80034d2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80034d6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80034da:	35e2      	adds	r5, #226	; 0xe2
 80034dc:	fa07 f505 	lsl.w	r5, r7, r5
 80034e0:	970f      	str	r7, [sp, #60]	; 0x3c
 80034e2:	e742      	b.n	800336a <_strtod_l+0x6ea>
 80034e4:	2301      	movs	r3, #1
 80034e6:	2500      	movs	r5, #0
 80034e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80034ea:	e73e      	b.n	800336a <_strtod_l+0x6ea>
 80034ec:	463a      	mov	r2, r7
 80034ee:	4650      	mov	r0, sl
 80034f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80034f2:	f001 f837 	bl	8004564 <__lshift>
 80034f6:	901c      	str	r0, [sp, #112]	; 0x70
 80034f8:	2800      	cmp	r0, #0
 80034fa:	f47f af64 	bne.w	80033c6 <_strtod_l+0x746>
 80034fe:	e602      	b.n	8003106 <_strtod_l+0x486>
 8003500:	08005a40 	.word	0x08005a40
 8003504:	fffffc02 	.word	0xfffffc02
 8003508:	7ff00000 	.word	0x7ff00000
 800350c:	39500000 	.word	0x39500000
 8003510:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003514:	d166      	bne.n	80035e4 <_strtod_l+0x964>
 8003516:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800351c:	b35a      	cbz	r2, 8003576 <_strtod_l+0x8f6>
 800351e:	4a9c      	ldr	r2, [pc, #624]	; (8003790 <_strtod_l+0xb10>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d12c      	bne.n	800357e <_strtod_l+0x8fe>
 8003524:	9b05      	ldr	r3, [sp, #20]
 8003526:	4640      	mov	r0, r8
 8003528:	b303      	cbz	r3, 800356c <_strtod_l+0x8ec>
 800352a:	464b      	mov	r3, r9
 800352c:	4a99      	ldr	r2, [pc, #612]	; (8003794 <_strtod_l+0xb14>)
 800352e:	f04f 31ff 	mov.w	r1, #4294967295
 8003532:	401a      	ands	r2, r3
 8003534:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8003538:	d81b      	bhi.n	8003572 <_strtod_l+0x8f2>
 800353a:	0d12      	lsrs	r2, r2, #20
 800353c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	4298      	cmp	r0, r3
 8003546:	d11a      	bne.n	800357e <_strtod_l+0x8fe>
 8003548:	4b93      	ldr	r3, [pc, #588]	; (8003798 <_strtod_l+0xb18>)
 800354a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800354c:	429a      	cmp	r2, r3
 800354e:	d102      	bne.n	8003556 <_strtod_l+0x8d6>
 8003550:	3001      	adds	r0, #1
 8003552:	f43f add8 	beq.w	8003106 <_strtod_l+0x486>
 8003556:	f04f 0800 	mov.w	r8, #0
 800355a:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <_strtod_l+0xb14>)
 800355c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800355e:	401a      	ands	r2, r3
 8003560:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8003564:	9b05      	ldr	r3, [sp, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d196      	bne.n	8003498 <_strtod_l+0x818>
 800356a:	e5d7      	b.n	800311c <_strtod_l+0x49c>
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
 8003570:	e7e8      	b.n	8003544 <_strtod_l+0x8c4>
 8003572:	460b      	mov	r3, r1
 8003574:	e7e6      	b.n	8003544 <_strtod_l+0x8c4>
 8003576:	ea53 0308 	orrs.w	r3, r3, r8
 800357a:	f43f af7d 	beq.w	8003478 <_strtod_l+0x7f8>
 800357e:	b1e5      	cbz	r5, 80035ba <_strtod_l+0x93a>
 8003580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003582:	421d      	tst	r5, r3
 8003584:	d0ee      	beq.n	8003564 <_strtod_l+0x8e4>
 8003586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003588:	4640      	mov	r0, r8
 800358a:	4649      	mov	r1, r9
 800358c:	9a05      	ldr	r2, [sp, #20]
 800358e:	b1c3      	cbz	r3, 80035c2 <_strtod_l+0x942>
 8003590:	f7ff fb55 	bl	8002c3e <sulp>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800359c:	f7fc fde6 	bl	800016c <__adddf3>
 80035a0:	4680      	mov	r8, r0
 80035a2:	4689      	mov	r9, r1
 80035a4:	e7de      	b.n	8003564 <_strtod_l+0x8e4>
 80035a6:	4013      	ands	r3, r2
 80035a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80035ac:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80035b0:	f04f 38ff 	mov.w	r8, #4294967295
 80035b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80035b8:	e7d4      	b.n	8003564 <_strtod_l+0x8e4>
 80035ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035bc:	ea13 0f08 	tst.w	r3, r8
 80035c0:	e7e0      	b.n	8003584 <_strtod_l+0x904>
 80035c2:	f7ff fb3c 	bl	8002c3e <sulp>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80035ce:	f7fc fdcb 	bl	8000168 <__aeabi_dsub>
 80035d2:	2200      	movs	r2, #0
 80035d4:	2300      	movs	r3, #0
 80035d6:	4680      	mov	r8, r0
 80035d8:	4689      	mov	r9, r1
 80035da:	f7fd f9e5 	bl	80009a8 <__aeabi_dcmpeq>
 80035de:	2800      	cmp	r0, #0
 80035e0:	d0c0      	beq.n	8003564 <_strtod_l+0x8e4>
 80035e2:	e602      	b.n	80031ea <_strtod_l+0x56a>
 80035e4:	4658      	mov	r0, fp
 80035e6:	9904      	ldr	r1, [sp, #16]
 80035e8:	f001 f9aa 	bl	8004940 <__ratio>
 80035ec:	2200      	movs	r2, #0
 80035ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035f2:	4606      	mov	r6, r0
 80035f4:	460f      	mov	r7, r1
 80035f6:	f7fd f9eb 	bl	80009d0 <__aeabi_dcmple>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	d075      	beq.n	80036ea <_strtod_l+0xa6a>
 80035fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003600:	2b00      	cmp	r3, #0
 8003602:	d047      	beq.n	8003694 <_strtod_l+0xa14>
 8003604:	2600      	movs	r6, #0
 8003606:	4f65      	ldr	r7, [pc, #404]	; (800379c <_strtod_l+0xb1c>)
 8003608:	4d64      	ldr	r5, [pc, #400]	; (800379c <_strtod_l+0xb1c>)
 800360a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800360c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003610:	0d1b      	lsrs	r3, r3, #20
 8003612:	051b      	lsls	r3, r3, #20
 8003614:	930f      	str	r3, [sp, #60]	; 0x3c
 8003616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <_strtod_l+0xb20>)
 800361a:	429a      	cmp	r2, r3
 800361c:	f040 80c8 	bne.w	80037b0 <_strtod_l+0xb30>
 8003620:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003624:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800362a:	4640      	mov	r0, r8
 800362c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8003630:	4649      	mov	r1, r9
 8003632:	f001 f8af 	bl	8004794 <__ulp>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4630      	mov	r0, r6
 800363c:	4639      	mov	r1, r7
 800363e:	f7fc ff4b 	bl	80004d8 <__aeabi_dmul>
 8003642:	4642      	mov	r2, r8
 8003644:	464b      	mov	r3, r9
 8003646:	f7fc fd91 	bl	800016c <__adddf3>
 800364a:	460b      	mov	r3, r1
 800364c:	4951      	ldr	r1, [pc, #324]	; (8003794 <_strtod_l+0xb14>)
 800364e:	4a55      	ldr	r2, [pc, #340]	; (80037a4 <_strtod_l+0xb24>)
 8003650:	4019      	ands	r1, r3
 8003652:	4291      	cmp	r1, r2
 8003654:	4680      	mov	r8, r0
 8003656:	d95e      	bls.n	8003716 <_strtod_l+0xa96>
 8003658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800365a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800365e:	4293      	cmp	r3, r2
 8003660:	d103      	bne.n	800366a <_strtod_l+0x9ea>
 8003662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003664:	3301      	adds	r3, #1
 8003666:	f43f ad4e 	beq.w	8003106 <_strtod_l+0x486>
 800366a:	f04f 38ff 	mov.w	r8, #4294967295
 800366e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003798 <_strtod_l+0xb18>
 8003672:	4650      	mov	r0, sl
 8003674:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003676:	f000 fd5d 	bl	8004134 <_Bfree>
 800367a:	4650      	mov	r0, sl
 800367c:	9906      	ldr	r1, [sp, #24]
 800367e:	f000 fd59 	bl	8004134 <_Bfree>
 8003682:	4650      	mov	r0, sl
 8003684:	9904      	ldr	r1, [sp, #16]
 8003686:	f000 fd55 	bl	8004134 <_Bfree>
 800368a:	4659      	mov	r1, fp
 800368c:	4650      	mov	r0, sl
 800368e:	f000 fd51 	bl	8004134 <_Bfree>
 8003692:	e61c      	b.n	80032ce <_strtod_l+0x64e>
 8003694:	f1b8 0f00 	cmp.w	r8, #0
 8003698:	d119      	bne.n	80036ce <_strtod_l+0xa4e>
 800369a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a0:	b9e3      	cbnz	r3, 80036dc <_strtod_l+0xa5c>
 80036a2:	2200      	movs	r2, #0
 80036a4:	4630      	mov	r0, r6
 80036a6:	4639      	mov	r1, r7
 80036a8:	4b3c      	ldr	r3, [pc, #240]	; (800379c <_strtod_l+0xb1c>)
 80036aa:	f7fd f987 	bl	80009bc <__aeabi_dcmplt>
 80036ae:	b9c8      	cbnz	r0, 80036e4 <_strtod_l+0xa64>
 80036b0:	2200      	movs	r2, #0
 80036b2:	4630      	mov	r0, r6
 80036b4:	4639      	mov	r1, r7
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <_strtod_l+0xb28>)
 80036b8:	f7fc ff0e 	bl	80004d8 <__aeabi_dmul>
 80036bc:	4604      	mov	r4, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80036c4:	9418      	str	r4, [sp, #96]	; 0x60
 80036c6:	9319      	str	r3, [sp, #100]	; 0x64
 80036c8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80036cc:	e79d      	b.n	800360a <_strtod_l+0x98a>
 80036ce:	f1b8 0f01 	cmp.w	r8, #1
 80036d2:	d103      	bne.n	80036dc <_strtod_l+0xa5c>
 80036d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f43f ad87 	beq.w	80031ea <_strtod_l+0x56a>
 80036dc:	2600      	movs	r6, #0
 80036de:	2400      	movs	r4, #0
 80036e0:	4f32      	ldr	r7, [pc, #200]	; (80037ac <_strtod_l+0xb2c>)
 80036e2:	e791      	b.n	8003608 <_strtod_l+0x988>
 80036e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80036e6:	4d30      	ldr	r5, [pc, #192]	; (80037a8 <_strtod_l+0xb28>)
 80036e8:	e7ea      	b.n	80036c0 <_strtod_l+0xa40>
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <_strtod_l+0xb28>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	4630      	mov	r0, r6
 80036f0:	4639      	mov	r1, r7
 80036f2:	f7fc fef1 	bl	80004d8 <__aeabi_dmul>
 80036f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036f8:	4604      	mov	r4, r0
 80036fa:	460d      	mov	r5, r1
 80036fc:	b933      	cbnz	r3, 800370c <_strtod_l+0xa8c>
 80036fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003702:	9010      	str	r0, [sp, #64]	; 0x40
 8003704:	9311      	str	r3, [sp, #68]	; 0x44
 8003706:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800370a:	e77e      	b.n	800360a <_strtod_l+0x98a>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003714:	e7f7      	b.n	8003706 <_strtod_l+0xa86>
 8003716:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800371a:	9b05      	ldr	r3, [sp, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1a8      	bne.n	8003672 <_strtod_l+0x9f2>
 8003720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003724:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003726:	0d1b      	lsrs	r3, r3, #20
 8003728:	051b      	lsls	r3, r3, #20
 800372a:	429a      	cmp	r2, r3
 800372c:	d1a1      	bne.n	8003672 <_strtod_l+0x9f2>
 800372e:	4620      	mov	r0, r4
 8003730:	4629      	mov	r1, r5
 8003732:	f7fd fa99 	bl	8000c68 <__aeabi_d2lz>
 8003736:	f7fc fea1 	bl	800047c <__aeabi_l2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4620      	mov	r0, r4
 8003740:	4629      	mov	r1, r5
 8003742:	f7fc fd11 	bl	8000168 <__aeabi_dsub>
 8003746:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800374c:	ea43 0308 	orr.w	r3, r3, r8
 8003750:	4313      	orrs	r3, r2
 8003752:	4604      	mov	r4, r0
 8003754:	460d      	mov	r5, r1
 8003756:	d066      	beq.n	8003826 <_strtod_l+0xba6>
 8003758:	a309      	add	r3, pc, #36	; (adr r3, 8003780 <_strtod_l+0xb00>)
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fd f92d 	bl	80009bc <__aeabi_dcmplt>
 8003762:	2800      	cmp	r0, #0
 8003764:	f47f acda 	bne.w	800311c <_strtod_l+0x49c>
 8003768:	a307      	add	r3, pc, #28	; (adr r3, 8003788 <_strtod_l+0xb08>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fd f941 	bl	80009f8 <__aeabi_dcmpgt>
 8003776:	2800      	cmp	r0, #0
 8003778:	f43f af7b 	beq.w	8003672 <_strtod_l+0x9f2>
 800377c:	e4ce      	b.n	800311c <_strtod_l+0x49c>
 800377e:	bf00      	nop
 8003780:	94a03595 	.word	0x94a03595
 8003784:	3fdfffff 	.word	0x3fdfffff
 8003788:	35afe535 	.word	0x35afe535
 800378c:	3fe00000 	.word	0x3fe00000
 8003790:	000fffff 	.word	0x000fffff
 8003794:	7ff00000 	.word	0x7ff00000
 8003798:	7fefffff 	.word	0x7fefffff
 800379c:	3ff00000 	.word	0x3ff00000
 80037a0:	7fe00000 	.word	0x7fe00000
 80037a4:	7c9fffff 	.word	0x7c9fffff
 80037a8:	3fe00000 	.word	0x3fe00000
 80037ac:	bff00000 	.word	0xbff00000
 80037b0:	9b05      	ldr	r3, [sp, #20]
 80037b2:	b313      	cbz	r3, 80037fa <_strtod_l+0xb7a>
 80037b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80037ba:	d81e      	bhi.n	80037fa <_strtod_l+0xb7a>
 80037bc:	a326      	add	r3, pc, #152	; (adr r3, 8003858 <_strtod_l+0xbd8>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	4620      	mov	r0, r4
 80037c4:	4629      	mov	r1, r5
 80037c6:	f7fd f903 	bl	80009d0 <__aeabi_dcmple>
 80037ca:	b190      	cbz	r0, 80037f2 <_strtod_l+0xb72>
 80037cc:	4629      	mov	r1, r5
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7fd f91c 	bl	8000a0c <__aeabi_d2uiz>
 80037d4:	2801      	cmp	r0, #1
 80037d6:	bf38      	it	cc
 80037d8:	2001      	movcc	r0, #1
 80037da:	f7fc fe03 	bl	80003e4 <__aeabi_ui2d>
 80037de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037e0:	4604      	mov	r4, r0
 80037e2:	460d      	mov	r5, r1
 80037e4:	b9d3      	cbnz	r3, 800381c <_strtod_l+0xb9c>
 80037e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80037ea:	9012      	str	r0, [sp, #72]	; 0x48
 80037ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80037ee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80037f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037f4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80037f8:	1a9f      	subs	r7, r3, r2
 80037fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80037fe:	f000 ffc9 	bl	8004794 <__ulp>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4630      	mov	r0, r6
 8003808:	4639      	mov	r1, r7
 800380a:	f7fc fe65 	bl	80004d8 <__aeabi_dmul>
 800380e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003812:	f7fc fcab 	bl	800016c <__adddf3>
 8003816:	4680      	mov	r8, r0
 8003818:	4689      	mov	r9, r1
 800381a:	e77e      	b.n	800371a <_strtod_l+0xa9a>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003824:	e7e3      	b.n	80037ee <_strtod_l+0xb6e>
 8003826:	a30e      	add	r3, pc, #56	; (adr r3, 8003860 <_strtod_l+0xbe0>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fd f8c6 	bl	80009bc <__aeabi_dcmplt>
 8003830:	e7a1      	b.n	8003776 <_strtod_l+0xaf6>
 8003832:	2300      	movs	r3, #0
 8003834:	930c      	str	r3, [sp, #48]	; 0x30
 8003836:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003838:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	f7ff ba65 	b.w	8002d0a <_strtod_l+0x8a>
 8003840:	2b65      	cmp	r3, #101	; 0x65
 8003842:	f43f ab5c 	beq.w	8002efe <_strtod_l+0x27e>
 8003846:	2b45      	cmp	r3, #69	; 0x45
 8003848:	f43f ab59 	beq.w	8002efe <_strtod_l+0x27e>
 800384c:	2201      	movs	r2, #1
 800384e:	f7ff bb8d 	b.w	8002f6c <_strtod_l+0x2ec>
 8003852:	bf00      	nop
 8003854:	f3af 8000 	nop.w
 8003858:	ffc00000 	.word	0xffc00000
 800385c:	41dfffff 	.word	0x41dfffff
 8003860:	94a03595 	.word	0x94a03595
 8003864:	3fcfffff 	.word	0x3fcfffff

08003868 <strtod>:
 8003868:	460a      	mov	r2, r1
 800386a:	4601      	mov	r1, r0
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <strtod+0x10>)
 800386e:	4b03      	ldr	r3, [pc, #12]	; (800387c <strtod+0x14>)
 8003870:	6800      	ldr	r0, [r0, #0]
 8003872:	f7ff ba05 	b.w	8002c80 <_strtod_l>
 8003876:	bf00      	nop
 8003878:	2000000c 	.word	0x2000000c
 800387c:	20000074 	.word	0x20000074

08003880 <strtok>:
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <strtok+0x5c>)
 8003882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003886:	681f      	ldr	r7, [r3, #0]
 8003888:	4605      	mov	r5, r0
 800388a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800388c:	460e      	mov	r6, r1
 800388e:	b9ec      	cbnz	r4, 80038cc <strtok+0x4c>
 8003890:	2050      	movs	r0, #80	; 0x50
 8003892:	f000 fbe7 	bl	8004064 <malloc>
 8003896:	4602      	mov	r2, r0
 8003898:	65b8      	str	r0, [r7, #88]	; 0x58
 800389a:	b920      	cbnz	r0, 80038a6 <strtok+0x26>
 800389c:	2157      	movs	r1, #87	; 0x57
 800389e:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <strtok+0x60>)
 80038a0:	4810      	ldr	r0, [pc, #64]	; (80038e4 <strtok+0x64>)
 80038a2:	f000 f849 	bl	8003938 <__assert_func>
 80038a6:	e9c0 4400 	strd	r4, r4, [r0]
 80038aa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80038ae:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80038b2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80038b6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80038ba:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80038be:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80038c2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80038c6:	6184      	str	r4, [r0, #24]
 80038c8:	7704      	strb	r4, [r0, #28]
 80038ca:	6244      	str	r4, [r0, #36]	; 0x24
 80038cc:	4631      	mov	r1, r6
 80038ce:	4628      	mov	r0, r5
 80038d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038d2:	2301      	movs	r3, #1
 80038d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038d8:	f000 b806 	b.w	80038e8 <__strtok_r>
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	08005a68 	.word	0x08005a68
 80038e4:	08005a7f 	.word	0x08005a7f

080038e8 <__strtok_r>:
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b908      	cbnz	r0, 80038f0 <__strtok_r+0x8>
 80038ec:	6810      	ldr	r0, [r2, #0]
 80038ee:	b188      	cbz	r0, 8003914 <__strtok_r+0x2c>
 80038f0:	4604      	mov	r4, r0
 80038f2:	460f      	mov	r7, r1
 80038f4:	4620      	mov	r0, r4
 80038f6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80038fa:	f817 6b01 	ldrb.w	r6, [r7], #1
 80038fe:	b91e      	cbnz	r6, 8003908 <__strtok_r+0x20>
 8003900:	b965      	cbnz	r5, 800391c <__strtok_r+0x34>
 8003902:	4628      	mov	r0, r5
 8003904:	6015      	str	r5, [r2, #0]
 8003906:	e005      	b.n	8003914 <__strtok_r+0x2c>
 8003908:	42b5      	cmp	r5, r6
 800390a:	d1f6      	bne.n	80038fa <__strtok_r+0x12>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <__strtok_r+0xa>
 8003910:	6014      	str	r4, [r2, #0]
 8003912:	7003      	strb	r3, [r0, #0]
 8003914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003916:	461c      	mov	r4, r3
 8003918:	e00c      	b.n	8003934 <__strtok_r+0x4c>
 800391a:	b915      	cbnz	r5, 8003922 <__strtok_r+0x3a>
 800391c:	460e      	mov	r6, r1
 800391e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003922:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003926:	42ab      	cmp	r3, r5
 8003928:	d1f7      	bne.n	800391a <__strtok_r+0x32>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f3      	beq.n	8003916 <__strtok_r+0x2e>
 800392e:	2300      	movs	r3, #0
 8003930:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003934:	6014      	str	r4, [r2, #0]
 8003936:	e7ed      	b.n	8003914 <__strtok_r+0x2c>

08003938 <__assert_func>:
 8003938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800393a:	4614      	mov	r4, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <__assert_func+0x2c>)
 8003940:	4605      	mov	r5, r0
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68d8      	ldr	r0, [r3, #12]
 8003946:	b14c      	cbz	r4, 800395c <__assert_func+0x24>
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <__assert_func+0x30>)
 800394a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800394e:	9100      	str	r1, [sp, #0]
 8003950:	462b      	mov	r3, r5
 8003952:	4906      	ldr	r1, [pc, #24]	; (800396c <__assert_func+0x34>)
 8003954:	f000 f80e 	bl	8003974 <fiprintf>
 8003958:	f001 fcfc 	bl	8005354 <abort>
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <__assert_func+0x38>)
 800395e:	461c      	mov	r4, r3
 8003960:	e7f3      	b.n	800394a <__assert_func+0x12>
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
 8003968:	08005ae0 	.word	0x08005ae0
 800396c:	08005aed 	.word	0x08005aed
 8003970:	08005b1b 	.word	0x08005b1b

08003974 <fiprintf>:
 8003974:	b40e      	push	{r1, r2, r3}
 8003976:	b503      	push	{r0, r1, lr}
 8003978:	4601      	mov	r1, r0
 800397a:	ab03      	add	r3, sp, #12
 800397c:	4805      	ldr	r0, [pc, #20]	; (8003994 <fiprintf+0x20>)
 800397e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003982:	6800      	ldr	r0, [r0, #0]
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	f001 f929 	bl	8004bdc <_vfiprintf_r>
 800398a:	b002      	add	sp, #8
 800398c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003990:	b003      	add	sp, #12
 8003992:	4770      	bx	lr
 8003994:	2000000c 	.word	0x2000000c

08003998 <rshift>:
 8003998:	6903      	ldr	r3, [r0, #16]
 800399a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800399e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80039a2:	f100 0414 	add.w	r4, r0, #20
 80039a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80039aa:	dd46      	ble.n	8003a3a <rshift+0xa2>
 80039ac:	f011 011f 	ands.w	r1, r1, #31
 80039b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80039b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80039b8:	d10c      	bne.n	80039d4 <rshift+0x3c>
 80039ba:	4629      	mov	r1, r5
 80039bc:	f100 0710 	add.w	r7, r0, #16
 80039c0:	42b1      	cmp	r1, r6
 80039c2:	d335      	bcc.n	8003a30 <rshift+0x98>
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	1eea      	subs	r2, r5, #3
 80039ca:	4296      	cmp	r6, r2
 80039cc:	bf38      	it	cc
 80039ce:	2300      	movcc	r3, #0
 80039d0:	4423      	add	r3, r4
 80039d2:	e015      	b.n	8003a00 <rshift+0x68>
 80039d4:	46a1      	mov	r9, r4
 80039d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80039da:	f1c1 0820 	rsb	r8, r1, #32
 80039de:	40cf      	lsrs	r7, r1
 80039e0:	f105 0e04 	add.w	lr, r5, #4
 80039e4:	4576      	cmp	r6, lr
 80039e6:	46f4      	mov	ip, lr
 80039e8:	d816      	bhi.n	8003a18 <rshift+0x80>
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	3a04      	subs	r2, #4
 80039f0:	3501      	adds	r5, #1
 80039f2:	42ae      	cmp	r6, r5
 80039f4:	bf38      	it	cc
 80039f6:	2200      	movcc	r2, #0
 80039f8:	18a3      	adds	r3, r4, r2
 80039fa:	50a7      	str	r7, [r4, r2]
 80039fc:	b107      	cbz	r7, 8003a00 <rshift+0x68>
 80039fe:	3304      	adds	r3, #4
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	eba3 0204 	sub.w	r2, r3, r4
 8003a06:	bf08      	it	eq
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003a0e:	6102      	str	r2, [r0, #16]
 8003a10:	bf08      	it	eq
 8003a12:	6143      	streq	r3, [r0, #20]
 8003a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a18:	f8dc c000 	ldr.w	ip, [ip]
 8003a1c:	fa0c fc08 	lsl.w	ip, ip, r8
 8003a20:	ea4c 0707 	orr.w	r7, ip, r7
 8003a24:	f849 7b04 	str.w	r7, [r9], #4
 8003a28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003a2c:	40cf      	lsrs	r7, r1
 8003a2e:	e7d9      	b.n	80039e4 <rshift+0x4c>
 8003a30:	f851 cb04 	ldr.w	ip, [r1], #4
 8003a34:	f847 cf04 	str.w	ip, [r7, #4]!
 8003a38:	e7c2      	b.n	80039c0 <rshift+0x28>
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	e7e0      	b.n	8003a00 <rshift+0x68>

08003a3e <__hexdig_fun>:
 8003a3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	d802      	bhi.n	8003a4c <__hexdig_fun+0xe>
 8003a46:	3820      	subs	r0, #32
 8003a48:	b2c0      	uxtb	r0, r0
 8003a4a:	4770      	bx	lr
 8003a4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d801      	bhi.n	8003a58 <__hexdig_fun+0x1a>
 8003a54:	3847      	subs	r0, #71	; 0x47
 8003a56:	e7f7      	b.n	8003a48 <__hexdig_fun+0xa>
 8003a58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d801      	bhi.n	8003a64 <__hexdig_fun+0x26>
 8003a60:	3827      	subs	r0, #39	; 0x27
 8003a62:	e7f1      	b.n	8003a48 <__hexdig_fun+0xa>
 8003a64:	2000      	movs	r0, #0
 8003a66:	4770      	bx	lr

08003a68 <__gethex>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	b08b      	sub	sp, #44	; 0x2c
 8003a6e:	9306      	str	r3, [sp, #24]
 8003a70:	4bb9      	ldr	r3, [pc, #740]	; (8003d58 <__gethex+0x2f0>)
 8003a72:	9002      	str	r0, [sp, #8]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	468b      	mov	fp, r1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	4690      	mov	r8, r2
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	f7fc fb67 	bl	8000150 <strlen>
 8003a82:	4682      	mov	sl, r0
 8003a84:	9b03      	ldr	r3, [sp, #12]
 8003a86:	f8db 2000 	ldr.w	r2, [fp]
 8003a8a:	4403      	add	r3, r0
 8003a8c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003a90:	9307      	str	r3, [sp, #28]
 8003a92:	1c93      	adds	r3, r2, #2
 8003a94:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003a98:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003a9c:	32fe      	adds	r2, #254	; 0xfe
 8003a9e:	18d1      	adds	r1, r2, r3
 8003aa0:	461f      	mov	r7, r3
 8003aa2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003aa6:	9101      	str	r1, [sp, #4]
 8003aa8:	2830      	cmp	r0, #48	; 0x30
 8003aaa:	d0f8      	beq.n	8003a9e <__gethex+0x36>
 8003aac:	f7ff ffc7 	bl	8003a3e <__hexdig_fun>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d13a      	bne.n	8003b2c <__gethex+0xc4>
 8003ab6:	4652      	mov	r2, sl
 8003ab8:	4638      	mov	r0, r7
 8003aba:	9903      	ldr	r1, [sp, #12]
 8003abc:	f001 fb6a 	bl	8005194 <strncmp>
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d166      	bne.n	8003b94 <__gethex+0x12c>
 8003ac6:	f817 000a 	ldrb.w	r0, [r7, sl]
 8003aca:	eb07 060a 	add.w	r6, r7, sl
 8003ace:	f7ff ffb6 	bl	8003a3e <__hexdig_fun>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	d060      	beq.n	8003b98 <__gethex+0x130>
 8003ad6:	4633      	mov	r3, r6
 8003ad8:	7818      	ldrb	r0, [r3, #0]
 8003ada:	461f      	mov	r7, r3
 8003adc:	2830      	cmp	r0, #48	; 0x30
 8003ade:	f103 0301 	add.w	r3, r3, #1
 8003ae2:	d0f9      	beq.n	8003ad8 <__gethex+0x70>
 8003ae4:	f7ff ffab 	bl	8003a3e <__hexdig_fun>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	fab0 f480 	clz	r4, r0
 8003aee:	4635      	mov	r5, r6
 8003af0:	0964      	lsrs	r4, r4, #5
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	463a      	mov	r2, r7
 8003af6:	4616      	mov	r6, r2
 8003af8:	7830      	ldrb	r0, [r6, #0]
 8003afa:	3201      	adds	r2, #1
 8003afc:	f7ff ff9f 	bl	8003a3e <__hexdig_fun>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d1f8      	bne.n	8003af6 <__gethex+0x8e>
 8003b04:	4652      	mov	r2, sl
 8003b06:	4630      	mov	r0, r6
 8003b08:	9903      	ldr	r1, [sp, #12]
 8003b0a:	f001 fb43 	bl	8005194 <strncmp>
 8003b0e:	b980      	cbnz	r0, 8003b32 <__gethex+0xca>
 8003b10:	b94d      	cbnz	r5, 8003b26 <__gethex+0xbe>
 8003b12:	eb06 050a 	add.w	r5, r6, sl
 8003b16:	462a      	mov	r2, r5
 8003b18:	4616      	mov	r6, r2
 8003b1a:	7830      	ldrb	r0, [r6, #0]
 8003b1c:	3201      	adds	r2, #1
 8003b1e:	f7ff ff8e 	bl	8003a3e <__hexdig_fun>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d1f8      	bne.n	8003b18 <__gethex+0xb0>
 8003b26:	1bad      	subs	r5, r5, r6
 8003b28:	00ad      	lsls	r5, r5, #2
 8003b2a:	e004      	b.n	8003b36 <__gethex+0xce>
 8003b2c:	2400      	movs	r4, #0
 8003b2e:	4625      	mov	r5, r4
 8003b30:	e7e0      	b.n	8003af4 <__gethex+0x8c>
 8003b32:	2d00      	cmp	r5, #0
 8003b34:	d1f7      	bne.n	8003b26 <__gethex+0xbe>
 8003b36:	7833      	ldrb	r3, [r6, #0]
 8003b38:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003b3c:	2b50      	cmp	r3, #80	; 0x50
 8003b3e:	d139      	bne.n	8003bb4 <__gethex+0x14c>
 8003b40:	7873      	ldrb	r3, [r6, #1]
 8003b42:	2b2b      	cmp	r3, #43	; 0x2b
 8003b44:	d02a      	beq.n	8003b9c <__gethex+0x134>
 8003b46:	2b2d      	cmp	r3, #45	; 0x2d
 8003b48:	d02c      	beq.n	8003ba4 <__gethex+0x13c>
 8003b4a:	f04f 0900 	mov.w	r9, #0
 8003b4e:	1c71      	adds	r1, r6, #1
 8003b50:	7808      	ldrb	r0, [r1, #0]
 8003b52:	f7ff ff74 	bl	8003a3e <__hexdig_fun>
 8003b56:	1e43      	subs	r3, r0, #1
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b18      	cmp	r3, #24
 8003b5c:	d82a      	bhi.n	8003bb4 <__gethex+0x14c>
 8003b5e:	f1a0 0210 	sub.w	r2, r0, #16
 8003b62:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003b66:	f7ff ff6a 	bl	8003a3e <__hexdig_fun>
 8003b6a:	1e43      	subs	r3, r0, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b18      	cmp	r3, #24
 8003b70:	d91b      	bls.n	8003baa <__gethex+0x142>
 8003b72:	f1b9 0f00 	cmp.w	r9, #0
 8003b76:	d000      	beq.n	8003b7a <__gethex+0x112>
 8003b78:	4252      	negs	r2, r2
 8003b7a:	4415      	add	r5, r2
 8003b7c:	f8cb 1000 	str.w	r1, [fp]
 8003b80:	b1d4      	cbz	r4, 8003bb8 <__gethex+0x150>
 8003b82:	9b01      	ldr	r3, [sp, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf14      	ite	ne
 8003b88:	2700      	movne	r7, #0
 8003b8a:	2706      	moveq	r7, #6
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	b00b      	add	sp, #44	; 0x2c
 8003b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b94:	463e      	mov	r6, r7
 8003b96:	4625      	mov	r5, r4
 8003b98:	2401      	movs	r4, #1
 8003b9a:	e7cc      	b.n	8003b36 <__gethex+0xce>
 8003b9c:	f04f 0900 	mov.w	r9, #0
 8003ba0:	1cb1      	adds	r1, r6, #2
 8003ba2:	e7d5      	b.n	8003b50 <__gethex+0xe8>
 8003ba4:	f04f 0901 	mov.w	r9, #1
 8003ba8:	e7fa      	b.n	8003ba0 <__gethex+0x138>
 8003baa:	230a      	movs	r3, #10
 8003bac:	fb03 0202 	mla	r2, r3, r2, r0
 8003bb0:	3a10      	subs	r2, #16
 8003bb2:	e7d6      	b.n	8003b62 <__gethex+0xfa>
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	e7e1      	b.n	8003b7c <__gethex+0x114>
 8003bb8:	4621      	mov	r1, r4
 8003bba:	1bf3      	subs	r3, r6, r7
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	2b07      	cmp	r3, #7
 8003bc0:	dc0a      	bgt.n	8003bd8 <__gethex+0x170>
 8003bc2:	9802      	ldr	r0, [sp, #8]
 8003bc4:	f000 fa76 	bl	80040b4 <_Balloc>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	b940      	cbnz	r0, 8003bde <__gethex+0x176>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	21de      	movs	r1, #222	; 0xde
 8003bd0:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <__gethex+0x2f4>)
 8003bd2:	4863      	ldr	r0, [pc, #396]	; (8003d60 <__gethex+0x2f8>)
 8003bd4:	f7ff feb0 	bl	8003938 <__assert_func>
 8003bd8:	3101      	adds	r1, #1
 8003bda:	105b      	asrs	r3, r3, #1
 8003bdc:	e7ef      	b.n	8003bbe <__gethex+0x156>
 8003bde:	f04f 0b00 	mov.w	fp, #0
 8003be2:	f100 0914 	add.w	r9, r0, #20
 8003be6:	f1ca 0301 	rsb	r3, sl, #1
 8003bea:	f8cd 9010 	str.w	r9, [sp, #16]
 8003bee:	f8cd b004 	str.w	fp, [sp, #4]
 8003bf2:	9308      	str	r3, [sp, #32]
 8003bf4:	42b7      	cmp	r7, r6
 8003bf6:	d33f      	bcc.n	8003c78 <__gethex+0x210>
 8003bf8:	9f04      	ldr	r7, [sp, #16]
 8003bfa:	9b01      	ldr	r3, [sp, #4]
 8003bfc:	f847 3b04 	str.w	r3, [r7], #4
 8003c00:	eba7 0709 	sub.w	r7, r7, r9
 8003c04:	10bf      	asrs	r7, r7, #2
 8003c06:	6127      	str	r7, [r4, #16]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fb49 	bl	80042a0 <__hi0bits>
 8003c0e:	017f      	lsls	r7, r7, #5
 8003c10:	f8d8 6000 	ldr.w	r6, [r8]
 8003c14:	1a3f      	subs	r7, r7, r0
 8003c16:	42b7      	cmp	r7, r6
 8003c18:	dd62      	ble.n	8003ce0 <__gethex+0x278>
 8003c1a:	1bbf      	subs	r7, r7, r6
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f000 fedf 	bl	80049e2 <__any_on>
 8003c24:	4682      	mov	sl, r0
 8003c26:	b1a8      	cbz	r0, 8003c54 <__gethex+0x1ec>
 8003c28:	f04f 0a01 	mov.w	sl, #1
 8003c2c:	1e7b      	subs	r3, r7, #1
 8003c2e:	1159      	asrs	r1, r3, #5
 8003c30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	fa0a f202 	lsl.w	r2, sl, r2
 8003c3c:	420a      	tst	r2, r1
 8003c3e:	d009      	beq.n	8003c54 <__gethex+0x1ec>
 8003c40:	4553      	cmp	r3, sl
 8003c42:	dd05      	ble.n	8003c50 <__gethex+0x1e8>
 8003c44:	4620      	mov	r0, r4
 8003c46:	1eb9      	subs	r1, r7, #2
 8003c48:	f000 fecb 	bl	80049e2 <__any_on>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d144      	bne.n	8003cda <__gethex+0x272>
 8003c50:	f04f 0a02 	mov.w	sl, #2
 8003c54:	4639      	mov	r1, r7
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff fe9e 	bl	8003998 <rshift>
 8003c5c:	443d      	add	r5, r7
 8003c5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003c62:	42ab      	cmp	r3, r5
 8003c64:	da4a      	bge.n	8003cfc <__gethex+0x294>
 8003c66:	4621      	mov	r1, r4
 8003c68:	9802      	ldr	r0, [sp, #8]
 8003c6a:	f000 fa63 	bl	8004134 <_Bfree>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003c72:	27a3      	movs	r7, #163	; 0xa3
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e789      	b.n	8003b8c <__gethex+0x124>
 8003c78:	1e73      	subs	r3, r6, #1
 8003c7a:	9a07      	ldr	r2, [sp, #28]
 8003c7c:	9305      	str	r3, [sp, #20]
 8003c7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d019      	beq.n	8003cba <__gethex+0x252>
 8003c86:	f1bb 0f20 	cmp.w	fp, #32
 8003c8a:	d107      	bne.n	8003c9c <__gethex+0x234>
 8003c8c:	9b04      	ldr	r3, [sp, #16]
 8003c8e:	9a01      	ldr	r2, [sp, #4]
 8003c90:	f843 2b04 	str.w	r2, [r3], #4
 8003c94:	9304      	str	r3, [sp, #16]
 8003c96:	2300      	movs	r3, #0
 8003c98:	469b      	mov	fp, r3
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8003ca0:	f7ff fecd 	bl	8003a3e <__hexdig_fun>
 8003ca4:	9b01      	ldr	r3, [sp, #4]
 8003ca6:	f000 000f 	and.w	r0, r0, #15
 8003caa:	fa00 f00b 	lsl.w	r0, r0, fp
 8003cae:	4303      	orrs	r3, r0
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	f10b 0b04 	add.w	fp, fp, #4
 8003cb6:	9b05      	ldr	r3, [sp, #20]
 8003cb8:	e00d      	b.n	8003cd6 <__gethex+0x26e>
 8003cba:	9b05      	ldr	r3, [sp, #20]
 8003cbc:	9a08      	ldr	r2, [sp, #32]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	42bb      	cmp	r3, r7
 8003cc2:	d3e0      	bcc.n	8003c86 <__gethex+0x21e>
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	4652      	mov	r2, sl
 8003cc8:	9903      	ldr	r1, [sp, #12]
 8003cca:	9309      	str	r3, [sp, #36]	; 0x24
 8003ccc:	f001 fa62 	bl	8005194 <strncmp>
 8003cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cd2:	2800      	cmp	r0, #0
 8003cd4:	d1d7      	bne.n	8003c86 <__gethex+0x21e>
 8003cd6:	461e      	mov	r6, r3
 8003cd8:	e78c      	b.n	8003bf4 <__gethex+0x18c>
 8003cda:	f04f 0a03 	mov.w	sl, #3
 8003cde:	e7b9      	b.n	8003c54 <__gethex+0x1ec>
 8003ce0:	da09      	bge.n	8003cf6 <__gethex+0x28e>
 8003ce2:	1bf7      	subs	r7, r6, r7
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	463a      	mov	r2, r7
 8003ce8:	9802      	ldr	r0, [sp, #8]
 8003cea:	f000 fc3b 	bl	8004564 <__lshift>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	1bed      	subs	r5, r5, r7
 8003cf2:	f100 0914 	add.w	r9, r0, #20
 8003cf6:	f04f 0a00 	mov.w	sl, #0
 8003cfa:	e7b0      	b.n	8003c5e <__gethex+0x1f6>
 8003cfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003d00:	42a8      	cmp	r0, r5
 8003d02:	dd71      	ble.n	8003de8 <__gethex+0x380>
 8003d04:	1b45      	subs	r5, r0, r5
 8003d06:	42ae      	cmp	r6, r5
 8003d08:	dc34      	bgt.n	8003d74 <__gethex+0x30c>
 8003d0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d028      	beq.n	8003d64 <__gethex+0x2fc>
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d02a      	beq.n	8003d6c <__gethex+0x304>
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d115      	bne.n	8003d46 <__gethex+0x2de>
 8003d1a:	42ae      	cmp	r6, r5
 8003d1c:	d113      	bne.n	8003d46 <__gethex+0x2de>
 8003d1e:	2e01      	cmp	r6, #1
 8003d20:	d10b      	bne.n	8003d3a <__gethex+0x2d2>
 8003d22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003d26:	9a06      	ldr	r2, [sp, #24]
 8003d28:	2762      	movs	r7, #98	; 0x62
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	f8c9 3000 	str.w	r3, [r9]
 8003d34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003d36:	601c      	str	r4, [r3, #0]
 8003d38:	e728      	b.n	8003b8c <__gethex+0x124>
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	1e71      	subs	r1, r6, #1
 8003d3e:	f000 fe50 	bl	80049e2 <__any_on>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d1ed      	bne.n	8003d22 <__gethex+0x2ba>
 8003d46:	4621      	mov	r1, r4
 8003d48:	9802      	ldr	r0, [sp, #8]
 8003d4a:	f000 f9f3 	bl	8004134 <_Bfree>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003d52:	2750      	movs	r7, #80	; 0x50
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e719      	b.n	8003b8c <__gethex+0x124>
 8003d58:	08005b98 	.word	0x08005b98
 8003d5c:	08005b1c 	.word	0x08005b1c
 8003d60:	08005b2d 	.word	0x08005b2d
 8003d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ed      	bne.n	8003d46 <__gethex+0x2de>
 8003d6a:	e7da      	b.n	8003d22 <__gethex+0x2ba>
 8003d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1d7      	bne.n	8003d22 <__gethex+0x2ba>
 8003d72:	e7e8      	b.n	8003d46 <__gethex+0x2de>
 8003d74:	1e6f      	subs	r7, r5, #1
 8003d76:	f1ba 0f00 	cmp.w	sl, #0
 8003d7a:	d132      	bne.n	8003de2 <__gethex+0x37a>
 8003d7c:	b127      	cbz	r7, 8003d88 <__gethex+0x320>
 8003d7e:	4639      	mov	r1, r7
 8003d80:	4620      	mov	r0, r4
 8003d82:	f000 fe2e 	bl	80049e2 <__any_on>
 8003d86:	4682      	mov	sl, r0
 8003d88:	2101      	movs	r1, #1
 8003d8a:	117b      	asrs	r3, r7, #5
 8003d8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003d90:	f007 071f 	and.w	r7, r7, #31
 8003d94:	fa01 f707 	lsl.w	r7, r1, r7
 8003d98:	421f      	tst	r7, r3
 8003d9a:	f04f 0702 	mov.w	r7, #2
 8003d9e:	4629      	mov	r1, r5
 8003da0:	4620      	mov	r0, r4
 8003da2:	bf18      	it	ne
 8003da4:	f04a 0a02 	orrne.w	sl, sl, #2
 8003da8:	1b76      	subs	r6, r6, r5
 8003daa:	f7ff fdf5 	bl	8003998 <rshift>
 8003dae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003db2:	f1ba 0f00 	cmp.w	sl, #0
 8003db6:	d048      	beq.n	8003e4a <__gethex+0x3e2>
 8003db8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d015      	beq.n	8003dec <__gethex+0x384>
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d017      	beq.n	8003df4 <__gethex+0x38c>
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d109      	bne.n	8003ddc <__gethex+0x374>
 8003dc8:	f01a 0f02 	tst.w	sl, #2
 8003dcc:	d006      	beq.n	8003ddc <__gethex+0x374>
 8003dce:	f8d9 0000 	ldr.w	r0, [r9]
 8003dd2:	ea4a 0a00 	orr.w	sl, sl, r0
 8003dd6:	f01a 0f01 	tst.w	sl, #1
 8003dda:	d10e      	bne.n	8003dfa <__gethex+0x392>
 8003ddc:	f047 0710 	orr.w	r7, r7, #16
 8003de0:	e033      	b.n	8003e4a <__gethex+0x3e2>
 8003de2:	f04f 0a01 	mov.w	sl, #1
 8003de6:	e7cf      	b.n	8003d88 <__gethex+0x320>
 8003de8:	2701      	movs	r7, #1
 8003dea:	e7e2      	b.n	8003db2 <__gethex+0x34a>
 8003dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003dee:	f1c3 0301 	rsb	r3, r3, #1
 8003df2:	9315      	str	r3, [sp, #84]	; 0x54
 8003df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <__gethex+0x374>
 8003dfa:	f04f 0c00 	mov.w	ip, #0
 8003dfe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8003e02:	f104 0314 	add.w	r3, r4, #20
 8003e06:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8003e0a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003e18:	d01c      	beq.n	8003e54 <__gethex+0x3ec>
 8003e1a:	3201      	adds	r2, #1
 8003e1c:	6002      	str	r2, [r0, #0]
 8003e1e:	2f02      	cmp	r7, #2
 8003e20:	f104 0314 	add.w	r3, r4, #20
 8003e24:	d13d      	bne.n	8003ea2 <__gethex+0x43a>
 8003e26:	f8d8 2000 	ldr.w	r2, [r8]
 8003e2a:	3a01      	subs	r2, #1
 8003e2c:	42b2      	cmp	r2, r6
 8003e2e:	d10a      	bne.n	8003e46 <__gethex+0x3de>
 8003e30:	2201      	movs	r2, #1
 8003e32:	1171      	asrs	r1, r6, #5
 8003e34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e38:	f006 061f 	and.w	r6, r6, #31
 8003e3c:	fa02 f606 	lsl.w	r6, r2, r6
 8003e40:	421e      	tst	r6, r3
 8003e42:	bf18      	it	ne
 8003e44:	4617      	movne	r7, r2
 8003e46:	f047 0720 	orr.w	r7, r7, #32
 8003e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e4c:	601c      	str	r4, [r3, #0]
 8003e4e:	9b06      	ldr	r3, [sp, #24]
 8003e50:	601d      	str	r5, [r3, #0]
 8003e52:	e69b      	b.n	8003b8c <__gethex+0x124>
 8003e54:	4299      	cmp	r1, r3
 8003e56:	f843 cc04 	str.w	ip, [r3, #-4]
 8003e5a:	d8d8      	bhi.n	8003e0e <__gethex+0x3a6>
 8003e5c:	68a3      	ldr	r3, [r4, #8]
 8003e5e:	459b      	cmp	fp, r3
 8003e60:	db17      	blt.n	8003e92 <__gethex+0x42a>
 8003e62:	6861      	ldr	r1, [r4, #4]
 8003e64:	9802      	ldr	r0, [sp, #8]
 8003e66:	3101      	adds	r1, #1
 8003e68:	f000 f924 	bl	80040b4 <_Balloc>
 8003e6c:	4681      	mov	r9, r0
 8003e6e:	b918      	cbnz	r0, 8003e78 <__gethex+0x410>
 8003e70:	4602      	mov	r2, r0
 8003e72:	2184      	movs	r1, #132	; 0x84
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <__gethex+0x474>)
 8003e76:	e6ac      	b.n	8003bd2 <__gethex+0x16a>
 8003e78:	6922      	ldr	r2, [r4, #16]
 8003e7a:	f104 010c 	add.w	r1, r4, #12
 8003e7e:	3202      	adds	r2, #2
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	300c      	adds	r0, #12
 8003e84:	f000 f908 	bl	8004098 <memcpy>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	9802      	ldr	r0, [sp, #8]
 8003e8c:	f000 f952 	bl	8004134 <_Bfree>
 8003e90:	464c      	mov	r4, r9
 8003e92:	6923      	ldr	r3, [r4, #16]
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	6122      	str	r2, [r4, #16]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e9e:	615a      	str	r2, [r3, #20]
 8003ea0:	e7bd      	b.n	8003e1e <__gethex+0x3b6>
 8003ea2:	6922      	ldr	r2, [r4, #16]
 8003ea4:	455a      	cmp	r2, fp
 8003ea6:	dd0b      	ble.n	8003ec0 <__gethex+0x458>
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f7ff fd74 	bl	8003998 <rshift>
 8003eb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	42ab      	cmp	r3, r5
 8003eb8:	f6ff aed5 	blt.w	8003c66 <__gethex+0x1fe>
 8003ebc:	2701      	movs	r7, #1
 8003ebe:	e7c2      	b.n	8003e46 <__gethex+0x3de>
 8003ec0:	f016 061f 	ands.w	r6, r6, #31
 8003ec4:	d0fa      	beq.n	8003ebc <__gethex+0x454>
 8003ec6:	449a      	add	sl, r3
 8003ec8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8003ecc:	f000 f9e8 	bl	80042a0 <__hi0bits>
 8003ed0:	f1c6 0620 	rsb	r6, r6, #32
 8003ed4:	42b0      	cmp	r0, r6
 8003ed6:	dbe7      	blt.n	8003ea8 <__gethex+0x440>
 8003ed8:	e7f0      	b.n	8003ebc <__gethex+0x454>
 8003eda:	bf00      	nop
 8003edc:	08005b1c 	.word	0x08005b1c

08003ee0 <L_shift>:
 8003ee0:	f1c2 0208 	rsb	r2, r2, #8
 8003ee4:	0092      	lsls	r2, r2, #2
 8003ee6:	b570      	push	{r4, r5, r6, lr}
 8003ee8:	f1c2 0620 	rsb	r6, r2, #32
 8003eec:	6843      	ldr	r3, [r0, #4]
 8003eee:	6804      	ldr	r4, [r0, #0]
 8003ef0:	fa03 f506 	lsl.w	r5, r3, r6
 8003ef4:	432c      	orrs	r4, r5
 8003ef6:	40d3      	lsrs	r3, r2
 8003ef8:	6004      	str	r4, [r0, #0]
 8003efa:	f840 3f04 	str.w	r3, [r0, #4]!
 8003efe:	4288      	cmp	r0, r1
 8003f00:	d3f4      	bcc.n	8003eec <L_shift+0xc>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}

08003f04 <__match>:
 8003f04:	b530      	push	{r4, r5, lr}
 8003f06:	6803      	ldr	r3, [r0, #0]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f0e:	b914      	cbnz	r4, 8003f16 <__match+0x12>
 8003f10:	6003      	str	r3, [r0, #0]
 8003f12:	2001      	movs	r0, #1
 8003f14:	bd30      	pop	{r4, r5, pc}
 8003f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8003f1e:	2d19      	cmp	r5, #25
 8003f20:	bf98      	it	ls
 8003f22:	3220      	addls	r2, #32
 8003f24:	42a2      	cmp	r2, r4
 8003f26:	d0f0      	beq.n	8003f0a <__match+0x6>
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e7f3      	b.n	8003f14 <__match+0x10>

08003f2c <__hexnan>:
 8003f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	2500      	movs	r5, #0
 8003f32:	680b      	ldr	r3, [r1, #0]
 8003f34:	4682      	mov	sl, r0
 8003f36:	115e      	asrs	r6, r3, #5
 8003f38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003f3c:	f013 031f 	ands.w	r3, r3, #31
 8003f40:	bf18      	it	ne
 8003f42:	3604      	addne	r6, #4
 8003f44:	1f37      	subs	r7, r6, #4
 8003f46:	4690      	mov	r8, r2
 8003f48:	46b9      	mov	r9, r7
 8003f4a:	463c      	mov	r4, r7
 8003f4c:	46ab      	mov	fp, r5
 8003f4e:	b087      	sub	sp, #28
 8003f50:	6801      	ldr	r1, [r0, #0]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	f846 5c04 	str.w	r5, [r6, #-4]
 8003f58:	9502      	str	r5, [sp, #8]
 8003f5a:	784a      	ldrb	r2, [r1, #1]
 8003f5c:	1c4b      	adds	r3, r1, #1
 8003f5e:	9303      	str	r3, [sp, #12]
 8003f60:	b342      	cbz	r2, 8003fb4 <__hexnan+0x88>
 8003f62:	4610      	mov	r0, r2
 8003f64:	9105      	str	r1, [sp, #20]
 8003f66:	9204      	str	r2, [sp, #16]
 8003f68:	f7ff fd69 	bl	8003a3e <__hexdig_fun>
 8003f6c:	2800      	cmp	r0, #0
 8003f6e:	d14f      	bne.n	8004010 <__hexnan+0xe4>
 8003f70:	9a04      	ldr	r2, [sp, #16]
 8003f72:	9905      	ldr	r1, [sp, #20]
 8003f74:	2a20      	cmp	r2, #32
 8003f76:	d818      	bhi.n	8003faa <__hexnan+0x7e>
 8003f78:	9b02      	ldr	r3, [sp, #8]
 8003f7a:	459b      	cmp	fp, r3
 8003f7c:	dd13      	ble.n	8003fa6 <__hexnan+0x7a>
 8003f7e:	454c      	cmp	r4, r9
 8003f80:	d206      	bcs.n	8003f90 <__hexnan+0x64>
 8003f82:	2d07      	cmp	r5, #7
 8003f84:	dc04      	bgt.n	8003f90 <__hexnan+0x64>
 8003f86:	462a      	mov	r2, r5
 8003f88:	4649      	mov	r1, r9
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f7ff ffa8 	bl	8003ee0 <L_shift>
 8003f90:	4544      	cmp	r4, r8
 8003f92:	d950      	bls.n	8004036 <__hexnan+0x10a>
 8003f94:	2300      	movs	r3, #0
 8003f96:	f1a4 0904 	sub.w	r9, r4, #4
 8003f9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	464c      	mov	r4, r9
 8003fa2:	f8cd b008 	str.w	fp, [sp, #8]
 8003fa6:	9903      	ldr	r1, [sp, #12]
 8003fa8:	e7d7      	b.n	8003f5a <__hexnan+0x2e>
 8003faa:	2a29      	cmp	r2, #41	; 0x29
 8003fac:	d156      	bne.n	800405c <__hexnan+0x130>
 8003fae:	3102      	adds	r1, #2
 8003fb0:	f8ca 1000 	str.w	r1, [sl]
 8003fb4:	f1bb 0f00 	cmp.w	fp, #0
 8003fb8:	d050      	beq.n	800405c <__hexnan+0x130>
 8003fba:	454c      	cmp	r4, r9
 8003fbc:	d206      	bcs.n	8003fcc <__hexnan+0xa0>
 8003fbe:	2d07      	cmp	r5, #7
 8003fc0:	dc04      	bgt.n	8003fcc <__hexnan+0xa0>
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7ff ff8a 	bl	8003ee0 <L_shift>
 8003fcc:	4544      	cmp	r4, r8
 8003fce:	d934      	bls.n	800403a <__hexnan+0x10e>
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	f1a8 0204 	sub.w	r2, r8, #4
 8003fd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8003fda:	429f      	cmp	r7, r3
 8003fdc:	f842 1f04 	str.w	r1, [r2, #4]!
 8003fe0:	d2f9      	bcs.n	8003fd6 <__hexnan+0xaa>
 8003fe2:	1b3b      	subs	r3, r7, r4
 8003fe4:	f023 0303 	bic.w	r3, r3, #3
 8003fe8:	3304      	adds	r3, #4
 8003fea:	3401      	adds	r4, #1
 8003fec:	3e03      	subs	r6, #3
 8003fee:	42b4      	cmp	r4, r6
 8003ff0:	bf88      	it	hi
 8003ff2:	2304      	movhi	r3, #4
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4443      	add	r3, r8
 8003ff8:	f843 2b04 	str.w	r2, [r3], #4
 8003ffc:	429f      	cmp	r7, r3
 8003ffe:	d2fb      	bcs.n	8003ff8 <__hexnan+0xcc>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b91b      	cbnz	r3, 800400c <__hexnan+0xe0>
 8004004:	4547      	cmp	r7, r8
 8004006:	d127      	bne.n	8004058 <__hexnan+0x12c>
 8004008:	2301      	movs	r3, #1
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	2005      	movs	r0, #5
 800400e:	e026      	b.n	800405e <__hexnan+0x132>
 8004010:	3501      	adds	r5, #1
 8004012:	2d08      	cmp	r5, #8
 8004014:	f10b 0b01 	add.w	fp, fp, #1
 8004018:	dd06      	ble.n	8004028 <__hexnan+0xfc>
 800401a:	4544      	cmp	r4, r8
 800401c:	d9c3      	bls.n	8003fa6 <__hexnan+0x7a>
 800401e:	2300      	movs	r3, #0
 8004020:	2501      	movs	r5, #1
 8004022:	f844 3c04 	str.w	r3, [r4, #-4]
 8004026:	3c04      	subs	r4, #4
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	f000 000f 	and.w	r0, r0, #15
 800402e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	e7b7      	b.n	8003fa6 <__hexnan+0x7a>
 8004036:	2508      	movs	r5, #8
 8004038:	e7b5      	b.n	8003fa6 <__hexnan+0x7a>
 800403a:	9b01      	ldr	r3, [sp, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0df      	beq.n	8004000 <__hexnan+0xd4>
 8004040:	f04f 32ff 	mov.w	r2, #4294967295
 8004044:	f1c3 0320 	rsb	r3, r3, #32
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8004050:	401a      	ands	r2, r3
 8004052:	f846 2c04 	str.w	r2, [r6, #-4]
 8004056:	e7d3      	b.n	8004000 <__hexnan+0xd4>
 8004058:	3f04      	subs	r7, #4
 800405a:	e7d1      	b.n	8004000 <__hexnan+0xd4>
 800405c:	2004      	movs	r0, #4
 800405e:	b007      	add	sp, #28
 8004060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004064 <malloc>:
 8004064:	4b02      	ldr	r3, [pc, #8]	; (8004070 <malloc+0xc>)
 8004066:	4601      	mov	r1, r0
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	f000 bd35 	b.w	8004ad8 <_malloc_r>
 800406e:	bf00      	nop
 8004070:	2000000c 	.word	0x2000000c

08004074 <__ascii_mbtowc>:
 8004074:	b082      	sub	sp, #8
 8004076:	b901      	cbnz	r1, 800407a <__ascii_mbtowc+0x6>
 8004078:	a901      	add	r1, sp, #4
 800407a:	b142      	cbz	r2, 800408e <__ascii_mbtowc+0x1a>
 800407c:	b14b      	cbz	r3, 8004092 <__ascii_mbtowc+0x1e>
 800407e:	7813      	ldrb	r3, [r2, #0]
 8004080:	600b      	str	r3, [r1, #0]
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	1e10      	subs	r0, r2, #0
 8004086:	bf18      	it	ne
 8004088:	2001      	movne	r0, #1
 800408a:	b002      	add	sp, #8
 800408c:	4770      	bx	lr
 800408e:	4610      	mov	r0, r2
 8004090:	e7fb      	b.n	800408a <__ascii_mbtowc+0x16>
 8004092:	f06f 0001 	mvn.w	r0, #1
 8004096:	e7f8      	b.n	800408a <__ascii_mbtowc+0x16>

08004098 <memcpy>:
 8004098:	440a      	add	r2, r1
 800409a:	4291      	cmp	r1, r2
 800409c:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a0:	d100      	bne.n	80040a4 <memcpy+0xc>
 80040a2:	4770      	bx	lr
 80040a4:	b510      	push	{r4, lr}
 80040a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040aa:	4291      	cmp	r1, r2
 80040ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b0:	d1f9      	bne.n	80040a6 <memcpy+0xe>
 80040b2:	bd10      	pop	{r4, pc}

080040b4 <_Balloc>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040b8:	4604      	mov	r4, r0
 80040ba:	460d      	mov	r5, r1
 80040bc:	b976      	cbnz	r6, 80040dc <_Balloc+0x28>
 80040be:	2010      	movs	r0, #16
 80040c0:	f7ff ffd0 	bl	8004064 <malloc>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6260      	str	r0, [r4, #36]	; 0x24
 80040c8:	b920      	cbnz	r0, 80040d4 <_Balloc+0x20>
 80040ca:	2166      	movs	r1, #102	; 0x66
 80040cc:	4b17      	ldr	r3, [pc, #92]	; (800412c <_Balloc+0x78>)
 80040ce:	4818      	ldr	r0, [pc, #96]	; (8004130 <_Balloc+0x7c>)
 80040d0:	f7ff fc32 	bl	8003938 <__assert_func>
 80040d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040d8:	6006      	str	r6, [r0, #0]
 80040da:	60c6      	str	r6, [r0, #12]
 80040dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80040de:	68f3      	ldr	r3, [r6, #12]
 80040e0:	b183      	cbz	r3, 8004104 <_Balloc+0x50>
 80040e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80040ea:	b9b8      	cbnz	r0, 800411c <_Balloc+0x68>
 80040ec:	2101      	movs	r1, #1
 80040ee:	fa01 f605 	lsl.w	r6, r1, r5
 80040f2:	1d72      	adds	r2, r6, #5
 80040f4:	4620      	mov	r0, r4
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	f000 fc94 	bl	8004a24 <_calloc_r>
 80040fc:	b160      	cbz	r0, 8004118 <_Balloc+0x64>
 80040fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004102:	e00e      	b.n	8004122 <_Balloc+0x6e>
 8004104:	2221      	movs	r2, #33	; 0x21
 8004106:	2104      	movs	r1, #4
 8004108:	4620      	mov	r0, r4
 800410a:	f000 fc8b 	bl	8004a24 <_calloc_r>
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004110:	60f0      	str	r0, [r6, #12]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e4      	bne.n	80040e2 <_Balloc+0x2e>
 8004118:	2000      	movs	r0, #0
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	6802      	ldr	r2, [r0, #0]
 800411e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004122:	2300      	movs	r3, #0
 8004124:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004128:	e7f7      	b.n	800411a <_Balloc+0x66>
 800412a:	bf00      	nop
 800412c:	08005a68 	.word	0x08005a68
 8004130:	08005bac 	.word	0x08005bac

08004134 <_Bfree>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004138:	4605      	mov	r5, r0
 800413a:	460c      	mov	r4, r1
 800413c:	b976      	cbnz	r6, 800415c <_Bfree+0x28>
 800413e:	2010      	movs	r0, #16
 8004140:	f7ff ff90 	bl	8004064 <malloc>
 8004144:	4602      	mov	r2, r0
 8004146:	6268      	str	r0, [r5, #36]	; 0x24
 8004148:	b920      	cbnz	r0, 8004154 <_Bfree+0x20>
 800414a:	218a      	movs	r1, #138	; 0x8a
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <_Bfree+0x3c>)
 800414e:	4809      	ldr	r0, [pc, #36]	; (8004174 <_Bfree+0x40>)
 8004150:	f7ff fbf2 	bl	8003938 <__assert_func>
 8004154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004158:	6006      	str	r6, [r0, #0]
 800415a:	60c6      	str	r6, [r0, #12]
 800415c:	b13c      	cbz	r4, 800416e <_Bfree+0x3a>
 800415e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004160:	6862      	ldr	r2, [r4, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004168:	6021      	str	r1, [r4, #0]
 800416a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	08005a68 	.word	0x08005a68
 8004174:	08005bac 	.word	0x08005bac

08004178 <__multadd>:
 8004178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417c:	4698      	mov	r8, r3
 800417e:	460c      	mov	r4, r1
 8004180:	2300      	movs	r3, #0
 8004182:	690e      	ldr	r6, [r1, #16]
 8004184:	4607      	mov	r7, r0
 8004186:	f101 0014 	add.w	r0, r1, #20
 800418a:	6805      	ldr	r5, [r0, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	b2a9      	uxth	r1, r5
 8004190:	fb02 8101 	mla	r1, r2, r1, r8
 8004194:	0c2d      	lsrs	r5, r5, #16
 8004196:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800419a:	fb02 c505 	mla	r5, r2, r5, ip
 800419e:	b289      	uxth	r1, r1
 80041a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80041a4:	429e      	cmp	r6, r3
 80041a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80041aa:	f840 1b04 	str.w	r1, [r0], #4
 80041ae:	dcec      	bgt.n	800418a <__multadd+0x12>
 80041b0:	f1b8 0f00 	cmp.w	r8, #0
 80041b4:	d022      	beq.n	80041fc <__multadd+0x84>
 80041b6:	68a3      	ldr	r3, [r4, #8]
 80041b8:	42b3      	cmp	r3, r6
 80041ba:	dc19      	bgt.n	80041f0 <__multadd+0x78>
 80041bc:	6861      	ldr	r1, [r4, #4]
 80041be:	4638      	mov	r0, r7
 80041c0:	3101      	adds	r1, #1
 80041c2:	f7ff ff77 	bl	80040b4 <_Balloc>
 80041c6:	4605      	mov	r5, r0
 80041c8:	b928      	cbnz	r0, 80041d6 <__multadd+0x5e>
 80041ca:	4602      	mov	r2, r0
 80041cc:	21b5      	movs	r1, #181	; 0xb5
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <__multadd+0x8c>)
 80041d0:	480d      	ldr	r0, [pc, #52]	; (8004208 <__multadd+0x90>)
 80041d2:	f7ff fbb1 	bl	8003938 <__assert_func>
 80041d6:	6922      	ldr	r2, [r4, #16]
 80041d8:	f104 010c 	add.w	r1, r4, #12
 80041dc:	3202      	adds	r2, #2
 80041de:	0092      	lsls	r2, r2, #2
 80041e0:	300c      	adds	r0, #12
 80041e2:	f7ff ff59 	bl	8004098 <memcpy>
 80041e6:	4621      	mov	r1, r4
 80041e8:	4638      	mov	r0, r7
 80041ea:	f7ff ffa3 	bl	8004134 <_Bfree>
 80041ee:	462c      	mov	r4, r5
 80041f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80041f4:	3601      	adds	r6, #1
 80041f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80041fa:	6126      	str	r6, [r4, #16]
 80041fc:	4620      	mov	r0, r4
 80041fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004202:	bf00      	nop
 8004204:	08005b1c 	.word	0x08005b1c
 8004208:	08005bac 	.word	0x08005bac

0800420c <__s2b>:
 800420c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004210:	4615      	mov	r5, r2
 8004212:	2209      	movs	r2, #9
 8004214:	461f      	mov	r7, r3
 8004216:	3308      	adds	r3, #8
 8004218:	460c      	mov	r4, r1
 800421a:	fb93 f3f2 	sdiv	r3, r3, r2
 800421e:	4606      	mov	r6, r0
 8004220:	2201      	movs	r2, #1
 8004222:	2100      	movs	r1, #0
 8004224:	429a      	cmp	r2, r3
 8004226:	db09      	blt.n	800423c <__s2b+0x30>
 8004228:	4630      	mov	r0, r6
 800422a:	f7ff ff43 	bl	80040b4 <_Balloc>
 800422e:	b940      	cbnz	r0, 8004242 <__s2b+0x36>
 8004230:	4602      	mov	r2, r0
 8004232:	21ce      	movs	r1, #206	; 0xce
 8004234:	4b18      	ldr	r3, [pc, #96]	; (8004298 <__s2b+0x8c>)
 8004236:	4819      	ldr	r0, [pc, #100]	; (800429c <__s2b+0x90>)
 8004238:	f7ff fb7e 	bl	8003938 <__assert_func>
 800423c:	0052      	lsls	r2, r2, #1
 800423e:	3101      	adds	r1, #1
 8004240:	e7f0      	b.n	8004224 <__s2b+0x18>
 8004242:	9b08      	ldr	r3, [sp, #32]
 8004244:	2d09      	cmp	r5, #9
 8004246:	6143      	str	r3, [r0, #20]
 8004248:	f04f 0301 	mov.w	r3, #1
 800424c:	6103      	str	r3, [r0, #16]
 800424e:	dd16      	ble.n	800427e <__s2b+0x72>
 8004250:	f104 0909 	add.w	r9, r4, #9
 8004254:	46c8      	mov	r8, r9
 8004256:	442c      	add	r4, r5
 8004258:	f818 3b01 	ldrb.w	r3, [r8], #1
 800425c:	4601      	mov	r1, r0
 800425e:	220a      	movs	r2, #10
 8004260:	4630      	mov	r0, r6
 8004262:	3b30      	subs	r3, #48	; 0x30
 8004264:	f7ff ff88 	bl	8004178 <__multadd>
 8004268:	45a0      	cmp	r8, r4
 800426a:	d1f5      	bne.n	8004258 <__s2b+0x4c>
 800426c:	f1a5 0408 	sub.w	r4, r5, #8
 8004270:	444c      	add	r4, r9
 8004272:	1b2d      	subs	r5, r5, r4
 8004274:	1963      	adds	r3, r4, r5
 8004276:	42bb      	cmp	r3, r7
 8004278:	db04      	blt.n	8004284 <__s2b+0x78>
 800427a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427e:	2509      	movs	r5, #9
 8004280:	340a      	adds	r4, #10
 8004282:	e7f6      	b.n	8004272 <__s2b+0x66>
 8004284:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004288:	4601      	mov	r1, r0
 800428a:	220a      	movs	r2, #10
 800428c:	4630      	mov	r0, r6
 800428e:	3b30      	subs	r3, #48	; 0x30
 8004290:	f7ff ff72 	bl	8004178 <__multadd>
 8004294:	e7ee      	b.n	8004274 <__s2b+0x68>
 8004296:	bf00      	nop
 8004298:	08005b1c 	.word	0x08005b1c
 800429c:	08005bac 	.word	0x08005bac

080042a0 <__hi0bits>:
 80042a0:	0c02      	lsrs	r2, r0, #16
 80042a2:	0412      	lsls	r2, r2, #16
 80042a4:	4603      	mov	r3, r0
 80042a6:	b9ca      	cbnz	r2, 80042dc <__hi0bits+0x3c>
 80042a8:	0403      	lsls	r3, r0, #16
 80042aa:	2010      	movs	r0, #16
 80042ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80042b0:	bf04      	itt	eq
 80042b2:	021b      	lsleq	r3, r3, #8
 80042b4:	3008      	addeq	r0, #8
 80042b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80042ba:	bf04      	itt	eq
 80042bc:	011b      	lsleq	r3, r3, #4
 80042be:	3004      	addeq	r0, #4
 80042c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80042c4:	bf04      	itt	eq
 80042c6:	009b      	lsleq	r3, r3, #2
 80042c8:	3002      	addeq	r0, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db05      	blt.n	80042da <__hi0bits+0x3a>
 80042ce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80042d2:	f100 0001 	add.w	r0, r0, #1
 80042d6:	bf08      	it	eq
 80042d8:	2020      	moveq	r0, #32
 80042da:	4770      	bx	lr
 80042dc:	2000      	movs	r0, #0
 80042de:	e7e5      	b.n	80042ac <__hi0bits+0xc>

080042e0 <__lo0bits>:
 80042e0:	6803      	ldr	r3, [r0, #0]
 80042e2:	4602      	mov	r2, r0
 80042e4:	f013 0007 	ands.w	r0, r3, #7
 80042e8:	d00b      	beq.n	8004302 <__lo0bits+0x22>
 80042ea:	07d9      	lsls	r1, r3, #31
 80042ec:	d422      	bmi.n	8004334 <__lo0bits+0x54>
 80042ee:	0798      	lsls	r0, r3, #30
 80042f0:	bf49      	itett	mi
 80042f2:	085b      	lsrmi	r3, r3, #1
 80042f4:	089b      	lsrpl	r3, r3, #2
 80042f6:	2001      	movmi	r0, #1
 80042f8:	6013      	strmi	r3, [r2, #0]
 80042fa:	bf5c      	itt	pl
 80042fc:	2002      	movpl	r0, #2
 80042fe:	6013      	strpl	r3, [r2, #0]
 8004300:	4770      	bx	lr
 8004302:	b299      	uxth	r1, r3
 8004304:	b909      	cbnz	r1, 800430a <__lo0bits+0x2a>
 8004306:	2010      	movs	r0, #16
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800430e:	bf04      	itt	eq
 8004310:	0a1b      	lsreq	r3, r3, #8
 8004312:	3008      	addeq	r0, #8
 8004314:	0719      	lsls	r1, r3, #28
 8004316:	bf04      	itt	eq
 8004318:	091b      	lsreq	r3, r3, #4
 800431a:	3004      	addeq	r0, #4
 800431c:	0799      	lsls	r1, r3, #30
 800431e:	bf04      	itt	eq
 8004320:	089b      	lsreq	r3, r3, #2
 8004322:	3002      	addeq	r0, #2
 8004324:	07d9      	lsls	r1, r3, #31
 8004326:	d403      	bmi.n	8004330 <__lo0bits+0x50>
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	f100 0001 	add.w	r0, r0, #1
 800432e:	d003      	beq.n	8004338 <__lo0bits+0x58>
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4770      	bx	lr
 8004334:	2000      	movs	r0, #0
 8004336:	4770      	bx	lr
 8004338:	2020      	movs	r0, #32
 800433a:	4770      	bx	lr

0800433c <__i2b>:
 800433c:	b510      	push	{r4, lr}
 800433e:	460c      	mov	r4, r1
 8004340:	2101      	movs	r1, #1
 8004342:	f7ff feb7 	bl	80040b4 <_Balloc>
 8004346:	4602      	mov	r2, r0
 8004348:	b928      	cbnz	r0, 8004356 <__i2b+0x1a>
 800434a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800434e:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__i2b+0x24>)
 8004350:	4804      	ldr	r0, [pc, #16]	; (8004364 <__i2b+0x28>)
 8004352:	f7ff faf1 	bl	8003938 <__assert_func>
 8004356:	2301      	movs	r3, #1
 8004358:	6144      	str	r4, [r0, #20]
 800435a:	6103      	str	r3, [r0, #16]
 800435c:	bd10      	pop	{r4, pc}
 800435e:	bf00      	nop
 8004360:	08005b1c 	.word	0x08005b1c
 8004364:	08005bac 	.word	0x08005bac

08004368 <__multiply>:
 8004368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800436c:	4614      	mov	r4, r2
 800436e:	690a      	ldr	r2, [r1, #16]
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	460d      	mov	r5, r1
 8004374:	429a      	cmp	r2, r3
 8004376:	bfbe      	ittt	lt
 8004378:	460b      	movlt	r3, r1
 800437a:	4625      	movlt	r5, r4
 800437c:	461c      	movlt	r4, r3
 800437e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004382:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004386:	68ab      	ldr	r3, [r5, #8]
 8004388:	6869      	ldr	r1, [r5, #4]
 800438a:	eb0a 0709 	add.w	r7, sl, r9
 800438e:	42bb      	cmp	r3, r7
 8004390:	b085      	sub	sp, #20
 8004392:	bfb8      	it	lt
 8004394:	3101      	addlt	r1, #1
 8004396:	f7ff fe8d 	bl	80040b4 <_Balloc>
 800439a:	b930      	cbnz	r0, 80043aa <__multiply+0x42>
 800439c:	4602      	mov	r2, r0
 800439e:	f240 115d 	movw	r1, #349	; 0x15d
 80043a2:	4b41      	ldr	r3, [pc, #260]	; (80044a8 <__multiply+0x140>)
 80043a4:	4841      	ldr	r0, [pc, #260]	; (80044ac <__multiply+0x144>)
 80043a6:	f7ff fac7 	bl	8003938 <__assert_func>
 80043aa:	f100 0614 	add.w	r6, r0, #20
 80043ae:	4633      	mov	r3, r6
 80043b0:	2200      	movs	r2, #0
 80043b2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80043b6:	4543      	cmp	r3, r8
 80043b8:	d31e      	bcc.n	80043f8 <__multiply+0x90>
 80043ba:	f105 0c14 	add.w	ip, r5, #20
 80043be:	f104 0314 	add.w	r3, r4, #20
 80043c2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80043c6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80043ca:	9202      	str	r2, [sp, #8]
 80043cc:	ebac 0205 	sub.w	r2, ip, r5
 80043d0:	3a15      	subs	r2, #21
 80043d2:	f022 0203 	bic.w	r2, r2, #3
 80043d6:	3204      	adds	r2, #4
 80043d8:	f105 0115 	add.w	r1, r5, #21
 80043dc:	458c      	cmp	ip, r1
 80043de:	bf38      	it	cc
 80043e0:	2204      	movcc	r2, #4
 80043e2:	9201      	str	r2, [sp, #4]
 80043e4:	9a02      	ldr	r2, [sp, #8]
 80043e6:	9303      	str	r3, [sp, #12]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d808      	bhi.n	80043fe <__multiply+0x96>
 80043ec:	2f00      	cmp	r7, #0
 80043ee:	dc55      	bgt.n	800449c <__multiply+0x134>
 80043f0:	6107      	str	r7, [r0, #16]
 80043f2:	b005      	add	sp, #20
 80043f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f8:	f843 2b04 	str.w	r2, [r3], #4
 80043fc:	e7db      	b.n	80043b6 <__multiply+0x4e>
 80043fe:	f8b3 a000 	ldrh.w	sl, [r3]
 8004402:	f1ba 0f00 	cmp.w	sl, #0
 8004406:	d020      	beq.n	800444a <__multiply+0xe2>
 8004408:	46b1      	mov	r9, r6
 800440a:	2200      	movs	r2, #0
 800440c:	f105 0e14 	add.w	lr, r5, #20
 8004410:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004414:	f8d9 b000 	ldr.w	fp, [r9]
 8004418:	b2a1      	uxth	r1, r4
 800441a:	fa1f fb8b 	uxth.w	fp, fp
 800441e:	fb0a b101 	mla	r1, sl, r1, fp
 8004422:	4411      	add	r1, r2
 8004424:	f8d9 2000 	ldr.w	r2, [r9]
 8004428:	0c24      	lsrs	r4, r4, #16
 800442a:	0c12      	lsrs	r2, r2, #16
 800442c:	fb0a 2404 	mla	r4, sl, r4, r2
 8004430:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004434:	b289      	uxth	r1, r1
 8004436:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800443a:	45f4      	cmp	ip, lr
 800443c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004440:	f849 1b04 	str.w	r1, [r9], #4
 8004444:	d8e4      	bhi.n	8004410 <__multiply+0xa8>
 8004446:	9901      	ldr	r1, [sp, #4]
 8004448:	5072      	str	r2, [r6, r1]
 800444a:	9a03      	ldr	r2, [sp, #12]
 800444c:	3304      	adds	r3, #4
 800444e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004452:	f1b9 0f00 	cmp.w	r9, #0
 8004456:	d01f      	beq.n	8004498 <__multiply+0x130>
 8004458:	46b6      	mov	lr, r6
 800445a:	f04f 0a00 	mov.w	sl, #0
 800445e:	6834      	ldr	r4, [r6, #0]
 8004460:	f105 0114 	add.w	r1, r5, #20
 8004464:	880a      	ldrh	r2, [r1, #0]
 8004466:	f8be b002 	ldrh.w	fp, [lr, #2]
 800446a:	b2a4      	uxth	r4, r4
 800446c:	fb09 b202 	mla	r2, r9, r2, fp
 8004470:	4492      	add	sl, r2
 8004472:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004476:	f84e 4b04 	str.w	r4, [lr], #4
 800447a:	f851 4b04 	ldr.w	r4, [r1], #4
 800447e:	f8be 2000 	ldrh.w	r2, [lr]
 8004482:	0c24      	lsrs	r4, r4, #16
 8004484:	fb09 2404 	mla	r4, r9, r4, r2
 8004488:	458c      	cmp	ip, r1
 800448a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800448e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004492:	d8e7      	bhi.n	8004464 <__multiply+0xfc>
 8004494:	9a01      	ldr	r2, [sp, #4]
 8004496:	50b4      	str	r4, [r6, r2]
 8004498:	3604      	adds	r6, #4
 800449a:	e7a3      	b.n	80043e4 <__multiply+0x7c>
 800449c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1a5      	bne.n	80043f0 <__multiply+0x88>
 80044a4:	3f01      	subs	r7, #1
 80044a6:	e7a1      	b.n	80043ec <__multiply+0x84>
 80044a8:	08005b1c 	.word	0x08005b1c
 80044ac:	08005bac 	.word	0x08005bac

080044b0 <__pow5mult>:
 80044b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b4:	4615      	mov	r5, r2
 80044b6:	f012 0203 	ands.w	r2, r2, #3
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	d007      	beq.n	80044d0 <__pow5mult+0x20>
 80044c0:	4c25      	ldr	r4, [pc, #148]	; (8004558 <__pow5mult+0xa8>)
 80044c2:	3a01      	subs	r2, #1
 80044c4:	2300      	movs	r3, #0
 80044c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044ca:	f7ff fe55 	bl	8004178 <__multadd>
 80044ce:	4607      	mov	r7, r0
 80044d0:	10ad      	asrs	r5, r5, #2
 80044d2:	d03d      	beq.n	8004550 <__pow5mult+0xa0>
 80044d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80044d6:	b97c      	cbnz	r4, 80044f8 <__pow5mult+0x48>
 80044d8:	2010      	movs	r0, #16
 80044da:	f7ff fdc3 	bl	8004064 <malloc>
 80044de:	4602      	mov	r2, r0
 80044e0:	6270      	str	r0, [r6, #36]	; 0x24
 80044e2:	b928      	cbnz	r0, 80044f0 <__pow5mult+0x40>
 80044e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80044e8:	4b1c      	ldr	r3, [pc, #112]	; (800455c <__pow5mult+0xac>)
 80044ea:	481d      	ldr	r0, [pc, #116]	; (8004560 <__pow5mult+0xb0>)
 80044ec:	f7ff fa24 	bl	8003938 <__assert_func>
 80044f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044f4:	6004      	str	r4, [r0, #0]
 80044f6:	60c4      	str	r4, [r0, #12]
 80044f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80044fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004500:	b94c      	cbnz	r4, 8004516 <__pow5mult+0x66>
 8004502:	f240 2171 	movw	r1, #625	; 0x271
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff ff18 	bl	800433c <__i2b>
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	f8c8 0008 	str.w	r0, [r8, #8]
 8004514:	6003      	str	r3, [r0, #0]
 8004516:	f04f 0900 	mov.w	r9, #0
 800451a:	07eb      	lsls	r3, r5, #31
 800451c:	d50a      	bpl.n	8004534 <__pow5mult+0x84>
 800451e:	4639      	mov	r1, r7
 8004520:	4622      	mov	r2, r4
 8004522:	4630      	mov	r0, r6
 8004524:	f7ff ff20 	bl	8004368 <__multiply>
 8004528:	4680      	mov	r8, r0
 800452a:	4639      	mov	r1, r7
 800452c:	4630      	mov	r0, r6
 800452e:	f7ff fe01 	bl	8004134 <_Bfree>
 8004532:	4647      	mov	r7, r8
 8004534:	106d      	asrs	r5, r5, #1
 8004536:	d00b      	beq.n	8004550 <__pow5mult+0xa0>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	b938      	cbnz	r0, 800454c <__pow5mult+0x9c>
 800453c:	4622      	mov	r2, r4
 800453e:	4621      	mov	r1, r4
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ff11 	bl	8004368 <__multiply>
 8004546:	6020      	str	r0, [r4, #0]
 8004548:	f8c0 9000 	str.w	r9, [r0]
 800454c:	4604      	mov	r4, r0
 800454e:	e7e4      	b.n	800451a <__pow5mult+0x6a>
 8004550:	4638      	mov	r0, r7
 8004552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004556:	bf00      	nop
 8004558:	08005d00 	.word	0x08005d00
 800455c:	08005a68 	.word	0x08005a68
 8004560:	08005bac 	.word	0x08005bac

08004564 <__lshift>:
 8004564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	460c      	mov	r4, r1
 800456a:	4607      	mov	r7, r0
 800456c:	4691      	mov	r9, r2
 800456e:	6923      	ldr	r3, [r4, #16]
 8004570:	6849      	ldr	r1, [r1, #4]
 8004572:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800457c:	f108 0601 	add.w	r6, r8, #1
 8004580:	42b3      	cmp	r3, r6
 8004582:	db0b      	blt.n	800459c <__lshift+0x38>
 8004584:	4638      	mov	r0, r7
 8004586:	f7ff fd95 	bl	80040b4 <_Balloc>
 800458a:	4605      	mov	r5, r0
 800458c:	b948      	cbnz	r0, 80045a2 <__lshift+0x3e>
 800458e:	4602      	mov	r2, r0
 8004590:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <__lshift+0xd0>)
 8004596:	4828      	ldr	r0, [pc, #160]	; (8004638 <__lshift+0xd4>)
 8004598:	f7ff f9ce 	bl	8003938 <__assert_func>
 800459c:	3101      	adds	r1, #1
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	e7ee      	b.n	8004580 <__lshift+0x1c>
 80045a2:	2300      	movs	r3, #0
 80045a4:	f100 0114 	add.w	r1, r0, #20
 80045a8:	f100 0210 	add.w	r2, r0, #16
 80045ac:	4618      	mov	r0, r3
 80045ae:	4553      	cmp	r3, sl
 80045b0:	db33      	blt.n	800461a <__lshift+0xb6>
 80045b2:	6920      	ldr	r0, [r4, #16]
 80045b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045b8:	f104 0314 	add.w	r3, r4, #20
 80045bc:	f019 091f 	ands.w	r9, r9, #31
 80045c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80045c8:	d02b      	beq.n	8004622 <__lshift+0xbe>
 80045ca:	468a      	mov	sl, r1
 80045cc:	2200      	movs	r2, #0
 80045ce:	f1c9 0e20 	rsb	lr, r9, #32
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	fa00 f009 	lsl.w	r0, r0, r9
 80045d8:	4302      	orrs	r2, r0
 80045da:	f84a 2b04 	str.w	r2, [sl], #4
 80045de:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e2:	459c      	cmp	ip, r3
 80045e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80045e8:	d8f3      	bhi.n	80045d2 <__lshift+0x6e>
 80045ea:	ebac 0304 	sub.w	r3, ip, r4
 80045ee:	3b15      	subs	r3, #21
 80045f0:	f023 0303 	bic.w	r3, r3, #3
 80045f4:	3304      	adds	r3, #4
 80045f6:	f104 0015 	add.w	r0, r4, #21
 80045fa:	4584      	cmp	ip, r0
 80045fc:	bf38      	it	cc
 80045fe:	2304      	movcc	r3, #4
 8004600:	50ca      	str	r2, [r1, r3]
 8004602:	b10a      	cbz	r2, 8004608 <__lshift+0xa4>
 8004604:	f108 0602 	add.w	r6, r8, #2
 8004608:	3e01      	subs	r6, #1
 800460a:	4638      	mov	r0, r7
 800460c:	4621      	mov	r1, r4
 800460e:	612e      	str	r6, [r5, #16]
 8004610:	f7ff fd90 	bl	8004134 <_Bfree>
 8004614:	4628      	mov	r0, r5
 8004616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800461a:	f842 0f04 	str.w	r0, [r2, #4]!
 800461e:	3301      	adds	r3, #1
 8004620:	e7c5      	b.n	80045ae <__lshift+0x4a>
 8004622:	3904      	subs	r1, #4
 8004624:	f853 2b04 	ldr.w	r2, [r3], #4
 8004628:	459c      	cmp	ip, r3
 800462a:	f841 2f04 	str.w	r2, [r1, #4]!
 800462e:	d8f9      	bhi.n	8004624 <__lshift+0xc0>
 8004630:	e7ea      	b.n	8004608 <__lshift+0xa4>
 8004632:	bf00      	nop
 8004634:	08005b1c 	.word	0x08005b1c
 8004638:	08005bac 	.word	0x08005bac

0800463c <__mcmp>:
 800463c:	4603      	mov	r3, r0
 800463e:	690a      	ldr	r2, [r1, #16]
 8004640:	6900      	ldr	r0, [r0, #16]
 8004642:	b530      	push	{r4, r5, lr}
 8004644:	1a80      	subs	r0, r0, r2
 8004646:	d10d      	bne.n	8004664 <__mcmp+0x28>
 8004648:	3314      	adds	r3, #20
 800464a:	3114      	adds	r1, #20
 800464c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004650:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800465c:	4295      	cmp	r5, r2
 800465e:	d002      	beq.n	8004666 <__mcmp+0x2a>
 8004660:	d304      	bcc.n	800466c <__mcmp+0x30>
 8004662:	2001      	movs	r0, #1
 8004664:	bd30      	pop	{r4, r5, pc}
 8004666:	42a3      	cmp	r3, r4
 8004668:	d3f4      	bcc.n	8004654 <__mcmp+0x18>
 800466a:	e7fb      	b.n	8004664 <__mcmp+0x28>
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	e7f8      	b.n	8004664 <__mcmp+0x28>
	...

08004674 <__mdiff>:
 8004674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	460c      	mov	r4, r1
 800467a:	4606      	mov	r6, r0
 800467c:	4611      	mov	r1, r2
 800467e:	4620      	mov	r0, r4
 8004680:	4692      	mov	sl, r2
 8004682:	f7ff ffdb 	bl	800463c <__mcmp>
 8004686:	1e05      	subs	r5, r0, #0
 8004688:	d111      	bne.n	80046ae <__mdiff+0x3a>
 800468a:	4629      	mov	r1, r5
 800468c:	4630      	mov	r0, r6
 800468e:	f7ff fd11 	bl	80040b4 <_Balloc>
 8004692:	4602      	mov	r2, r0
 8004694:	b928      	cbnz	r0, 80046a2 <__mdiff+0x2e>
 8004696:	f240 2132 	movw	r1, #562	; 0x232
 800469a:	4b3c      	ldr	r3, [pc, #240]	; (800478c <__mdiff+0x118>)
 800469c:	483c      	ldr	r0, [pc, #240]	; (8004790 <__mdiff+0x11c>)
 800469e:	f7ff f94b 	bl	8003938 <__assert_func>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80046a8:	4610      	mov	r0, r2
 80046aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ae:	bfa4      	itt	ge
 80046b0:	4653      	movge	r3, sl
 80046b2:	46a2      	movge	sl, r4
 80046b4:	4630      	mov	r0, r6
 80046b6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80046ba:	bfa6      	itte	ge
 80046bc:	461c      	movge	r4, r3
 80046be:	2500      	movge	r5, #0
 80046c0:	2501      	movlt	r5, #1
 80046c2:	f7ff fcf7 	bl	80040b4 <_Balloc>
 80046c6:	4602      	mov	r2, r0
 80046c8:	b918      	cbnz	r0, 80046d2 <__mdiff+0x5e>
 80046ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80046ce:	4b2f      	ldr	r3, [pc, #188]	; (800478c <__mdiff+0x118>)
 80046d0:	e7e4      	b.n	800469c <__mdiff+0x28>
 80046d2:	f100 0814 	add.w	r8, r0, #20
 80046d6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80046da:	60c5      	str	r5, [r0, #12]
 80046dc:	f04f 0c00 	mov.w	ip, #0
 80046e0:	f10a 0514 	add.w	r5, sl, #20
 80046e4:	f10a 0010 	add.w	r0, sl, #16
 80046e8:	46c2      	mov	sl, r8
 80046ea:	6926      	ldr	r6, [r4, #16]
 80046ec:	f104 0914 	add.w	r9, r4, #20
 80046f0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80046f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80046f8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80046fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8004700:	fa1f f18b 	uxth.w	r1, fp
 8004704:	4461      	add	r1, ip
 8004706:	fa1f fc83 	uxth.w	ip, r3
 800470a:	0c1b      	lsrs	r3, r3, #16
 800470c:	eba1 010c 	sub.w	r1, r1, ip
 8004710:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004714:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004718:	b289      	uxth	r1, r1
 800471a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800471e:	454e      	cmp	r6, r9
 8004720:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004724:	f84a 3b04 	str.w	r3, [sl], #4
 8004728:	d8e6      	bhi.n	80046f8 <__mdiff+0x84>
 800472a:	1b33      	subs	r3, r6, r4
 800472c:	3b15      	subs	r3, #21
 800472e:	f023 0303 	bic.w	r3, r3, #3
 8004732:	3415      	adds	r4, #21
 8004734:	3304      	adds	r3, #4
 8004736:	42a6      	cmp	r6, r4
 8004738:	bf38      	it	cc
 800473a:	2304      	movcc	r3, #4
 800473c:	441d      	add	r5, r3
 800473e:	4443      	add	r3, r8
 8004740:	461e      	mov	r6, r3
 8004742:	462c      	mov	r4, r5
 8004744:	4574      	cmp	r4, lr
 8004746:	d30e      	bcc.n	8004766 <__mdiff+0xf2>
 8004748:	f10e 0103 	add.w	r1, lr, #3
 800474c:	1b49      	subs	r1, r1, r5
 800474e:	f021 0103 	bic.w	r1, r1, #3
 8004752:	3d03      	subs	r5, #3
 8004754:	45ae      	cmp	lr, r5
 8004756:	bf38      	it	cc
 8004758:	2100      	movcc	r1, #0
 800475a:	4419      	add	r1, r3
 800475c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004760:	b18b      	cbz	r3, 8004786 <__mdiff+0x112>
 8004762:	6117      	str	r7, [r2, #16]
 8004764:	e7a0      	b.n	80046a8 <__mdiff+0x34>
 8004766:	f854 8b04 	ldr.w	r8, [r4], #4
 800476a:	fa1f f188 	uxth.w	r1, r8
 800476e:	4461      	add	r1, ip
 8004770:	1408      	asrs	r0, r1, #16
 8004772:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004776:	b289      	uxth	r1, r1
 8004778:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800477c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004780:	f846 1b04 	str.w	r1, [r6], #4
 8004784:	e7de      	b.n	8004744 <__mdiff+0xd0>
 8004786:	3f01      	subs	r7, #1
 8004788:	e7e8      	b.n	800475c <__mdiff+0xe8>
 800478a:	bf00      	nop
 800478c:	08005b1c 	.word	0x08005b1c
 8004790:	08005bac 	.word	0x08005bac

08004794 <__ulp>:
 8004794:	4b11      	ldr	r3, [pc, #68]	; (80047dc <__ulp+0x48>)
 8004796:	400b      	ands	r3, r1
 8004798:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	dd02      	ble.n	80047a6 <__ulp+0x12>
 80047a0:	2000      	movs	r0, #0
 80047a2:	4619      	mov	r1, r3
 80047a4:	4770      	bx	lr
 80047a6:	425b      	negs	r3, r3
 80047a8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	f04f 0100 	mov.w	r1, #0
 80047b4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80047b8:	da04      	bge.n	80047c4 <__ulp+0x30>
 80047ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80047be:	fa43 f102 	asr.w	r1, r3, r2
 80047c2:	4770      	bx	lr
 80047c4:	f1a2 0314 	sub.w	r3, r2, #20
 80047c8:	2b1e      	cmp	r3, #30
 80047ca:	bfd6      	itet	le
 80047cc:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80047d0:	2301      	movgt	r3, #1
 80047d2:	fa22 f303 	lsrle.w	r3, r2, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	7ff00000 	.word	0x7ff00000

080047e0 <__b2d>:
 80047e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e4:	6907      	ldr	r7, [r0, #16]
 80047e6:	f100 0914 	add.w	r9, r0, #20
 80047ea:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80047ee:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80047f2:	f1a7 0804 	sub.w	r8, r7, #4
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7ff fd52 	bl	80042a0 <__hi0bits>
 80047fc:	f1c0 0320 	rsb	r3, r0, #32
 8004800:	280a      	cmp	r0, #10
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	491f      	ldr	r1, [pc, #124]	; (8004884 <__b2d+0xa4>)
 8004806:	dc17      	bgt.n	8004838 <__b2d+0x58>
 8004808:	45c1      	cmp	r9, r8
 800480a:	bf28      	it	cs
 800480c:	2200      	movcs	r2, #0
 800480e:	f1c0 0c0b 	rsb	ip, r0, #11
 8004812:	fa26 f30c 	lsr.w	r3, r6, ip
 8004816:	bf38      	it	cc
 8004818:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800481c:	ea43 0501 	orr.w	r5, r3, r1
 8004820:	f100 0315 	add.w	r3, r0, #21
 8004824:	fa06 f303 	lsl.w	r3, r6, r3
 8004828:	fa22 f20c 	lsr.w	r2, r2, ip
 800482c:	ea43 0402 	orr.w	r4, r3, r2
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004838:	45c1      	cmp	r9, r8
 800483a:	bf2e      	itee	cs
 800483c:	2200      	movcs	r2, #0
 800483e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8004842:	f1a7 0808 	subcc.w	r8, r7, #8
 8004846:	f1b0 030b 	subs.w	r3, r0, #11
 800484a:	d016      	beq.n	800487a <__b2d+0x9a>
 800484c:	f1c3 0720 	rsb	r7, r3, #32
 8004850:	fa22 f107 	lsr.w	r1, r2, r7
 8004854:	45c8      	cmp	r8, r9
 8004856:	fa06 f603 	lsl.w	r6, r6, r3
 800485a:	ea46 0601 	orr.w	r6, r6, r1
 800485e:	bf94      	ite	ls
 8004860:	2100      	movls	r1, #0
 8004862:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8004866:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800486a:	fa02 f003 	lsl.w	r0, r2, r3
 800486e:	40f9      	lsrs	r1, r7
 8004870:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004874:	ea40 0401 	orr.w	r4, r0, r1
 8004878:	e7da      	b.n	8004830 <__b2d+0x50>
 800487a:	4614      	mov	r4, r2
 800487c:	ea46 0501 	orr.w	r5, r6, r1
 8004880:	e7d6      	b.n	8004830 <__b2d+0x50>
 8004882:	bf00      	nop
 8004884:	3ff00000 	.word	0x3ff00000

08004888 <__d2b>:
 8004888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800488c:	2101      	movs	r1, #1
 800488e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004892:	4690      	mov	r8, r2
 8004894:	461d      	mov	r5, r3
 8004896:	f7ff fc0d 	bl	80040b4 <_Balloc>
 800489a:	4604      	mov	r4, r0
 800489c:	b930      	cbnz	r0, 80048ac <__d2b+0x24>
 800489e:	4602      	mov	r2, r0
 80048a0:	f240 310a 	movw	r1, #778	; 0x30a
 80048a4:	4b24      	ldr	r3, [pc, #144]	; (8004938 <__d2b+0xb0>)
 80048a6:	4825      	ldr	r0, [pc, #148]	; (800493c <__d2b+0xb4>)
 80048a8:	f7ff f846 	bl	8003938 <__assert_func>
 80048ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80048b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80048b4:	bb2d      	cbnz	r5, 8004902 <__d2b+0x7a>
 80048b6:	9301      	str	r3, [sp, #4]
 80048b8:	f1b8 0300 	subs.w	r3, r8, #0
 80048bc:	d026      	beq.n	800490c <__d2b+0x84>
 80048be:	4668      	mov	r0, sp
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	f7ff fd0d 	bl	80042e0 <__lo0bits>
 80048c6:	9900      	ldr	r1, [sp, #0]
 80048c8:	b1f0      	cbz	r0, 8004908 <__d2b+0x80>
 80048ca:	9a01      	ldr	r2, [sp, #4]
 80048cc:	f1c0 0320 	rsb	r3, r0, #32
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	430b      	orrs	r3, r1
 80048d6:	40c2      	lsrs	r2, r0
 80048d8:	6163      	str	r3, [r4, #20]
 80048da:	9201      	str	r2, [sp, #4]
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2102      	movne	r1, #2
 80048e4:	2101      	moveq	r1, #1
 80048e6:	61a3      	str	r3, [r4, #24]
 80048e8:	6121      	str	r1, [r4, #16]
 80048ea:	b1c5      	cbz	r5, 800491e <__d2b+0x96>
 80048ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80048f0:	4405      	add	r5, r0
 80048f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048f6:	603d      	str	r5, [r7, #0]
 80048f8:	6030      	str	r0, [r6, #0]
 80048fa:	4620      	mov	r0, r4
 80048fc:	b002      	add	sp, #8
 80048fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	e7d6      	b.n	80048b6 <__d2b+0x2e>
 8004908:	6161      	str	r1, [r4, #20]
 800490a:	e7e7      	b.n	80048dc <__d2b+0x54>
 800490c:	a801      	add	r0, sp, #4
 800490e:	f7ff fce7 	bl	80042e0 <__lo0bits>
 8004912:	2101      	movs	r1, #1
 8004914:	9b01      	ldr	r3, [sp, #4]
 8004916:	6121      	str	r1, [r4, #16]
 8004918:	6163      	str	r3, [r4, #20]
 800491a:	3020      	adds	r0, #32
 800491c:	e7e5      	b.n	80048ea <__d2b+0x62>
 800491e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004922:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004926:	6038      	str	r0, [r7, #0]
 8004928:	6918      	ldr	r0, [r3, #16]
 800492a:	f7ff fcb9 	bl	80042a0 <__hi0bits>
 800492e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004932:	6031      	str	r1, [r6, #0]
 8004934:	e7e1      	b.n	80048fa <__d2b+0x72>
 8004936:	bf00      	nop
 8004938:	08005b1c 	.word	0x08005b1c
 800493c:	08005bac 	.word	0x08005bac

08004940 <__ratio>:
 8004940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4688      	mov	r8, r1
 8004946:	4669      	mov	r1, sp
 8004948:	4681      	mov	r9, r0
 800494a:	f7ff ff49 	bl	80047e0 <__b2d>
 800494e:	460f      	mov	r7, r1
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	4640      	mov	r0, r8
 8004956:	a901      	add	r1, sp, #4
 8004958:	f7ff ff42 	bl	80047e0 <__b2d>
 800495c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004960:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004964:	468b      	mov	fp, r1
 8004966:	eba3 0c02 	sub.w	ip, r3, r2
 800496a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004974:	2b00      	cmp	r3, #0
 8004976:	bfd5      	itete	le
 8004978:	460a      	movle	r2, r1
 800497a:	462a      	movgt	r2, r5
 800497c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004980:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004984:	bfd8      	it	le
 8004986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800498a:	465b      	mov	r3, fp
 800498c:	4602      	mov	r2, r0
 800498e:	4639      	mov	r1, r7
 8004990:	4620      	mov	r0, r4
 8004992:	f7fb fecb 	bl	800072c <__aeabi_ddiv>
 8004996:	b003      	add	sp, #12
 8004998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800499c <__copybits>:
 800499c:	3901      	subs	r1, #1
 800499e:	b570      	push	{r4, r5, r6, lr}
 80049a0:	1149      	asrs	r1, r1, #5
 80049a2:	6914      	ldr	r4, [r2, #16]
 80049a4:	3101      	adds	r1, #1
 80049a6:	f102 0314 	add.w	r3, r2, #20
 80049aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80049ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80049b2:	1f05      	subs	r5, r0, #4
 80049b4:	42a3      	cmp	r3, r4
 80049b6:	d30c      	bcc.n	80049d2 <__copybits+0x36>
 80049b8:	1aa3      	subs	r3, r4, r2
 80049ba:	3b11      	subs	r3, #17
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	3211      	adds	r2, #17
 80049c2:	42a2      	cmp	r2, r4
 80049c4:	bf88      	it	hi
 80049c6:	2300      	movhi	r3, #0
 80049c8:	4418      	add	r0, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	4288      	cmp	r0, r1
 80049ce:	d305      	bcc.n	80049dc <__copybits+0x40>
 80049d0:	bd70      	pop	{r4, r5, r6, pc}
 80049d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80049d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80049da:	e7eb      	b.n	80049b4 <__copybits+0x18>
 80049dc:	f840 3b04 	str.w	r3, [r0], #4
 80049e0:	e7f4      	b.n	80049cc <__copybits+0x30>

080049e2 <__any_on>:
 80049e2:	f100 0214 	add.w	r2, r0, #20
 80049e6:	6900      	ldr	r0, [r0, #16]
 80049e8:	114b      	asrs	r3, r1, #5
 80049ea:	4298      	cmp	r0, r3
 80049ec:	b510      	push	{r4, lr}
 80049ee:	db11      	blt.n	8004a14 <__any_on+0x32>
 80049f0:	dd0a      	ble.n	8004a08 <__any_on+0x26>
 80049f2:	f011 011f 	ands.w	r1, r1, #31
 80049f6:	d007      	beq.n	8004a08 <__any_on+0x26>
 80049f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80049fc:	fa24 f001 	lsr.w	r0, r4, r1
 8004a00:	fa00 f101 	lsl.w	r1, r0, r1
 8004a04:	428c      	cmp	r4, r1
 8004a06:	d10b      	bne.n	8004a20 <__any_on+0x3e>
 8004a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d803      	bhi.n	8004a18 <__any_on+0x36>
 8004a10:	2000      	movs	r0, #0
 8004a12:	bd10      	pop	{r4, pc}
 8004a14:	4603      	mov	r3, r0
 8004a16:	e7f7      	b.n	8004a08 <__any_on+0x26>
 8004a18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004a1c:	2900      	cmp	r1, #0
 8004a1e:	d0f5      	beq.n	8004a0c <__any_on+0x2a>
 8004a20:	2001      	movs	r0, #1
 8004a22:	e7f6      	b.n	8004a12 <__any_on+0x30>

08004a24 <_calloc_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	fb02 f501 	mul.w	r5, r2, r1
 8004a2a:	4629      	mov	r1, r5
 8004a2c:	f000 f854 	bl	8004ad8 <_malloc_r>
 8004a30:	4604      	mov	r4, r0
 8004a32:	b118      	cbz	r0, 8004a3c <_calloc_r+0x18>
 8004a34:	462a      	mov	r2, r5
 8004a36:	2100      	movs	r1, #0
 8004a38:	f7fe f8da 	bl	8002bf0 <memset>
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}

08004a40 <_free_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	4605      	mov	r5, r0
 8004a44:	2900      	cmp	r1, #0
 8004a46:	d043      	beq.n	8004ad0 <_free_r+0x90>
 8004a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a4c:	1f0c      	subs	r4, r1, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bfb8      	it	lt
 8004a52:	18e4      	addlt	r4, r4, r3
 8004a54:	f000 feb2 	bl	80057bc <__malloc_lock>
 8004a58:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <_free_r+0x94>)
 8004a5a:	6813      	ldr	r3, [r2, #0]
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	b933      	cbnz	r3, 8004a6e <_free_r+0x2e>
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	6014      	str	r4, [r2, #0]
 8004a64:	4628      	mov	r0, r5
 8004a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a6a:	f000 bead 	b.w	80057c8 <__malloc_unlock>
 8004a6e:	42a3      	cmp	r3, r4
 8004a70:	d90a      	bls.n	8004a88 <_free_r+0x48>
 8004a72:	6821      	ldr	r1, [r4, #0]
 8004a74:	1862      	adds	r2, r4, r1
 8004a76:	4293      	cmp	r3, r2
 8004a78:	bf01      	itttt	eq
 8004a7a:	681a      	ldreq	r2, [r3, #0]
 8004a7c:	685b      	ldreq	r3, [r3, #4]
 8004a7e:	1852      	addeq	r2, r2, r1
 8004a80:	6022      	streq	r2, [r4, #0]
 8004a82:	6063      	str	r3, [r4, #4]
 8004a84:	6004      	str	r4, [r0, #0]
 8004a86:	e7ed      	b.n	8004a64 <_free_r+0x24>
 8004a88:	461a      	mov	r2, r3
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	b10b      	cbz	r3, 8004a92 <_free_r+0x52>
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	d9fa      	bls.n	8004a88 <_free_r+0x48>
 8004a92:	6811      	ldr	r1, [r2, #0]
 8004a94:	1850      	adds	r0, r2, r1
 8004a96:	42a0      	cmp	r0, r4
 8004a98:	d10b      	bne.n	8004ab2 <_free_r+0x72>
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	4401      	add	r1, r0
 8004a9e:	1850      	adds	r0, r2, r1
 8004aa0:	4283      	cmp	r3, r0
 8004aa2:	6011      	str	r1, [r2, #0]
 8004aa4:	d1de      	bne.n	8004a64 <_free_r+0x24>
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4401      	add	r1, r0
 8004aac:	6011      	str	r1, [r2, #0]
 8004aae:	6053      	str	r3, [r2, #4]
 8004ab0:	e7d8      	b.n	8004a64 <_free_r+0x24>
 8004ab2:	d902      	bls.n	8004aba <_free_r+0x7a>
 8004ab4:	230c      	movs	r3, #12
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	e7d4      	b.n	8004a64 <_free_r+0x24>
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	1821      	adds	r1, r4, r0
 8004abe:	428b      	cmp	r3, r1
 8004ac0:	bf01      	itttt	eq
 8004ac2:	6819      	ldreq	r1, [r3, #0]
 8004ac4:	685b      	ldreq	r3, [r3, #4]
 8004ac6:	1809      	addeq	r1, r1, r0
 8004ac8:	6021      	streq	r1, [r4, #0]
 8004aca:	6063      	str	r3, [r4, #4]
 8004acc:	6054      	str	r4, [r2, #4]
 8004ace:	e7c9      	b.n	8004a64 <_free_r+0x24>
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20000200 	.word	0x20000200

08004ad8 <_malloc_r>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	1ccd      	adds	r5, r1, #3
 8004adc:	f025 0503 	bic.w	r5, r5, #3
 8004ae0:	3508      	adds	r5, #8
 8004ae2:	2d0c      	cmp	r5, #12
 8004ae4:	bf38      	it	cc
 8004ae6:	250c      	movcc	r5, #12
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	4606      	mov	r6, r0
 8004aec:	db01      	blt.n	8004af2 <_malloc_r+0x1a>
 8004aee:	42a9      	cmp	r1, r5
 8004af0:	d903      	bls.n	8004afa <_malloc_r+0x22>
 8004af2:	230c      	movs	r3, #12
 8004af4:	6033      	str	r3, [r6, #0]
 8004af6:	2000      	movs	r0, #0
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004afa:	f000 fe5f 	bl	80057bc <__malloc_lock>
 8004afe:	4921      	ldr	r1, [pc, #132]	; (8004b84 <_malloc_r+0xac>)
 8004b00:	680a      	ldr	r2, [r1, #0]
 8004b02:	4614      	mov	r4, r2
 8004b04:	b99c      	cbnz	r4, 8004b2e <_malloc_r+0x56>
 8004b06:	4f20      	ldr	r7, [pc, #128]	; (8004b88 <_malloc_r+0xb0>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	b923      	cbnz	r3, 8004b16 <_malloc_r+0x3e>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 fb30 	bl	8005174 <_sbrk_r>
 8004b14:	6038      	str	r0, [r7, #0]
 8004b16:	4629      	mov	r1, r5
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 fb2b 	bl	8005174 <_sbrk_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	d123      	bne.n	8004b6a <_malloc_r+0x92>
 8004b22:	230c      	movs	r3, #12
 8004b24:	4630      	mov	r0, r6
 8004b26:	6033      	str	r3, [r6, #0]
 8004b28:	f000 fe4e 	bl	80057c8 <__malloc_unlock>
 8004b2c:	e7e3      	b.n	8004af6 <_malloc_r+0x1e>
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	1b5b      	subs	r3, r3, r5
 8004b32:	d417      	bmi.n	8004b64 <_malloc_r+0x8c>
 8004b34:	2b0b      	cmp	r3, #11
 8004b36:	d903      	bls.n	8004b40 <_malloc_r+0x68>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	441c      	add	r4, r3
 8004b3c:	6025      	str	r5, [r4, #0]
 8004b3e:	e004      	b.n	8004b4a <_malloc_r+0x72>
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	42a2      	cmp	r2, r4
 8004b44:	bf0c      	ite	eq
 8004b46:	600b      	streq	r3, [r1, #0]
 8004b48:	6053      	strne	r3, [r2, #4]
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f000 fe3c 	bl	80057c8 <__malloc_unlock>
 8004b50:	f104 000b 	add.w	r0, r4, #11
 8004b54:	1d23      	adds	r3, r4, #4
 8004b56:	f020 0007 	bic.w	r0, r0, #7
 8004b5a:	1ac2      	subs	r2, r0, r3
 8004b5c:	d0cc      	beq.n	8004af8 <_malloc_r+0x20>
 8004b5e:	1a1b      	subs	r3, r3, r0
 8004b60:	50a3      	str	r3, [r4, r2]
 8004b62:	e7c9      	b.n	8004af8 <_malloc_r+0x20>
 8004b64:	4622      	mov	r2, r4
 8004b66:	6864      	ldr	r4, [r4, #4]
 8004b68:	e7cc      	b.n	8004b04 <_malloc_r+0x2c>
 8004b6a:	1cc4      	adds	r4, r0, #3
 8004b6c:	f024 0403 	bic.w	r4, r4, #3
 8004b70:	42a0      	cmp	r0, r4
 8004b72:	d0e3      	beq.n	8004b3c <_malloc_r+0x64>
 8004b74:	1a21      	subs	r1, r4, r0
 8004b76:	4630      	mov	r0, r6
 8004b78:	f000 fafc 	bl	8005174 <_sbrk_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d1dd      	bne.n	8004b3c <_malloc_r+0x64>
 8004b80:	e7cf      	b.n	8004b22 <_malloc_r+0x4a>
 8004b82:	bf00      	nop
 8004b84:	20000200 	.word	0x20000200
 8004b88:	20000204 	.word	0x20000204

08004b8c <__sfputc_r>:
 8004b8c:	6893      	ldr	r3, [r2, #8]
 8004b8e:	b410      	push	{r4}
 8004b90:	3b01      	subs	r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	6093      	str	r3, [r2, #8]
 8004b96:	da07      	bge.n	8004ba8 <__sfputc_r+0x1c>
 8004b98:	6994      	ldr	r4, [r2, #24]
 8004b9a:	42a3      	cmp	r3, r4
 8004b9c:	db01      	blt.n	8004ba2 <__sfputc_r+0x16>
 8004b9e:	290a      	cmp	r1, #10
 8004ba0:	d102      	bne.n	8004ba8 <__sfputc_r+0x1c>
 8004ba2:	bc10      	pop	{r4}
 8004ba4:	f000 bb08 	b.w	80051b8 <__swbuf_r>
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	1c58      	adds	r0, r3, #1
 8004bac:	6010      	str	r0, [r2, #0]
 8004bae:	7019      	strb	r1, [r3, #0]
 8004bb0:	4608      	mov	r0, r1
 8004bb2:	bc10      	pop	{r4}
 8004bb4:	4770      	bx	lr

08004bb6 <__sfputs_r>:
 8004bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb8:	4606      	mov	r6, r0
 8004bba:	460f      	mov	r7, r1
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	18d5      	adds	r5, r2, r3
 8004bc0:	42ac      	cmp	r4, r5
 8004bc2:	d101      	bne.n	8004bc8 <__sfputs_r+0x12>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e007      	b.n	8004bd8 <__sfputs_r+0x22>
 8004bc8:	463a      	mov	r2, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd0:	f7ff ffdc 	bl	8004b8c <__sfputc_r>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d1f3      	bne.n	8004bc0 <__sfputs_r+0xa>
 8004bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bdc <_vfiprintf_r>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	460d      	mov	r5, r1
 8004be2:	4614      	mov	r4, r2
 8004be4:	4698      	mov	r8, r3
 8004be6:	4606      	mov	r6, r0
 8004be8:	b09d      	sub	sp, #116	; 0x74
 8004bea:	b118      	cbz	r0, 8004bf4 <_vfiprintf_r+0x18>
 8004bec:	6983      	ldr	r3, [r0, #24]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x18>
 8004bf0:	f000 fcd2 	bl	8005598 <__sinit>
 8004bf4:	4b89      	ldr	r3, [pc, #548]	; (8004e1c <_vfiprintf_r+0x240>)
 8004bf6:	429d      	cmp	r5, r3
 8004bf8:	d11b      	bne.n	8004c32 <_vfiprintf_r+0x56>
 8004bfa:	6875      	ldr	r5, [r6, #4]
 8004bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bfe:	07d9      	lsls	r1, r3, #31
 8004c00:	d405      	bmi.n	8004c0e <_vfiprintf_r+0x32>
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	059a      	lsls	r2, r3, #22
 8004c06:	d402      	bmi.n	8004c0e <_vfiprintf_r+0x32>
 8004c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c0a:	f000 fd63 	bl	80056d4 <__retarget_lock_acquire_recursive>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	071b      	lsls	r3, r3, #28
 8004c12:	d501      	bpl.n	8004c18 <_vfiprintf_r+0x3c>
 8004c14:	692b      	ldr	r3, [r5, #16]
 8004c16:	b9eb      	cbnz	r3, 8004c54 <_vfiprintf_r+0x78>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4630      	mov	r0, r6
 8004c1c:	f000 fb2c 	bl	8005278 <__swsetup_r>
 8004c20:	b1c0      	cbz	r0, 8004c54 <_vfiprintf_r+0x78>
 8004c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c24:	07dc      	lsls	r4, r3, #31
 8004c26:	d50e      	bpl.n	8004c46 <_vfiprintf_r+0x6a>
 8004c28:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2c:	b01d      	add	sp, #116	; 0x74
 8004c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c32:	4b7b      	ldr	r3, [pc, #492]	; (8004e20 <_vfiprintf_r+0x244>)
 8004c34:	429d      	cmp	r5, r3
 8004c36:	d101      	bne.n	8004c3c <_vfiprintf_r+0x60>
 8004c38:	68b5      	ldr	r5, [r6, #8]
 8004c3a:	e7df      	b.n	8004bfc <_vfiprintf_r+0x20>
 8004c3c:	4b79      	ldr	r3, [pc, #484]	; (8004e24 <_vfiprintf_r+0x248>)
 8004c3e:	429d      	cmp	r5, r3
 8004c40:	bf08      	it	eq
 8004c42:	68f5      	ldreq	r5, [r6, #12]
 8004c44:	e7da      	b.n	8004bfc <_vfiprintf_r+0x20>
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	0598      	lsls	r0, r3, #22
 8004c4a:	d4ed      	bmi.n	8004c28 <_vfiprintf_r+0x4c>
 8004c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c4e:	f000 fd42 	bl	80056d6 <__retarget_lock_release_recursive>
 8004c52:	e7e9      	b.n	8004c28 <_vfiprintf_r+0x4c>
 8004c54:	2300      	movs	r3, #0
 8004c56:	9309      	str	r3, [sp, #36]	; 0x24
 8004c58:	2320      	movs	r3, #32
 8004c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c5e:	2330      	movs	r3, #48	; 0x30
 8004c60:	f04f 0901 	mov.w	r9, #1
 8004c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c68:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e28 <_vfiprintf_r+0x24c>
 8004c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c70:	4623      	mov	r3, r4
 8004c72:	469a      	mov	sl, r3
 8004c74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c78:	b10a      	cbz	r2, 8004c7e <_vfiprintf_r+0xa2>
 8004c7a:	2a25      	cmp	r2, #37	; 0x25
 8004c7c:	d1f9      	bne.n	8004c72 <_vfiprintf_r+0x96>
 8004c7e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c82:	d00b      	beq.n	8004c9c <_vfiprintf_r+0xc0>
 8004c84:	465b      	mov	r3, fp
 8004c86:	4622      	mov	r2, r4
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f7ff ff93 	bl	8004bb6 <__sfputs_r>
 8004c90:	3001      	adds	r0, #1
 8004c92:	f000 80aa 	beq.w	8004dea <_vfiprintf_r+0x20e>
 8004c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c98:	445a      	add	r2, fp
 8004c9a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c9c:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a2 	beq.w	8004dea <_vfiprintf_r+0x20e>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cb0:	f10a 0a01 	add.w	sl, sl, #1
 8004cb4:	9304      	str	r3, [sp, #16]
 8004cb6:	9307      	str	r3, [sp, #28]
 8004cb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cbc:	931a      	str	r3, [sp, #104]	; 0x68
 8004cbe:	4654      	mov	r4, sl
 8004cc0:	2205      	movs	r2, #5
 8004cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc6:	4858      	ldr	r0, [pc, #352]	; (8004e28 <_vfiprintf_r+0x24c>)
 8004cc8:	f000 fd6a 	bl	80057a0 <memchr>
 8004ccc:	9a04      	ldr	r2, [sp, #16]
 8004cce:	b9d8      	cbnz	r0, 8004d08 <_vfiprintf_r+0x12c>
 8004cd0:	06d1      	lsls	r1, r2, #27
 8004cd2:	bf44      	itt	mi
 8004cd4:	2320      	movmi	r3, #32
 8004cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cda:	0713      	lsls	r3, r2, #28
 8004cdc:	bf44      	itt	mi
 8004cde:	232b      	movmi	r3, #43	; 0x2b
 8004ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cea:	d015      	beq.n	8004d18 <_vfiprintf_r+0x13c>
 8004cec:	4654      	mov	r4, sl
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f04f 0c0a 	mov.w	ip, #10
 8004cf4:	9a07      	ldr	r2, [sp, #28]
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cfc:	3b30      	subs	r3, #48	; 0x30
 8004cfe:	2b09      	cmp	r3, #9
 8004d00:	d94e      	bls.n	8004da0 <_vfiprintf_r+0x1c4>
 8004d02:	b1b0      	cbz	r0, 8004d32 <_vfiprintf_r+0x156>
 8004d04:	9207      	str	r2, [sp, #28]
 8004d06:	e014      	b.n	8004d32 <_vfiprintf_r+0x156>
 8004d08:	eba0 0308 	sub.w	r3, r0, r8
 8004d0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	46a2      	mov	sl, r4
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	e7d2      	b.n	8004cbe <_vfiprintf_r+0xe2>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	1d19      	adds	r1, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	9103      	str	r1, [sp, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bfbb      	ittet	lt
 8004d24:	425b      	neglt	r3, r3
 8004d26:	f042 0202 	orrlt.w	r2, r2, #2
 8004d2a:	9307      	strge	r3, [sp, #28]
 8004d2c:	9307      	strlt	r3, [sp, #28]
 8004d2e:	bfb8      	it	lt
 8004d30:	9204      	strlt	r2, [sp, #16]
 8004d32:	7823      	ldrb	r3, [r4, #0]
 8004d34:	2b2e      	cmp	r3, #46	; 0x2e
 8004d36:	d10c      	bne.n	8004d52 <_vfiprintf_r+0x176>
 8004d38:	7863      	ldrb	r3, [r4, #1]
 8004d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3c:	d135      	bne.n	8004daa <_vfiprintf_r+0x1ce>
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	3402      	adds	r4, #2
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	9203      	str	r2, [sp, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bfb8      	it	lt
 8004d4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d50:	9305      	str	r3, [sp, #20]
 8004d52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e38 <_vfiprintf_r+0x25c>
 8004d56:	2203      	movs	r2, #3
 8004d58:	4650      	mov	r0, sl
 8004d5a:	7821      	ldrb	r1, [r4, #0]
 8004d5c:	f000 fd20 	bl	80057a0 <memchr>
 8004d60:	b140      	cbz	r0, 8004d74 <_vfiprintf_r+0x198>
 8004d62:	2340      	movs	r3, #64	; 0x40
 8004d64:	eba0 000a 	sub.w	r0, r0, sl
 8004d68:	fa03 f000 	lsl.w	r0, r3, r0
 8004d6c:	9b04      	ldr	r3, [sp, #16]
 8004d6e:	3401      	adds	r4, #1
 8004d70:	4303      	orrs	r3, r0
 8004d72:	9304      	str	r3, [sp, #16]
 8004d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d78:	2206      	movs	r2, #6
 8004d7a:	482c      	ldr	r0, [pc, #176]	; (8004e2c <_vfiprintf_r+0x250>)
 8004d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d80:	f000 fd0e 	bl	80057a0 <memchr>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d03f      	beq.n	8004e08 <_vfiprintf_r+0x22c>
 8004d88:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <_vfiprintf_r+0x254>)
 8004d8a:	bb1b      	cbnz	r3, 8004dd4 <_vfiprintf_r+0x1f8>
 8004d8c:	9b03      	ldr	r3, [sp, #12]
 8004d8e:	3307      	adds	r3, #7
 8004d90:	f023 0307 	bic.w	r3, r3, #7
 8004d94:	3308      	adds	r3, #8
 8004d96:	9303      	str	r3, [sp, #12]
 8004d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d9a:	443b      	add	r3, r7
 8004d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d9e:	e767      	b.n	8004c70 <_vfiprintf_r+0x94>
 8004da0:	460c      	mov	r4, r1
 8004da2:	2001      	movs	r0, #1
 8004da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004da8:	e7a5      	b.n	8004cf6 <_vfiprintf_r+0x11a>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f04f 0c0a 	mov.w	ip, #10
 8004db0:	4619      	mov	r1, r3
 8004db2:	3401      	adds	r4, #1
 8004db4:	9305      	str	r3, [sp, #20]
 8004db6:	4620      	mov	r0, r4
 8004db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dbc:	3a30      	subs	r2, #48	; 0x30
 8004dbe:	2a09      	cmp	r2, #9
 8004dc0:	d903      	bls.n	8004dca <_vfiprintf_r+0x1ee>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0c5      	beq.n	8004d52 <_vfiprintf_r+0x176>
 8004dc6:	9105      	str	r1, [sp, #20]
 8004dc8:	e7c3      	b.n	8004d52 <_vfiprintf_r+0x176>
 8004dca:	4604      	mov	r4, r0
 8004dcc:	2301      	movs	r3, #1
 8004dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dd2:	e7f0      	b.n	8004db6 <_vfiprintf_r+0x1da>
 8004dd4:	ab03      	add	r3, sp, #12
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	462a      	mov	r2, r5
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <_vfiprintf_r+0x258>)
 8004dde:	a904      	add	r1, sp, #16
 8004de0:	f3af 8000 	nop.w
 8004de4:	4607      	mov	r7, r0
 8004de6:	1c78      	adds	r0, r7, #1
 8004de8:	d1d6      	bne.n	8004d98 <_vfiprintf_r+0x1bc>
 8004dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dec:	07d9      	lsls	r1, r3, #31
 8004dee:	d405      	bmi.n	8004dfc <_vfiprintf_r+0x220>
 8004df0:	89ab      	ldrh	r3, [r5, #12]
 8004df2:	059a      	lsls	r2, r3, #22
 8004df4:	d402      	bmi.n	8004dfc <_vfiprintf_r+0x220>
 8004df6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004df8:	f000 fc6d 	bl	80056d6 <__retarget_lock_release_recursive>
 8004dfc:	89ab      	ldrh	r3, [r5, #12]
 8004dfe:	065b      	lsls	r3, r3, #25
 8004e00:	f53f af12 	bmi.w	8004c28 <_vfiprintf_r+0x4c>
 8004e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e06:	e711      	b.n	8004c2c <_vfiprintf_r+0x50>
 8004e08:	ab03      	add	r3, sp, #12
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	462a      	mov	r2, r5
 8004e0e:	4630      	mov	r0, r6
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <_vfiprintf_r+0x258>)
 8004e12:	a904      	add	r1, sp, #16
 8004e14:	f000 f882 	bl	8004f1c <_printf_i>
 8004e18:	e7e4      	b.n	8004de4 <_vfiprintf_r+0x208>
 8004e1a:	bf00      	nop
 8004e1c:	08005e60 	.word	0x08005e60
 8004e20:	08005e80 	.word	0x08005e80
 8004e24:	08005e40 	.word	0x08005e40
 8004e28:	08005d0c 	.word	0x08005d0c
 8004e2c:	08005d16 	.word	0x08005d16
 8004e30:	00000000 	.word	0x00000000
 8004e34:	08004bb7 	.word	0x08004bb7
 8004e38:	08005d12 	.word	0x08005d12

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4699      	mov	r9, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	4607      	mov	r7, r0
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	bfb8      	it	lt
 8004e4e:	4613      	movlt	r3, r2
 8004e50:	6033      	str	r3, [r6, #0]
 8004e52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e56:	460c      	mov	r4, r1
 8004e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc28      	bgt.n	8004ed6 <_printf_common+0x9a>
 8004e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e88:	1e13      	subs	r3, r2, #0
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d42d      	bmi.n	8004ef0 <_printf_common+0xb4>
 8004e94:	4649      	mov	r1, r9
 8004e96:	4638      	mov	r0, r7
 8004e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e9c:	47c0      	blx	r8
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d020      	beq.n	8004ee4 <_printf_common+0xa8>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	68e5      	ldr	r5, [r4, #12]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf18      	it	ne
 8004eae:	2500      	movne	r5, #0
 8004eb0:	6832      	ldr	r2, [r6, #0]
 8004eb2:	f04f 0600 	mov.w	r6, #0
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	bf08      	it	eq
 8004eba:	1aad      	subeq	r5, r5, r2
 8004ebc:	6922      	ldr	r2, [r4, #16]
 8004ebe:	bf08      	it	eq
 8004ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfc4      	itt	gt
 8004ec8:	1a9b      	subgt	r3, r3, r2
 8004eca:	18ed      	addgt	r5, r5, r3
 8004ecc:	341a      	adds	r4, #26
 8004ece:	42b5      	cmp	r5, r6
 8004ed0:	d11a      	bne.n	8004f08 <_printf_common+0xcc>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e008      	b.n	8004ee8 <_printf_common+0xac>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4652      	mov	r2, sl
 8004eda:	4649      	mov	r1, r9
 8004edc:	4638      	mov	r0, r7
 8004ede:	47c0      	blx	r8
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d103      	bne.n	8004eec <_printf_common+0xb0>
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eec:	3501      	adds	r5, #1
 8004eee:	e7c4      	b.n	8004e7a <_printf_common+0x3e>
 8004ef0:	2030      	movs	r0, #48	; 0x30
 8004ef2:	18e1      	adds	r1, r4, r3
 8004ef4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004efe:	4422      	add	r2, r4
 8004f00:	3302      	adds	r3, #2
 8004f02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f06:	e7c5      	b.n	8004e94 <_printf_common+0x58>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	4622      	mov	r2, r4
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	3001      	adds	r0, #1
 8004f14:	d0e6      	beq.n	8004ee4 <_printf_common+0xa8>
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7d9      	b.n	8004ece <_printf_common+0x92>
	...

08004f1c <_printf_i>:
 8004f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f20:	460c      	mov	r4, r1
 8004f22:	7e27      	ldrb	r7, [r4, #24]
 8004f24:	4691      	mov	r9, r2
 8004f26:	2f78      	cmp	r7, #120	; 0x78
 8004f28:	4680      	mov	r8, r0
 8004f2a:	469a      	mov	sl, r3
 8004f2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f32:	d807      	bhi.n	8004f44 <_printf_i+0x28>
 8004f34:	2f62      	cmp	r7, #98	; 0x62
 8004f36:	d80a      	bhi.n	8004f4e <_printf_i+0x32>
 8004f38:	2f00      	cmp	r7, #0
 8004f3a:	f000 80d9 	beq.w	80050f0 <_printf_i+0x1d4>
 8004f3e:	2f58      	cmp	r7, #88	; 0x58
 8004f40:	f000 80a4 	beq.w	800508c <_printf_i+0x170>
 8004f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f4c:	e03a      	b.n	8004fc4 <_printf_i+0xa8>
 8004f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f52:	2b15      	cmp	r3, #21
 8004f54:	d8f6      	bhi.n	8004f44 <_printf_i+0x28>
 8004f56:	a001      	add	r0, pc, #4	; (adr r0, 8004f5c <_printf_i+0x40>)
 8004f58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f5c:	08004fb5 	.word	0x08004fb5
 8004f60:	08004fc9 	.word	0x08004fc9
 8004f64:	08004f45 	.word	0x08004f45
 8004f68:	08004f45 	.word	0x08004f45
 8004f6c:	08004f45 	.word	0x08004f45
 8004f70:	08004f45 	.word	0x08004f45
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004f45 	.word	0x08004f45
 8004f7c:	08004f45 	.word	0x08004f45
 8004f80:	08004f45 	.word	0x08004f45
 8004f84:	08004f45 	.word	0x08004f45
 8004f88:	080050d7 	.word	0x080050d7
 8004f8c:	08004ff9 	.word	0x08004ff9
 8004f90:	080050b9 	.word	0x080050b9
 8004f94:	08004f45 	.word	0x08004f45
 8004f98:	08004f45 	.word	0x08004f45
 8004f9c:	080050f9 	.word	0x080050f9
 8004fa0:	08004f45 	.word	0x08004f45
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004f45 	.word	0x08004f45
 8004fac:	08004f45 	.word	0x08004f45
 8004fb0:	080050c1 	.word	0x080050c1
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fba:	1d1a      	adds	r2, r3, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	600a      	str	r2, [r1, #0]
 8004fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0a4      	b.n	8005112 <_printf_i+0x1f6>
 8004fc8:	6825      	ldr	r5, [r4, #0]
 8004fca:	6808      	ldr	r0, [r1, #0]
 8004fcc:	062e      	lsls	r6, r5, #24
 8004fce:	f100 0304 	add.w	r3, r0, #4
 8004fd2:	d50a      	bpl.n	8004fea <_printf_i+0xce>
 8004fd4:	6805      	ldr	r5, [r0, #0]
 8004fd6:	600b      	str	r3, [r1, #0]
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	da03      	bge.n	8004fe4 <_printf_i+0xc8>
 8004fdc:	232d      	movs	r3, #45	; 0x2d
 8004fde:	426d      	negs	r5, r5
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	230a      	movs	r3, #10
 8004fe6:	485e      	ldr	r0, [pc, #376]	; (8005160 <_printf_i+0x244>)
 8004fe8:	e019      	b.n	800501e <_printf_i+0x102>
 8004fea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fee:	6805      	ldr	r5, [r0, #0]
 8004ff0:	600b      	str	r3, [r1, #0]
 8004ff2:	bf18      	it	ne
 8004ff4:	b22d      	sxthne	r5, r5
 8004ff6:	e7ef      	b.n	8004fd8 <_printf_i+0xbc>
 8004ff8:	680b      	ldr	r3, [r1, #0]
 8004ffa:	6825      	ldr	r5, [r4, #0]
 8004ffc:	1d18      	adds	r0, r3, #4
 8004ffe:	6008      	str	r0, [r1, #0]
 8005000:	0628      	lsls	r0, r5, #24
 8005002:	d501      	bpl.n	8005008 <_printf_i+0xec>
 8005004:	681d      	ldr	r5, [r3, #0]
 8005006:	e002      	b.n	800500e <_printf_i+0xf2>
 8005008:	0669      	lsls	r1, r5, #25
 800500a:	d5fb      	bpl.n	8005004 <_printf_i+0xe8>
 800500c:	881d      	ldrh	r5, [r3, #0]
 800500e:	2f6f      	cmp	r7, #111	; 0x6f
 8005010:	bf0c      	ite	eq
 8005012:	2308      	moveq	r3, #8
 8005014:	230a      	movne	r3, #10
 8005016:	4852      	ldr	r0, [pc, #328]	; (8005160 <_printf_i+0x244>)
 8005018:	2100      	movs	r1, #0
 800501a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800501e:	6866      	ldr	r6, [r4, #4]
 8005020:	2e00      	cmp	r6, #0
 8005022:	bfa8      	it	ge
 8005024:	6821      	ldrge	r1, [r4, #0]
 8005026:	60a6      	str	r6, [r4, #8]
 8005028:	bfa4      	itt	ge
 800502a:	f021 0104 	bicge.w	r1, r1, #4
 800502e:	6021      	strge	r1, [r4, #0]
 8005030:	b90d      	cbnz	r5, 8005036 <_printf_i+0x11a>
 8005032:	2e00      	cmp	r6, #0
 8005034:	d04d      	beq.n	80050d2 <_printf_i+0x1b6>
 8005036:	4616      	mov	r6, r2
 8005038:	fbb5 f1f3 	udiv	r1, r5, r3
 800503c:	fb03 5711 	mls	r7, r3, r1, r5
 8005040:	5dc7      	ldrb	r7, [r0, r7]
 8005042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005046:	462f      	mov	r7, r5
 8005048:	42bb      	cmp	r3, r7
 800504a:	460d      	mov	r5, r1
 800504c:	d9f4      	bls.n	8005038 <_printf_i+0x11c>
 800504e:	2b08      	cmp	r3, #8
 8005050:	d10b      	bne.n	800506a <_printf_i+0x14e>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	07df      	lsls	r7, r3, #31
 8005056:	d508      	bpl.n	800506a <_printf_i+0x14e>
 8005058:	6923      	ldr	r3, [r4, #16]
 800505a:	6861      	ldr	r1, [r4, #4]
 800505c:	4299      	cmp	r1, r3
 800505e:	bfde      	ittt	le
 8005060:	2330      	movle	r3, #48	; 0x30
 8005062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800506a:	1b92      	subs	r2, r2, r6
 800506c:	6122      	str	r2, [r4, #16]
 800506e:	464b      	mov	r3, r9
 8005070:	4621      	mov	r1, r4
 8005072:	4640      	mov	r0, r8
 8005074:	f8cd a000 	str.w	sl, [sp]
 8005078:	aa03      	add	r2, sp, #12
 800507a:	f7ff fedf 	bl	8004e3c <_printf_common>
 800507e:	3001      	adds	r0, #1
 8005080:	d14c      	bne.n	800511c <_printf_i+0x200>
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	b004      	add	sp, #16
 8005088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800508c:	4834      	ldr	r0, [pc, #208]	; (8005160 <_printf_i+0x244>)
 800508e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005092:	680e      	ldr	r6, [r1, #0]
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	f856 5b04 	ldr.w	r5, [r6], #4
 800509a:	061f      	lsls	r7, r3, #24
 800509c:	600e      	str	r6, [r1, #0]
 800509e:	d514      	bpl.n	80050ca <_printf_i+0x1ae>
 80050a0:	07d9      	lsls	r1, r3, #31
 80050a2:	bf44      	itt	mi
 80050a4:	f043 0320 	orrmi.w	r3, r3, #32
 80050a8:	6023      	strmi	r3, [r4, #0]
 80050aa:	b91d      	cbnz	r5, 80050b4 <_printf_i+0x198>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	f023 0320 	bic.w	r3, r3, #32
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	2310      	movs	r3, #16
 80050b6:	e7af      	b.n	8005018 <_printf_i+0xfc>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	f043 0320 	orr.w	r3, r3, #32
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	2378      	movs	r3, #120	; 0x78
 80050c2:	4828      	ldr	r0, [pc, #160]	; (8005164 <_printf_i+0x248>)
 80050c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050c8:	e7e3      	b.n	8005092 <_printf_i+0x176>
 80050ca:	065e      	lsls	r6, r3, #25
 80050cc:	bf48      	it	mi
 80050ce:	b2ad      	uxthmi	r5, r5
 80050d0:	e7e6      	b.n	80050a0 <_printf_i+0x184>
 80050d2:	4616      	mov	r6, r2
 80050d4:	e7bb      	b.n	800504e <_printf_i+0x132>
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	6826      	ldr	r6, [r4, #0]
 80050da:	1d1d      	adds	r5, r3, #4
 80050dc:	6960      	ldr	r0, [r4, #20]
 80050de:	600d      	str	r5, [r1, #0]
 80050e0:	0635      	lsls	r5, r6, #24
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	d501      	bpl.n	80050ea <_printf_i+0x1ce>
 80050e6:	6018      	str	r0, [r3, #0]
 80050e8:	e002      	b.n	80050f0 <_printf_i+0x1d4>
 80050ea:	0671      	lsls	r1, r6, #25
 80050ec:	d5fb      	bpl.n	80050e6 <_printf_i+0x1ca>
 80050ee:	8018      	strh	r0, [r3, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	4616      	mov	r6, r2
 80050f4:	6123      	str	r3, [r4, #16]
 80050f6:	e7ba      	b.n	800506e <_printf_i+0x152>
 80050f8:	680b      	ldr	r3, [r1, #0]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	600a      	str	r2, [r1, #0]
 80050fe:	681e      	ldr	r6, [r3, #0]
 8005100:	2100      	movs	r1, #0
 8005102:	4630      	mov	r0, r6
 8005104:	6862      	ldr	r2, [r4, #4]
 8005106:	f000 fb4b 	bl	80057a0 <memchr>
 800510a:	b108      	cbz	r0, 8005110 <_printf_i+0x1f4>
 800510c:	1b80      	subs	r0, r0, r6
 800510e:	6060      	str	r0, [r4, #4]
 8005110:	6863      	ldr	r3, [r4, #4]
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	2300      	movs	r3, #0
 8005116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800511a:	e7a8      	b.n	800506e <_printf_i+0x152>
 800511c:	4632      	mov	r2, r6
 800511e:	4649      	mov	r1, r9
 8005120:	4640      	mov	r0, r8
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	47d0      	blx	sl
 8005126:	3001      	adds	r0, #1
 8005128:	d0ab      	beq.n	8005082 <_printf_i+0x166>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	079b      	lsls	r3, r3, #30
 800512e:	d413      	bmi.n	8005158 <_printf_i+0x23c>
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	4298      	cmp	r0, r3
 8005136:	bfb8      	it	lt
 8005138:	4618      	movlt	r0, r3
 800513a:	e7a4      	b.n	8005086 <_printf_i+0x16a>
 800513c:	2301      	movs	r3, #1
 800513e:	4632      	mov	r2, r6
 8005140:	4649      	mov	r1, r9
 8005142:	4640      	mov	r0, r8
 8005144:	47d0      	blx	sl
 8005146:	3001      	adds	r0, #1
 8005148:	d09b      	beq.n	8005082 <_printf_i+0x166>
 800514a:	3501      	adds	r5, #1
 800514c:	68e3      	ldr	r3, [r4, #12]
 800514e:	9903      	ldr	r1, [sp, #12]
 8005150:	1a5b      	subs	r3, r3, r1
 8005152:	42ab      	cmp	r3, r5
 8005154:	dcf2      	bgt.n	800513c <_printf_i+0x220>
 8005156:	e7eb      	b.n	8005130 <_printf_i+0x214>
 8005158:	2500      	movs	r5, #0
 800515a:	f104 0619 	add.w	r6, r4, #25
 800515e:	e7f5      	b.n	800514c <_printf_i+0x230>
 8005160:	08005d1d 	.word	0x08005d1d
 8005164:	08005d2e 	.word	0x08005d2e

08005168 <nan>:
 8005168:	2000      	movs	r0, #0
 800516a:	4901      	ldr	r1, [pc, #4]	; (8005170 <nan+0x8>)
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	7ff80000 	.word	0x7ff80000

08005174 <_sbrk_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	2300      	movs	r3, #0
 8005178:	4d05      	ldr	r5, [pc, #20]	; (8005190 <_sbrk_r+0x1c>)
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fc f8d4 	bl	800132c <_sbrk>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_sbrk_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_sbrk_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	200002ec 	.word	0x200002ec

08005194 <strncmp>:
 8005194:	b510      	push	{r4, lr}
 8005196:	b16a      	cbz	r2, 80051b4 <strncmp+0x20>
 8005198:	3901      	subs	r1, #1
 800519a:	1884      	adds	r4, r0, r2
 800519c:	f810 3b01 	ldrb.w	r3, [r0], #1
 80051a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d103      	bne.n	80051b0 <strncmp+0x1c>
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d001      	beq.n	80051b0 <strncmp+0x1c>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f5      	bne.n	800519c <strncmp+0x8>
 80051b0:	1a98      	subs	r0, r3, r2
 80051b2:	bd10      	pop	{r4, pc}
 80051b4:	4610      	mov	r0, r2
 80051b6:	e7fc      	b.n	80051b2 <strncmp+0x1e>

080051b8 <__swbuf_r>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	460e      	mov	r6, r1
 80051bc:	4614      	mov	r4, r2
 80051be:	4605      	mov	r5, r0
 80051c0:	b118      	cbz	r0, 80051ca <__swbuf_r+0x12>
 80051c2:	6983      	ldr	r3, [r0, #24]
 80051c4:	b90b      	cbnz	r3, 80051ca <__swbuf_r+0x12>
 80051c6:	f000 f9e7 	bl	8005598 <__sinit>
 80051ca:	4b21      	ldr	r3, [pc, #132]	; (8005250 <__swbuf_r+0x98>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d12b      	bne.n	8005228 <__swbuf_r+0x70>
 80051d0:	686c      	ldr	r4, [r5, #4]
 80051d2:	69a3      	ldr	r3, [r4, #24]
 80051d4:	60a3      	str	r3, [r4, #8]
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	071a      	lsls	r2, r3, #28
 80051da:	d52f      	bpl.n	800523c <__swbuf_r+0x84>
 80051dc:	6923      	ldr	r3, [r4, #16]
 80051de:	b36b      	cbz	r3, 800523c <__swbuf_r+0x84>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	6820      	ldr	r0, [r4, #0]
 80051e4:	b2f6      	uxtb	r6, r6
 80051e6:	1ac0      	subs	r0, r0, r3
 80051e8:	6963      	ldr	r3, [r4, #20]
 80051ea:	4637      	mov	r7, r6
 80051ec:	4283      	cmp	r3, r0
 80051ee:	dc04      	bgt.n	80051fa <__swbuf_r+0x42>
 80051f0:	4621      	mov	r1, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f93c 	bl	8005470 <_fflush_r>
 80051f8:	bb30      	cbnz	r0, 8005248 <__swbuf_r+0x90>
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	3001      	adds	r0, #1
 80051fe:	3b01      	subs	r3, #1
 8005200:	60a3      	str	r3, [r4, #8]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	701e      	strb	r6, [r3, #0]
 800520a:	6963      	ldr	r3, [r4, #20]
 800520c:	4283      	cmp	r3, r0
 800520e:	d004      	beq.n	800521a <__swbuf_r+0x62>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	07db      	lsls	r3, r3, #31
 8005214:	d506      	bpl.n	8005224 <__swbuf_r+0x6c>
 8005216:	2e0a      	cmp	r6, #10
 8005218:	d104      	bne.n	8005224 <__swbuf_r+0x6c>
 800521a:	4621      	mov	r1, r4
 800521c:	4628      	mov	r0, r5
 800521e:	f000 f927 	bl	8005470 <_fflush_r>
 8005222:	b988      	cbnz	r0, 8005248 <__swbuf_r+0x90>
 8005224:	4638      	mov	r0, r7
 8005226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <__swbuf_r+0x9c>)
 800522a:	429c      	cmp	r4, r3
 800522c:	d101      	bne.n	8005232 <__swbuf_r+0x7a>
 800522e:	68ac      	ldr	r4, [r5, #8]
 8005230:	e7cf      	b.n	80051d2 <__swbuf_r+0x1a>
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <__swbuf_r+0xa0>)
 8005234:	429c      	cmp	r4, r3
 8005236:	bf08      	it	eq
 8005238:	68ec      	ldreq	r4, [r5, #12]
 800523a:	e7ca      	b.n	80051d2 <__swbuf_r+0x1a>
 800523c:	4621      	mov	r1, r4
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f81a 	bl	8005278 <__swsetup_r>
 8005244:	2800      	cmp	r0, #0
 8005246:	d0cb      	beq.n	80051e0 <__swbuf_r+0x28>
 8005248:	f04f 37ff 	mov.w	r7, #4294967295
 800524c:	e7ea      	b.n	8005224 <__swbuf_r+0x6c>
 800524e:	bf00      	nop
 8005250:	08005e60 	.word	0x08005e60
 8005254:	08005e80 	.word	0x08005e80
 8005258:	08005e40 	.word	0x08005e40

0800525c <__ascii_wctomb>:
 800525c:	4603      	mov	r3, r0
 800525e:	4608      	mov	r0, r1
 8005260:	b141      	cbz	r1, 8005274 <__ascii_wctomb+0x18>
 8005262:	2aff      	cmp	r2, #255	; 0xff
 8005264:	d904      	bls.n	8005270 <__ascii_wctomb+0x14>
 8005266:	228a      	movs	r2, #138	; 0x8a
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	4770      	bx	lr
 8005270:	2001      	movs	r0, #1
 8005272:	700a      	strb	r2, [r1, #0]
 8005274:	4770      	bx	lr
	...

08005278 <__swsetup_r>:
 8005278:	4b32      	ldr	r3, [pc, #200]	; (8005344 <__swsetup_r+0xcc>)
 800527a:	b570      	push	{r4, r5, r6, lr}
 800527c:	681d      	ldr	r5, [r3, #0]
 800527e:	4606      	mov	r6, r0
 8005280:	460c      	mov	r4, r1
 8005282:	b125      	cbz	r5, 800528e <__swsetup_r+0x16>
 8005284:	69ab      	ldr	r3, [r5, #24]
 8005286:	b913      	cbnz	r3, 800528e <__swsetup_r+0x16>
 8005288:	4628      	mov	r0, r5
 800528a:	f000 f985 	bl	8005598 <__sinit>
 800528e:	4b2e      	ldr	r3, [pc, #184]	; (8005348 <__swsetup_r+0xd0>)
 8005290:	429c      	cmp	r4, r3
 8005292:	d10f      	bne.n	80052b4 <__swsetup_r+0x3c>
 8005294:	686c      	ldr	r4, [r5, #4]
 8005296:	89a3      	ldrh	r3, [r4, #12]
 8005298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800529c:	0719      	lsls	r1, r3, #28
 800529e:	d42c      	bmi.n	80052fa <__swsetup_r+0x82>
 80052a0:	06dd      	lsls	r5, r3, #27
 80052a2:	d411      	bmi.n	80052c8 <__swsetup_r+0x50>
 80052a4:	2309      	movs	r3, #9
 80052a6:	6033      	str	r3, [r6, #0]
 80052a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	e03e      	b.n	8005332 <__swsetup_r+0xba>
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <__swsetup_r+0xd4>)
 80052b6:	429c      	cmp	r4, r3
 80052b8:	d101      	bne.n	80052be <__swsetup_r+0x46>
 80052ba:	68ac      	ldr	r4, [r5, #8]
 80052bc:	e7eb      	b.n	8005296 <__swsetup_r+0x1e>
 80052be:	4b24      	ldr	r3, [pc, #144]	; (8005350 <__swsetup_r+0xd8>)
 80052c0:	429c      	cmp	r4, r3
 80052c2:	bf08      	it	eq
 80052c4:	68ec      	ldreq	r4, [r5, #12]
 80052c6:	e7e6      	b.n	8005296 <__swsetup_r+0x1e>
 80052c8:	0758      	lsls	r0, r3, #29
 80052ca:	d512      	bpl.n	80052f2 <__swsetup_r+0x7a>
 80052cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052ce:	b141      	cbz	r1, 80052e2 <__swsetup_r+0x6a>
 80052d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052d4:	4299      	cmp	r1, r3
 80052d6:	d002      	beq.n	80052de <__swsetup_r+0x66>
 80052d8:	4630      	mov	r0, r6
 80052da:	f7ff fbb1 	bl	8004a40 <_free_r>
 80052de:	2300      	movs	r3, #0
 80052e0:	6363      	str	r3, [r4, #52]	; 0x34
 80052e2:	89a3      	ldrh	r3, [r4, #12]
 80052e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052e8:	81a3      	strh	r3, [r4, #12]
 80052ea:	2300      	movs	r3, #0
 80052ec:	6063      	str	r3, [r4, #4]
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	89a3      	ldrh	r3, [r4, #12]
 80052f4:	f043 0308 	orr.w	r3, r3, #8
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	b94b      	cbnz	r3, 8005312 <__swsetup_r+0x9a>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005308:	d003      	beq.n	8005312 <__swsetup_r+0x9a>
 800530a:	4621      	mov	r1, r4
 800530c:	4630      	mov	r0, r6
 800530e:	f000 fa07 	bl	8005720 <__smakebuf_r>
 8005312:	89a0      	ldrh	r0, [r4, #12]
 8005314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005318:	f010 0301 	ands.w	r3, r0, #1
 800531c:	d00a      	beq.n	8005334 <__swsetup_r+0xbc>
 800531e:	2300      	movs	r3, #0
 8005320:	60a3      	str	r3, [r4, #8]
 8005322:	6963      	ldr	r3, [r4, #20]
 8005324:	425b      	negs	r3, r3
 8005326:	61a3      	str	r3, [r4, #24]
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	b943      	cbnz	r3, 800533e <__swsetup_r+0xc6>
 800532c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005330:	d1ba      	bne.n	80052a8 <__swsetup_r+0x30>
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	0781      	lsls	r1, r0, #30
 8005336:	bf58      	it	pl
 8005338:	6963      	ldrpl	r3, [r4, #20]
 800533a:	60a3      	str	r3, [r4, #8]
 800533c:	e7f4      	b.n	8005328 <__swsetup_r+0xb0>
 800533e:	2000      	movs	r0, #0
 8005340:	e7f7      	b.n	8005332 <__swsetup_r+0xba>
 8005342:	bf00      	nop
 8005344:	2000000c 	.word	0x2000000c
 8005348:	08005e60 	.word	0x08005e60
 800534c:	08005e80 	.word	0x08005e80
 8005350:	08005e40 	.word	0x08005e40

08005354 <abort>:
 8005354:	2006      	movs	r0, #6
 8005356:	b508      	push	{r3, lr}
 8005358:	f000 fa64 	bl	8005824 <raise>
 800535c:	2001      	movs	r0, #1
 800535e:	f7fb ff72 	bl	8001246 <_exit>
	...

08005364 <__sflush_r>:
 8005364:	898a      	ldrh	r2, [r1, #12]
 8005366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	4605      	mov	r5, r0
 800536c:	0710      	lsls	r0, r2, #28
 800536e:	460c      	mov	r4, r1
 8005370:	d458      	bmi.n	8005424 <__sflush_r+0xc0>
 8005372:	684b      	ldr	r3, [r1, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dc05      	bgt.n	8005384 <__sflush_r+0x20>
 8005378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	dc02      	bgt.n	8005384 <__sflush_r+0x20>
 800537e:	2000      	movs	r0, #0
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005386:	2e00      	cmp	r6, #0
 8005388:	d0f9      	beq.n	800537e <__sflush_r+0x1a>
 800538a:	2300      	movs	r3, #0
 800538c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005390:	682f      	ldr	r7, [r5, #0]
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	d032      	beq.n	80053fc <__sflush_r+0x98>
 8005396:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005398:	89a3      	ldrh	r3, [r4, #12]
 800539a:	075a      	lsls	r2, r3, #29
 800539c:	d505      	bpl.n	80053aa <__sflush_r+0x46>
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	1ac0      	subs	r0, r0, r3
 80053a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053a4:	b10b      	cbz	r3, 80053aa <__sflush_r+0x46>
 80053a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a8:	1ac0      	subs	r0, r0, r3
 80053aa:	2300      	movs	r3, #0
 80053ac:	4602      	mov	r2, r0
 80053ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053b0:	4628      	mov	r0, r5
 80053b2:	6a21      	ldr	r1, [r4, #32]
 80053b4:	47b0      	blx	r6
 80053b6:	1c43      	adds	r3, r0, #1
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	d106      	bne.n	80053ca <__sflush_r+0x66>
 80053bc:	6829      	ldr	r1, [r5, #0]
 80053be:	291d      	cmp	r1, #29
 80053c0:	d82c      	bhi.n	800541c <__sflush_r+0xb8>
 80053c2:	4a2a      	ldr	r2, [pc, #168]	; (800546c <__sflush_r+0x108>)
 80053c4:	40ca      	lsrs	r2, r1
 80053c6:	07d6      	lsls	r6, r2, #31
 80053c8:	d528      	bpl.n	800541c <__sflush_r+0xb8>
 80053ca:	2200      	movs	r2, #0
 80053cc:	6062      	str	r2, [r4, #4]
 80053ce:	6922      	ldr	r2, [r4, #16]
 80053d0:	04d9      	lsls	r1, r3, #19
 80053d2:	6022      	str	r2, [r4, #0]
 80053d4:	d504      	bpl.n	80053e0 <__sflush_r+0x7c>
 80053d6:	1c42      	adds	r2, r0, #1
 80053d8:	d101      	bne.n	80053de <__sflush_r+0x7a>
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	b903      	cbnz	r3, 80053e0 <__sflush_r+0x7c>
 80053de:	6560      	str	r0, [r4, #84]	; 0x54
 80053e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053e2:	602f      	str	r7, [r5, #0]
 80053e4:	2900      	cmp	r1, #0
 80053e6:	d0ca      	beq.n	800537e <__sflush_r+0x1a>
 80053e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053ec:	4299      	cmp	r1, r3
 80053ee:	d002      	beq.n	80053f6 <__sflush_r+0x92>
 80053f0:	4628      	mov	r0, r5
 80053f2:	f7ff fb25 	bl	8004a40 <_free_r>
 80053f6:	2000      	movs	r0, #0
 80053f8:	6360      	str	r0, [r4, #52]	; 0x34
 80053fa:	e7c1      	b.n	8005380 <__sflush_r+0x1c>
 80053fc:	6a21      	ldr	r1, [r4, #32]
 80053fe:	2301      	movs	r3, #1
 8005400:	4628      	mov	r0, r5
 8005402:	47b0      	blx	r6
 8005404:	1c41      	adds	r1, r0, #1
 8005406:	d1c7      	bne.n	8005398 <__sflush_r+0x34>
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0c4      	beq.n	8005398 <__sflush_r+0x34>
 800540e:	2b1d      	cmp	r3, #29
 8005410:	d001      	beq.n	8005416 <__sflush_r+0xb2>
 8005412:	2b16      	cmp	r3, #22
 8005414:	d101      	bne.n	800541a <__sflush_r+0xb6>
 8005416:	602f      	str	r7, [r5, #0]
 8005418:	e7b1      	b.n	800537e <__sflush_r+0x1a>
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e7ad      	b.n	8005380 <__sflush_r+0x1c>
 8005424:	690f      	ldr	r7, [r1, #16]
 8005426:	2f00      	cmp	r7, #0
 8005428:	d0a9      	beq.n	800537e <__sflush_r+0x1a>
 800542a:	0793      	lsls	r3, r2, #30
 800542c:	bf18      	it	ne
 800542e:	2300      	movne	r3, #0
 8005430:	680e      	ldr	r6, [r1, #0]
 8005432:	bf08      	it	eq
 8005434:	694b      	ldreq	r3, [r1, #20]
 8005436:	eba6 0807 	sub.w	r8, r6, r7
 800543a:	600f      	str	r7, [r1, #0]
 800543c:	608b      	str	r3, [r1, #8]
 800543e:	f1b8 0f00 	cmp.w	r8, #0
 8005442:	dd9c      	ble.n	800537e <__sflush_r+0x1a>
 8005444:	4643      	mov	r3, r8
 8005446:	463a      	mov	r2, r7
 8005448:	4628      	mov	r0, r5
 800544a:	6a21      	ldr	r1, [r4, #32]
 800544c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800544e:	47b0      	blx	r6
 8005450:	2800      	cmp	r0, #0
 8005452:	dc06      	bgt.n	8005462 <__sflush_r+0xfe>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
 800545a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	e78e      	b.n	8005380 <__sflush_r+0x1c>
 8005462:	4407      	add	r7, r0
 8005464:	eba8 0800 	sub.w	r8, r8, r0
 8005468:	e7e9      	b.n	800543e <__sflush_r+0xda>
 800546a:	bf00      	nop
 800546c:	20400001 	.word	0x20400001

08005470 <_fflush_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	690b      	ldr	r3, [r1, #16]
 8005474:	4605      	mov	r5, r0
 8005476:	460c      	mov	r4, r1
 8005478:	b913      	cbnz	r3, 8005480 <_fflush_r+0x10>
 800547a:	2500      	movs	r5, #0
 800547c:	4628      	mov	r0, r5
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	b118      	cbz	r0, 800548a <_fflush_r+0x1a>
 8005482:	6983      	ldr	r3, [r0, #24]
 8005484:	b90b      	cbnz	r3, 800548a <_fflush_r+0x1a>
 8005486:	f000 f887 	bl	8005598 <__sinit>
 800548a:	4b14      	ldr	r3, [pc, #80]	; (80054dc <_fflush_r+0x6c>)
 800548c:	429c      	cmp	r4, r3
 800548e:	d11b      	bne.n	80054c8 <_fflush_r+0x58>
 8005490:	686c      	ldr	r4, [r5, #4]
 8005492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ef      	beq.n	800547a <_fflush_r+0xa>
 800549a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800549c:	07d0      	lsls	r0, r2, #31
 800549e:	d404      	bmi.n	80054aa <_fflush_r+0x3a>
 80054a0:	0599      	lsls	r1, r3, #22
 80054a2:	d402      	bmi.n	80054aa <_fflush_r+0x3a>
 80054a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a6:	f000 f915 	bl	80056d4 <__retarget_lock_acquire_recursive>
 80054aa:	4628      	mov	r0, r5
 80054ac:	4621      	mov	r1, r4
 80054ae:	f7ff ff59 	bl	8005364 <__sflush_r>
 80054b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b4:	4605      	mov	r5, r0
 80054b6:	07da      	lsls	r2, r3, #31
 80054b8:	d4e0      	bmi.n	800547c <_fflush_r+0xc>
 80054ba:	89a3      	ldrh	r3, [r4, #12]
 80054bc:	059b      	lsls	r3, r3, #22
 80054be:	d4dd      	bmi.n	800547c <_fflush_r+0xc>
 80054c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054c2:	f000 f908 	bl	80056d6 <__retarget_lock_release_recursive>
 80054c6:	e7d9      	b.n	800547c <_fflush_r+0xc>
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <_fflush_r+0x70>)
 80054ca:	429c      	cmp	r4, r3
 80054cc:	d101      	bne.n	80054d2 <_fflush_r+0x62>
 80054ce:	68ac      	ldr	r4, [r5, #8]
 80054d0:	e7df      	b.n	8005492 <_fflush_r+0x22>
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <_fflush_r+0x74>)
 80054d4:	429c      	cmp	r4, r3
 80054d6:	bf08      	it	eq
 80054d8:	68ec      	ldreq	r4, [r5, #12]
 80054da:	e7da      	b.n	8005492 <_fflush_r+0x22>
 80054dc:	08005e60 	.word	0x08005e60
 80054e0:	08005e80 	.word	0x08005e80
 80054e4:	08005e40 	.word	0x08005e40

080054e8 <std>:
 80054e8:	2300      	movs	r3, #0
 80054ea:	b510      	push	{r4, lr}
 80054ec:	4604      	mov	r4, r0
 80054ee:	e9c0 3300 	strd	r3, r3, [r0]
 80054f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054f6:	6083      	str	r3, [r0, #8]
 80054f8:	8181      	strh	r1, [r0, #12]
 80054fa:	6643      	str	r3, [r0, #100]	; 0x64
 80054fc:	81c2      	strh	r2, [r0, #14]
 80054fe:	6183      	str	r3, [r0, #24]
 8005500:	4619      	mov	r1, r3
 8005502:	2208      	movs	r2, #8
 8005504:	305c      	adds	r0, #92	; 0x5c
 8005506:	f7fd fb73 	bl	8002bf0 <memset>
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <std+0x38>)
 800550c:	6224      	str	r4, [r4, #32]
 800550e:	6263      	str	r3, [r4, #36]	; 0x24
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <std+0x3c>)
 8005512:	62a3      	str	r3, [r4, #40]	; 0x28
 8005514:	4b04      	ldr	r3, [pc, #16]	; (8005528 <std+0x40>)
 8005516:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <std+0x44>)
 800551a:	6323      	str	r3, [r4, #48]	; 0x30
 800551c:	bd10      	pop	{r4, pc}
 800551e:	bf00      	nop
 8005520:	0800585d 	.word	0x0800585d
 8005524:	0800587f 	.word	0x0800587f
 8005528:	080058b7 	.word	0x080058b7
 800552c:	080058db 	.word	0x080058db

08005530 <_cleanup_r>:
 8005530:	4901      	ldr	r1, [pc, #4]	; (8005538 <_cleanup_r+0x8>)
 8005532:	f000 b8af 	b.w	8005694 <_fwalk_reent>
 8005536:	bf00      	nop
 8005538:	08005471 	.word	0x08005471

0800553c <__sfmoreglue>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	2568      	movs	r5, #104	; 0x68
 8005540:	1e4a      	subs	r2, r1, #1
 8005542:	4355      	muls	r5, r2
 8005544:	460e      	mov	r6, r1
 8005546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800554a:	f7ff fac5 	bl	8004ad8 <_malloc_r>
 800554e:	4604      	mov	r4, r0
 8005550:	b140      	cbz	r0, 8005564 <__sfmoreglue+0x28>
 8005552:	2100      	movs	r1, #0
 8005554:	e9c0 1600 	strd	r1, r6, [r0]
 8005558:	300c      	adds	r0, #12
 800555a:	60a0      	str	r0, [r4, #8]
 800555c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005560:	f7fd fb46 	bl	8002bf0 <memset>
 8005564:	4620      	mov	r0, r4
 8005566:	bd70      	pop	{r4, r5, r6, pc}

08005568 <__sfp_lock_acquire>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__sfp_lock_acquire+0x8>)
 800556a:	f000 b8b3 	b.w	80056d4 <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	200002e8 	.word	0x200002e8

08005574 <__sfp_lock_release>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__sfp_lock_release+0x8>)
 8005576:	f000 b8ae 	b.w	80056d6 <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	200002e8 	.word	0x200002e8

08005580 <__sinit_lock_acquire>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__sinit_lock_acquire+0x8>)
 8005582:	f000 b8a7 	b.w	80056d4 <__retarget_lock_acquire_recursive>
 8005586:	bf00      	nop
 8005588:	200002e3 	.word	0x200002e3

0800558c <__sinit_lock_release>:
 800558c:	4801      	ldr	r0, [pc, #4]	; (8005594 <__sinit_lock_release+0x8>)
 800558e:	f000 b8a2 	b.w	80056d6 <__retarget_lock_release_recursive>
 8005592:	bf00      	nop
 8005594:	200002e3 	.word	0x200002e3

08005598 <__sinit>:
 8005598:	b510      	push	{r4, lr}
 800559a:	4604      	mov	r4, r0
 800559c:	f7ff fff0 	bl	8005580 <__sinit_lock_acquire>
 80055a0:	69a3      	ldr	r3, [r4, #24]
 80055a2:	b11b      	cbz	r3, 80055ac <__sinit+0x14>
 80055a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a8:	f7ff bff0 	b.w	800558c <__sinit_lock_release>
 80055ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055b0:	6523      	str	r3, [r4, #80]	; 0x50
 80055b2:	4b13      	ldr	r3, [pc, #76]	; (8005600 <__sinit+0x68>)
 80055b4:	4a13      	ldr	r2, [pc, #76]	; (8005604 <__sinit+0x6c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80055ba:	42a3      	cmp	r3, r4
 80055bc:	bf08      	it	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	4620      	mov	r0, r4
 80055c2:	bf08      	it	eq
 80055c4:	61a3      	streq	r3, [r4, #24]
 80055c6:	f000 f81f 	bl	8005608 <__sfp>
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 f81b 	bl	8005608 <__sfp>
 80055d2:	60a0      	str	r0, [r4, #8]
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 f817 	bl	8005608 <__sfp>
 80055da:	2200      	movs	r2, #0
 80055dc:	2104      	movs	r1, #4
 80055de:	60e0      	str	r0, [r4, #12]
 80055e0:	6860      	ldr	r0, [r4, #4]
 80055e2:	f7ff ff81 	bl	80054e8 <std>
 80055e6:	2201      	movs	r2, #1
 80055e8:	2109      	movs	r1, #9
 80055ea:	68a0      	ldr	r0, [r4, #8]
 80055ec:	f7ff ff7c 	bl	80054e8 <std>
 80055f0:	2202      	movs	r2, #2
 80055f2:	2112      	movs	r1, #18
 80055f4:	68e0      	ldr	r0, [r4, #12]
 80055f6:	f7ff ff77 	bl	80054e8 <std>
 80055fa:	2301      	movs	r3, #1
 80055fc:	61a3      	str	r3, [r4, #24]
 80055fe:	e7d1      	b.n	80055a4 <__sinit+0xc>
 8005600:	08005a04 	.word	0x08005a04
 8005604:	08005531 	.word	0x08005531

08005608 <__sfp>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	4607      	mov	r7, r0
 800560c:	f7ff ffac 	bl	8005568 <__sfp_lock_acquire>
 8005610:	4b1e      	ldr	r3, [pc, #120]	; (800568c <__sfp+0x84>)
 8005612:	681e      	ldr	r6, [r3, #0]
 8005614:	69b3      	ldr	r3, [r6, #24]
 8005616:	b913      	cbnz	r3, 800561e <__sfp+0x16>
 8005618:	4630      	mov	r0, r6
 800561a:	f7ff ffbd 	bl	8005598 <__sinit>
 800561e:	3648      	adds	r6, #72	; 0x48
 8005620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005624:	3b01      	subs	r3, #1
 8005626:	d503      	bpl.n	8005630 <__sfp+0x28>
 8005628:	6833      	ldr	r3, [r6, #0]
 800562a:	b30b      	cbz	r3, 8005670 <__sfp+0x68>
 800562c:	6836      	ldr	r6, [r6, #0]
 800562e:	e7f7      	b.n	8005620 <__sfp+0x18>
 8005630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005634:	b9d5      	cbnz	r5, 800566c <__sfp+0x64>
 8005636:	4b16      	ldr	r3, [pc, #88]	; (8005690 <__sfp+0x88>)
 8005638:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800563c:	60e3      	str	r3, [r4, #12]
 800563e:	6665      	str	r5, [r4, #100]	; 0x64
 8005640:	f000 f847 	bl	80056d2 <__retarget_lock_init_recursive>
 8005644:	f7ff ff96 	bl	8005574 <__sfp_lock_release>
 8005648:	2208      	movs	r2, #8
 800564a:	4629      	mov	r1, r5
 800564c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005650:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005654:	6025      	str	r5, [r4, #0]
 8005656:	61a5      	str	r5, [r4, #24]
 8005658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800565c:	f7fd fac8 	bl	8002bf0 <memset>
 8005660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005668:	4620      	mov	r0, r4
 800566a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566c:	3468      	adds	r4, #104	; 0x68
 800566e:	e7d9      	b.n	8005624 <__sfp+0x1c>
 8005670:	2104      	movs	r1, #4
 8005672:	4638      	mov	r0, r7
 8005674:	f7ff ff62 	bl	800553c <__sfmoreglue>
 8005678:	4604      	mov	r4, r0
 800567a:	6030      	str	r0, [r6, #0]
 800567c:	2800      	cmp	r0, #0
 800567e:	d1d5      	bne.n	800562c <__sfp+0x24>
 8005680:	f7ff ff78 	bl	8005574 <__sfp_lock_release>
 8005684:	230c      	movs	r3, #12
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	e7ee      	b.n	8005668 <__sfp+0x60>
 800568a:	bf00      	nop
 800568c:	08005a04 	.word	0x08005a04
 8005690:	ffff0001 	.word	0xffff0001

08005694 <_fwalk_reent>:
 8005694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005698:	4606      	mov	r6, r0
 800569a:	4688      	mov	r8, r1
 800569c:	2700      	movs	r7, #0
 800569e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056a6:	f1b9 0901 	subs.w	r9, r9, #1
 80056aa:	d505      	bpl.n	80056b8 <_fwalk_reent+0x24>
 80056ac:	6824      	ldr	r4, [r4, #0]
 80056ae:	2c00      	cmp	r4, #0
 80056b0:	d1f7      	bne.n	80056a2 <_fwalk_reent+0xe>
 80056b2:	4638      	mov	r0, r7
 80056b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b8:	89ab      	ldrh	r3, [r5, #12]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d907      	bls.n	80056ce <_fwalk_reent+0x3a>
 80056be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056c2:	3301      	adds	r3, #1
 80056c4:	d003      	beq.n	80056ce <_fwalk_reent+0x3a>
 80056c6:	4629      	mov	r1, r5
 80056c8:	4630      	mov	r0, r6
 80056ca:	47c0      	blx	r8
 80056cc:	4307      	orrs	r7, r0
 80056ce:	3568      	adds	r5, #104	; 0x68
 80056d0:	e7e9      	b.n	80056a6 <_fwalk_reent+0x12>

080056d2 <__retarget_lock_init_recursive>:
 80056d2:	4770      	bx	lr

080056d4 <__retarget_lock_acquire_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_release_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <__swhatbuf_r>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	460e      	mov	r6, r1
 80056dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e0:	4614      	mov	r4, r2
 80056e2:	2900      	cmp	r1, #0
 80056e4:	461d      	mov	r5, r3
 80056e6:	b096      	sub	sp, #88	; 0x58
 80056e8:	da07      	bge.n	80056fa <__swhatbuf_r+0x22>
 80056ea:	2300      	movs	r3, #0
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	89b3      	ldrh	r3, [r6, #12]
 80056f0:	061a      	lsls	r2, r3, #24
 80056f2:	d410      	bmi.n	8005716 <__swhatbuf_r+0x3e>
 80056f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f8:	e00e      	b.n	8005718 <__swhatbuf_r+0x40>
 80056fa:	466a      	mov	r2, sp
 80056fc:	f000 f914 	bl	8005928 <_fstat_r>
 8005700:	2800      	cmp	r0, #0
 8005702:	dbf2      	blt.n	80056ea <__swhatbuf_r+0x12>
 8005704:	9a01      	ldr	r2, [sp, #4]
 8005706:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800570a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800570e:	425a      	negs	r2, r3
 8005710:	415a      	adcs	r2, r3
 8005712:	602a      	str	r2, [r5, #0]
 8005714:	e7ee      	b.n	80056f4 <__swhatbuf_r+0x1c>
 8005716:	2340      	movs	r3, #64	; 0x40
 8005718:	2000      	movs	r0, #0
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	b016      	add	sp, #88	; 0x58
 800571e:	bd70      	pop	{r4, r5, r6, pc}

08005720 <__smakebuf_r>:
 8005720:	898b      	ldrh	r3, [r1, #12]
 8005722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005724:	079d      	lsls	r5, r3, #30
 8005726:	4606      	mov	r6, r0
 8005728:	460c      	mov	r4, r1
 800572a:	d507      	bpl.n	800573c <__smakebuf_r+0x1c>
 800572c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	2301      	movs	r3, #1
 8005736:	6163      	str	r3, [r4, #20]
 8005738:	b002      	add	sp, #8
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	466a      	mov	r2, sp
 800573e:	ab01      	add	r3, sp, #4
 8005740:	f7ff ffca 	bl	80056d8 <__swhatbuf_r>
 8005744:	9900      	ldr	r1, [sp, #0]
 8005746:	4605      	mov	r5, r0
 8005748:	4630      	mov	r0, r6
 800574a:	f7ff f9c5 	bl	8004ad8 <_malloc_r>
 800574e:	b948      	cbnz	r0, 8005764 <__smakebuf_r+0x44>
 8005750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005754:	059a      	lsls	r2, r3, #22
 8005756:	d4ef      	bmi.n	8005738 <__smakebuf_r+0x18>
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	e7e3      	b.n	800572c <__smakebuf_r+0xc>
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <__smakebuf_r+0x7c>)
 8005766:	62b3      	str	r3, [r6, #40]	; 0x28
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	6120      	str	r0, [r4, #16]
 8005776:	6163      	str	r3, [r4, #20]
 8005778:	9b01      	ldr	r3, [sp, #4]
 800577a:	b15b      	cbz	r3, 8005794 <__smakebuf_r+0x74>
 800577c:	4630      	mov	r0, r6
 800577e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005782:	f000 f8e3 	bl	800594c <_isatty_r>
 8005786:	b128      	cbz	r0, 8005794 <__smakebuf_r+0x74>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	89a0      	ldrh	r0, [r4, #12]
 8005796:	4305      	orrs	r5, r0
 8005798:	81a5      	strh	r5, [r4, #12]
 800579a:	e7cd      	b.n	8005738 <__smakebuf_r+0x18>
 800579c:	08005531 	.word	0x08005531

080057a0 <memchr>:
 80057a0:	4603      	mov	r3, r0
 80057a2:	b510      	push	{r4, lr}
 80057a4:	b2c9      	uxtb	r1, r1
 80057a6:	4402      	add	r2, r0
 80057a8:	4293      	cmp	r3, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	d101      	bne.n	80057b2 <memchr+0x12>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e003      	b.n	80057ba <memchr+0x1a>
 80057b2:	7804      	ldrb	r4, [r0, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	428c      	cmp	r4, r1
 80057b8:	d1f6      	bne.n	80057a8 <memchr+0x8>
 80057ba:	bd10      	pop	{r4, pc}

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__malloc_lock+0x8>)
 80057be:	f7ff bf89 	b.w	80056d4 <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	200002e4 	.word	0x200002e4

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f7ff bf84 	b.w	80056d6 <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	200002e4 	.word	0x200002e4

080057d4 <_raise_r>:
 80057d4:	291f      	cmp	r1, #31
 80057d6:	b538      	push	{r3, r4, r5, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	460d      	mov	r5, r1
 80057dc:	d904      	bls.n	80057e8 <_raise_r+0x14>
 80057de:	2316      	movs	r3, #22
 80057e0:	6003      	str	r3, [r0, #0]
 80057e2:	f04f 30ff 	mov.w	r0, #4294967295
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057ea:	b112      	cbz	r2, 80057f2 <_raise_r+0x1e>
 80057ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057f0:	b94b      	cbnz	r3, 8005806 <_raise_r+0x32>
 80057f2:	4620      	mov	r0, r4
 80057f4:	f000 f830 	bl	8005858 <_getpid_r>
 80057f8:	462a      	mov	r2, r5
 80057fa:	4601      	mov	r1, r0
 80057fc:	4620      	mov	r0, r4
 80057fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005802:	f000 b817 	b.w	8005834 <_kill_r>
 8005806:	2b01      	cmp	r3, #1
 8005808:	d00a      	beq.n	8005820 <_raise_r+0x4c>
 800580a:	1c59      	adds	r1, r3, #1
 800580c:	d103      	bne.n	8005816 <_raise_r+0x42>
 800580e:	2316      	movs	r3, #22
 8005810:	6003      	str	r3, [r0, #0]
 8005812:	2001      	movs	r0, #1
 8005814:	e7e7      	b.n	80057e6 <_raise_r+0x12>
 8005816:	2400      	movs	r4, #0
 8005818:	4628      	mov	r0, r5
 800581a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800581e:	4798      	blx	r3
 8005820:	2000      	movs	r0, #0
 8005822:	e7e0      	b.n	80057e6 <_raise_r+0x12>

08005824 <raise>:
 8005824:	4b02      	ldr	r3, [pc, #8]	; (8005830 <raise+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f7ff bfd3 	b.w	80057d4 <_raise_r>
 800582e:	bf00      	nop
 8005830:	2000000c 	.word	0x2000000c

08005834 <_kill_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	2300      	movs	r3, #0
 8005838:	4d06      	ldr	r5, [pc, #24]	; (8005854 <_kill_r+0x20>)
 800583a:	4604      	mov	r4, r0
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	602b      	str	r3, [r5, #0]
 8005842:	f7fb fcf0 	bl	8001226 <_kill>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	d102      	bne.n	8005850 <_kill_r+0x1c>
 800584a:	682b      	ldr	r3, [r5, #0]
 800584c:	b103      	cbz	r3, 8005850 <_kill_r+0x1c>
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	bd38      	pop	{r3, r4, r5, pc}
 8005852:	bf00      	nop
 8005854:	200002ec 	.word	0x200002ec

08005858 <_getpid_r>:
 8005858:	f7fb bcde 	b.w	8001218 <_getpid>

0800585c <__sread>:
 800585c:	b510      	push	{r4, lr}
 800585e:	460c      	mov	r4, r1
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 f894 	bl	8005990 <_read_r>
 8005868:	2800      	cmp	r0, #0
 800586a:	bfab      	itete	ge
 800586c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800586e:	89a3      	ldrhlt	r3, [r4, #12]
 8005870:	181b      	addge	r3, r3, r0
 8005872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005876:	bfac      	ite	ge
 8005878:	6563      	strge	r3, [r4, #84]	; 0x54
 800587a:	81a3      	strhlt	r3, [r4, #12]
 800587c:	bd10      	pop	{r4, pc}

0800587e <__swrite>:
 800587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005882:	461f      	mov	r7, r3
 8005884:	898b      	ldrh	r3, [r1, #12]
 8005886:	4605      	mov	r5, r0
 8005888:	05db      	lsls	r3, r3, #23
 800588a:	460c      	mov	r4, r1
 800588c:	4616      	mov	r6, r2
 800588e:	d505      	bpl.n	800589c <__swrite+0x1e>
 8005890:	2302      	movs	r3, #2
 8005892:	2200      	movs	r2, #0
 8005894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005898:	f000 f868 	bl	800596c <_lseek_r>
 800589c:	89a3      	ldrh	r3, [r4, #12]
 800589e:	4632      	mov	r2, r6
 80058a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a4:	81a3      	strh	r3, [r4, #12]
 80058a6:	4628      	mov	r0, r5
 80058a8:	463b      	mov	r3, r7
 80058aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b2:	f000 b817 	b.w	80058e4 <_write_r>

080058b6 <__sseek>:
 80058b6:	b510      	push	{r4, lr}
 80058b8:	460c      	mov	r4, r1
 80058ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058be:	f000 f855 	bl	800596c <_lseek_r>
 80058c2:	1c43      	adds	r3, r0, #1
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	bf15      	itete	ne
 80058c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058d2:	81a3      	strheq	r3, [r4, #12]
 80058d4:	bf18      	it	ne
 80058d6:	81a3      	strhne	r3, [r4, #12]
 80058d8:	bd10      	pop	{r4, pc}

080058da <__sclose>:
 80058da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058de:	f000 b813 	b.w	8005908 <_close_r>
	...

080058e4 <_write_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4604      	mov	r4, r0
 80058e8:	4608      	mov	r0, r1
 80058ea:	4611      	mov	r1, r2
 80058ec:	2200      	movs	r2, #0
 80058ee:	4d05      	ldr	r5, [pc, #20]	; (8005904 <_write_r+0x20>)
 80058f0:	602a      	str	r2, [r5, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f7fb fcce 	bl	8001294 <_write>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_write_r+0x1e>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_write_r+0x1e>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	200002ec 	.word	0x200002ec

08005908 <_close_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	2300      	movs	r3, #0
 800590c:	4d05      	ldr	r5, [pc, #20]	; (8005924 <_close_r+0x1c>)
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	602b      	str	r3, [r5, #0]
 8005914:	f7fb fcda 	bl	80012cc <_close>
 8005918:	1c43      	adds	r3, r0, #1
 800591a:	d102      	bne.n	8005922 <_close_r+0x1a>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b103      	cbz	r3, 8005922 <_close_r+0x1a>
 8005920:	6023      	str	r3, [r4, #0]
 8005922:	bd38      	pop	{r3, r4, r5, pc}
 8005924:	200002ec 	.word	0x200002ec

08005928 <_fstat_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	2300      	movs	r3, #0
 800592c:	4d06      	ldr	r5, [pc, #24]	; (8005948 <_fstat_r+0x20>)
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	4611      	mov	r1, r2
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	f7fb fcd4 	bl	80012e2 <_fstat>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	d102      	bne.n	8005944 <_fstat_r+0x1c>
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	b103      	cbz	r3, 8005944 <_fstat_r+0x1c>
 8005942:	6023      	str	r3, [r4, #0]
 8005944:	bd38      	pop	{r3, r4, r5, pc}
 8005946:	bf00      	nop
 8005948:	200002ec 	.word	0x200002ec

0800594c <_isatty_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	2300      	movs	r3, #0
 8005950:	4d05      	ldr	r5, [pc, #20]	; (8005968 <_isatty_r+0x1c>)
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	602b      	str	r3, [r5, #0]
 8005958:	f7fb fcd2 	bl	8001300 <_isatty>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_isatty_r+0x1a>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b103      	cbz	r3, 8005966 <_isatty_r+0x1a>
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	200002ec 	.word	0x200002ec

0800596c <_lseek_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	2200      	movs	r2, #0
 8005976:	4d05      	ldr	r5, [pc, #20]	; (800598c <_lseek_r+0x20>)
 8005978:	602a      	str	r2, [r5, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f7fb fcca 	bl	8001314 <_lseek>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_lseek_r+0x1e>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_lseek_r+0x1e>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	200002ec 	.word	0x200002ec

08005990 <_read_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	2200      	movs	r2, #0
 800599a:	4d05      	ldr	r5, [pc, #20]	; (80059b0 <_read_r+0x20>)
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fb fc5b 	bl	800125a <_read>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_read_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_read_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	200002ec 	.word	0x200002ec

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
