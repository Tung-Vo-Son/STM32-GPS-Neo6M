
STM32_Neo6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003d18  08003d18  00013d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f30  08003f30  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003f30  08003f30  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f30  08003f30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f30  08003f30  00013f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000078  08003fac  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003fac  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008231  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a5  00000000  00000000  000282ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173c6  00000000  00000000  0002a930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c29  00000000  00000000  00041cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d23  00000000  00000000  0004991f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000cc698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d00 	.word	0x08003d00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003d00 	.word	0x08003d00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_frsub>:
 8000a34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	e002      	b.n	8000a40 <__addsf3>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fsub>:
 8000a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a40 <__addsf3>:
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	bf1f      	itttt	ne
 8000a44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a48:	ea92 0f03 	teqne	r2, r3
 8000a4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a54:	d06a      	beq.n	8000b2c <__addsf3+0xec>
 8000a56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a5e:	bfc1      	itttt	gt
 8000a60:	18d2      	addgt	r2, r2, r3
 8000a62:	4041      	eorgt	r1, r0
 8000a64:	4048      	eorgt	r0, r1
 8000a66:	4041      	eorgt	r1, r0
 8000a68:	bfb8      	it	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	2b19      	cmp	r3, #25
 8000a6e:	bf88      	it	hi
 8000a70:	4770      	bxhi	lr
 8000a72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a8e:	bf18      	it	ne
 8000a90:	4249      	negne	r1, r1
 8000a92:	ea92 0f03 	teq	r2, r3
 8000a96:	d03f      	beq.n	8000b18 <__addsf3+0xd8>
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa0:	eb10 000c 	adds.w	r0, r0, ip
 8000aa4:	f1c3 0320 	rsb	r3, r3, #32
 8000aa8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	d502      	bpl.n	8000ab8 <__addsf3+0x78>
 8000ab2:	4249      	negs	r1, r1
 8000ab4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000abc:	d313      	bcc.n	8000ae6 <__addsf3+0xa6>
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac2:	d306      	bcc.n	8000ad2 <__addsf3+0x92>
 8000ac4:	0840      	lsrs	r0, r0, #1
 8000ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aca:	f102 0201 	add.w	r2, r2, #1
 8000ace:	2afe      	cmp	r2, #254	; 0xfe
 8000ad0:	d251      	bcs.n	8000b76 <__addsf3+0x136>
 8000ad2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ada:	bf08      	it	eq
 8000adc:	f020 0001 	biceq.w	r0, r0, #1
 8000ae0:	ea40 0003 	orr.w	r0, r0, r3
 8000ae4:	4770      	bx	lr
 8000ae6:	0049      	lsls	r1, r1, #1
 8000ae8:	eb40 0000 	adc.w	r0, r0, r0
 8000aec:	3a01      	subs	r2, #1
 8000aee:	bf28      	it	cs
 8000af0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000af4:	d2ed      	bcs.n	8000ad2 <__addsf3+0x92>
 8000af6:	fab0 fc80 	clz	ip, r0
 8000afa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000afe:	ebb2 020c 	subs.w	r2, r2, ip
 8000b02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b06:	bfaa      	itet	ge
 8000b08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b0c:	4252      	neglt	r2, r2
 8000b0e:	4318      	orrge	r0, r3
 8000b10:	bfbc      	itt	lt
 8000b12:	40d0      	lsrlt	r0, r2
 8000b14:	4318      	orrlt	r0, r3
 8000b16:	4770      	bx	lr
 8000b18:	f092 0f00 	teq	r2, #0
 8000b1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b20:	bf06      	itte	eq
 8000b22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b26:	3201      	addeq	r2, #1
 8000b28:	3b01      	subne	r3, #1
 8000b2a:	e7b5      	b.n	8000a98 <__addsf3+0x58>
 8000b2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3a:	d021      	beq.n	8000b80 <__addsf3+0x140>
 8000b3c:	ea92 0f03 	teq	r2, r3
 8000b40:	d004      	beq.n	8000b4c <__addsf3+0x10c>
 8000b42:	f092 0f00 	teq	r2, #0
 8000b46:	bf08      	it	eq
 8000b48:	4608      	moveq	r0, r1
 8000b4a:	4770      	bx	lr
 8000b4c:	ea90 0f01 	teq	r0, r1
 8000b50:	bf1c      	itt	ne
 8000b52:	2000      	movne	r0, #0
 8000b54:	4770      	bxne	lr
 8000b56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b5a:	d104      	bne.n	8000b66 <__addsf3+0x126>
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b6a:	bf3c      	itt	cc
 8000b6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bxcc	lr
 8000b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b84:	bf16      	itet	ne
 8000b86:	4608      	movne	r0, r1
 8000b88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b8c:	4601      	movne	r1, r0
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	bf06      	itte	eq
 8000b92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b96:	ea90 0f01 	teqeq	r0, r1
 8000b9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_ui2f>:
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e004      	b.n	8000bb0 <__aeabi_i2f+0x8>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_i2f>:
 8000ba8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	bf48      	it	mi
 8000bae:	4240      	negmi	r0, r0
 8000bb0:	ea5f 0c00 	movs.w	ip, r0
 8000bb4:	bf08      	it	eq
 8000bb6:	4770      	bxeq	lr
 8000bb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	e01c      	b.n	8000bfe <__aeabi_l2f+0x2a>

08000bc4 <__aeabi_ul2f>:
 8000bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e00a      	b.n	8000be8 <__aeabi_l2f+0x14>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_l2f>:
 8000bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd8:	bf08      	it	eq
 8000bda:	4770      	bxeq	lr
 8000bdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__aeabi_l2f+0x14>
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	ea5f 0c01 	movs.w	ip, r1
 8000bec:	bf02      	ittt	eq
 8000bee:	4684      	moveq	ip, r0
 8000bf0:	4601      	moveq	r1, r0
 8000bf2:	2000      	moveq	r0, #0
 8000bf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c02:	fabc f28c 	clz	r2, ip
 8000c06:	3a08      	subs	r2, #8
 8000c08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c0c:	db10      	blt.n	8000c30 <__aeabi_l2f+0x5c>
 8000c0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c12:	4463      	add	r3, ip
 8000c14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c20:	fa20 f202 	lsr.w	r2, r0, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f102 0220 	add.w	r2, r2, #32
 8000c34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c40:	fa21 f202 	lsr.w	r2, r1, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_fmul>:
 8000c50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c58:	bf1e      	ittt	ne
 8000c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5e:	ea92 0f0c 	teqne	r2, ip
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d06f      	beq.n	8000d48 <__aeabi_fmul+0xf8>
 8000c68:	441a      	add	r2, r3
 8000c6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c6e:	0240      	lsls	r0, r0, #9
 8000c70:	bf18      	it	ne
 8000c72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c76:	d01e      	beq.n	8000cb6 <__aeabi_fmul+0x66>
 8000c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c84:	fba0 3101 	umull	r3, r1, r0, r1
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c90:	bf3e      	ittt	cc
 8000c92:	0049      	lslcc	r1, r1, #1
 8000c94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c98:	005b      	lslcc	r3, r3, #1
 8000c9a:	ea40 0001 	orr.w	r0, r0, r1
 8000c9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ca2:	2afd      	cmp	r2, #253	; 0xfd
 8000ca4:	d81d      	bhi.n	8000ce2 <__aeabi_fmul+0x92>
 8000ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cbe:	bf08      	it	eq
 8000cc0:	0249      	lsleq	r1, r1, #9
 8000cc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cca:	3a7f      	subs	r2, #127	; 0x7f
 8000ccc:	bfc2      	ittt	gt
 8000cce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd6:	4770      	bxgt	lr
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	dc5d      	bgt.n	8000da0 <__aeabi_fmul+0x150>
 8000ce4:	f112 0f19 	cmn.w	r2, #25
 8000ce8:	bfdc      	itt	le
 8000cea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cee:	4770      	bxle	lr
 8000cf0:	f1c2 0200 	rsb	r2, r2, #0
 8000cf4:	0041      	lsls	r1, r0, #1
 8000cf6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cfa:	f1c2 0220 	rsb	r2, r2, #32
 8000cfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d06:	f140 0000 	adc.w	r0, r0, #0
 8000d0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d0e:	bf08      	it	eq
 8000d10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d14:	4770      	bx	lr
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0040      	lsleq	r0, r0, #1
 8000d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d26:	3a01      	subeq	r2, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xce>
 8000d2a:	ea40 000c 	orr.w	r0, r0, ip
 8000d2e:	f093 0f00 	teq	r3, #0
 8000d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0049      	lsleq	r1, r1, #1
 8000d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d3e:	3b01      	subeq	r3, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xe6>
 8000d42:	ea41 010c 	orr.w	r1, r1, ip
 8000d46:	e78f      	b.n	8000c68 <__aeabi_fmul+0x18>
 8000d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	bf18      	it	ne
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d00a      	beq.n	8000d6e <__aeabi_fmul+0x11e>
 8000d58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d5c:	bf18      	it	ne
 8000d5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	d1d8      	bne.n	8000d16 <__aeabi_fmul+0xc6>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	bf17      	itett	ne
 8000d74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d78:	4608      	moveq	r0, r1
 8000d7a:	f091 0f00 	teqne	r1, #0
 8000d7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d82:	d014      	beq.n	8000dae <__aeabi_fmul+0x15e>
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	d101      	bne.n	8000d8e <__aeabi_fmul+0x13e>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d10f      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d8e:	ea93 0f0c 	teq	r3, ip
 8000d92:	d103      	bne.n	8000d9c <__aeabi_fmul+0x14c>
 8000d94:	024b      	lsls	r3, r1, #9
 8000d96:	bf18      	it	ne
 8000d98:	4608      	movne	r0, r1
 8000d9a:	d108      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fdiv>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d069      	beq.n	8000ea4 <__aeabi_fdiv+0xec>
 8000dd0:	eba2 0203 	sub.w	r2, r2, r3
 8000dd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dde:	d037      	beq.n	8000e50 <__aeabi_fdiv+0x98>
 8000de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf38      	it	cc
 8000df4:	005b      	lslcc	r3, r3, #1
 8000df6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	bf24      	itt	cs
 8000e02:	1a5b      	subcs	r3, r3, r1
 8000e04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e0c:	bf24      	itt	cs
 8000e0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e1a:	bf24      	itt	cs
 8000e1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e28:	bf24      	itt	cs
 8000e2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e3a:	d1e0      	bne.n	8000dfe <__aeabi_fdiv+0x46>
 8000e3c:	2afd      	cmp	r2, #253	; 0xfd
 8000e3e:	f63f af50 	bhi.w	8000ce2 <__aeabi_fmul+0x92>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e58:	327f      	adds	r2, #127	; 0x7f
 8000e5a:	bfc2      	ittt	gt
 8000e5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e64:	4770      	bxgt	lr
 8000e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	3a01      	subs	r2, #1
 8000e70:	e737      	b.n	8000ce2 <__aeabi_fmul+0x92>
 8000e72:	f092 0f00 	teq	r2, #0
 8000e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0040      	lsleq	r0, r0, #1
 8000e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e82:	3a01      	subeq	r2, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xc2>
 8000e86:	ea40 000c 	orr.w	r0, r0, ip
 8000e8a:	f093 0f00 	teq	r3, #0
 8000e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0049      	lsleq	r1, r1, #1
 8000e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9a:	3b01      	subeq	r3, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xda>
 8000e9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ea2:	e795      	b.n	8000dd0 <__aeabi_fdiv+0x18>
 8000ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d108      	bne.n	8000ec0 <__aeabi_fdiv+0x108>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	f47f af7d 	bne.w	8000dae <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	f47f af70 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e776      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ec0:	ea93 0f0c 	teq	r3, ip
 8000ec4:	d104      	bne.n	8000ed0 <__aeabi_fdiv+0x118>
 8000ec6:	024b      	lsls	r3, r1, #9
 8000ec8:	f43f af4c 	beq.w	8000d64 <__aeabi_fmul+0x114>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e76e      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1ca      	bne.n	8000e72 <__aeabi_fdiv+0xba>
 8000edc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee0:	f47f af5c 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ee4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee8:	f47f af3c 	bne.w	8000d64 <__aeabi_fmul+0x114>
 8000eec:	e75f      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2iz>:
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30f      	bcc.n	8000f1a <__aeabi_f2iz+0x2a>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_f2iz+0x30>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f10:	fa23 f002 	lsr.w	r0, r3, r2
 8000f14:	bf18      	it	ne
 8000f16:	4240      	negne	r0, r0
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2iz+0x3a>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d105      	bne.n	8000f36 <__aeabi_f2iz+0x46>
 8000f2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2e:	bf08      	it	eq
 8000f30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr

08000f3c <Convert>:

#include "ST47_Neo6M.h"
GPS_Struct gps;

double Convert(float degMin)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	double min = 0.0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double decDeg = 0.0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//get the minutes, fmod() requires double
	min = fmod((double)degMin, 100.0);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fa61 	bl	8000424 <__aeabi_f2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <Convert+0x8c>)
 8000f68:	f002 fd82 	bl	8003a70 <fmod>
 8000f6c:	e9c7 0104 	strd	r0, r1, [r7, #16]

	//rebuild coordinates in decimal degrees
	degMin = (int) ( degMin / 100 );
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <Convert+0x90>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff20 	bl	8000db8 <__aeabi_fdiv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffb8 	bl	8000ef0 <__aeabi_f2iz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe10 	bl	8000ba8 <__aeabi_i2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
	decDeg = degMin + ( min / 60 );
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fa49 	bl	8000424 <__aeabi_f2d>
 8000f92:	4604      	mov	r4, r0
 8000f94:	460d      	mov	r5, r1
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <Convert+0x94>)
 8000f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa0:	f7ff fbc2 	bl	8000728 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4620      	mov	r0, r4
 8000faa:	4629      	mov	r1, r5
 8000fac:	f7ff f8dc 	bl	8000168 <__adddf3>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decDeg;
 8000fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	42c80000 	.word	0x42c80000
 8000fd0:	404e0000 	.word	0x404e0000

08000fd4 <GPS_Init>:

void GPS_Init()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	gps.rx_index = 0;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <GPS_Init+0x18>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&neo, &gps.rx_tmp, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4903      	ldr	r1, [pc, #12]	; (8000ff0 <GPS_Init+0x1c>)
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <GPS_Init+0x20>)
 8000fe4:	f001 fbd3 	bl	800278e <HAL_UART_Receive_IT>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	200000a4 	.word	0x200000a4
 8000ff4:	200002f0 	.word	0x200002f0

08000ff8 <GPS_Callback>:

void GPS_Callback()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	gps.process_time = HAL_GetTick();
 8000ffc:	f000 fb80 	bl	8001700 <HAL_GetTick>
 8001000:	4603      	mov	r3, r0
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <GPS_Callback+0x38>)
 8001004:	6013      	str	r3, [r2, #0]
	if(gps.rx_index < sizeof(gps.rx_buffer))
	{
		gps.rx_buffer[gps.rx_index] = gps.rx_tmp;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <GPS_Callback+0x38>)
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	4619      	mov	r1, r3
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <GPS_Callback+0x38>)
 800100e:	791a      	ldrb	r2, [r3, #4]
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <GPS_Callback+0x38>)
 8001012:	440b      	add	r3, r1
 8001014:	719a      	strb	r2, [r3, #6]
		gps.rx_index ++;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <GPS_Callback+0x38>)
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <GPS_Callback+0x38>)
 8001020:	715a      	strb	r2, [r3, #5]
	}
	HAL_UART_Receive_IT(&neo, &gps.rx_tmp, 1);
 8001022:	2201      	movs	r2, #1
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <GPS_Callback+0x3c>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <GPS_Callback+0x40>)
 8001028:	f001 fbb1 	bl	800278e <HAL_UART_Receive_IT>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000a0 	.word	0x200000a0
 8001034:	200000a4 	.word	0x200000a4
 8001038:	200002f0 	.word	0x200002f0

0800103c <GPS_GetData>:

void GPS_GetData()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af0e      	add	r7, sp, #56	; 0x38
	if((HAL_GetTick() - gps.process_time > 50) && gps.rx_index > 0)
 8001042:	f000 fb5d 	bl	8001700 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	4b33      	ldr	r3, [pc, #204]	; (8001118 <GPS_GetData+0xdc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b32      	cmp	r3, #50	; 0x32
 8001050:	d951      	bls.n	80010f6 <GPS_GetData+0xba>
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <GPS_GetData+0xdc>)
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d04d      	beq.n	80010f6 <GPS_GetData+0xba>
	{
		char* response = strstr((char*)gps.rx_buffer, "$GPGGA");
 800105a:	4930      	ldr	r1, [pc, #192]	; (800111c <GPS_GetData+0xe0>)
 800105c:	4830      	ldr	r0, [pc, #192]	; (8001120 <GPS_GetData+0xe4>)
 800105e:	f001 ff4b 	bl	8002ef8 <strstr>
 8001062:	6078      	str	r0, [r7, #4]
		if(response != NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d03c      	beq.n	80010e4 <GPS_GetData+0xa8>
		{
			memset(&gps.gpgga, 0, sizeof(gps.gpgga));
 800106a:	2248      	movs	r2, #72	; 0x48
 800106c:	2100      	movs	r1, #0
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <GPS_GetData+0xe8>)
 8001070:	f001 ff0e 	bl	8002e90 <memset>
			sscanf(response,"$GPGGA, %2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n", &gps.gpgga.utc_hour, &gps.gpgga.utc_min, &gps.gpgga.utc_sec, &gps.gpgga.utc_microsec, &gps.gpgga.latitude_raw, &gps.gpgga.ns_indicator, &gps.gpgga.longtitude_raw, &gps.gpgga.ew_indicator, &gps.gpgga.gps_quality_indicator, &gps.gpgga.num_of_satellites, &gps.gpgga.hdop, &gps.gpgga.msl_altitude, &gps.gpgga.msl_units, &gps.gpgga.age_of_diffCorr, gps.gpgga.diff_ref_station_id, gps.gpgga.checksum); // @suppress("Float formatting support")
 8001074:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <GPS_GetData+0xec>)
 8001076:	930d      	str	r3, [sp, #52]	; 0x34
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <GPS_GetData+0xf0>)
 800107a:	930c      	str	r3, [sp, #48]	; 0x30
 800107c:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <GPS_GetData+0xf4>)
 800107e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <GPS_GetData+0xf8>)
 8001082:	930a      	str	r3, [sp, #40]	; 0x28
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <GPS_GetData+0xfc>)
 8001086:	9309      	str	r3, [sp, #36]	; 0x24
 8001088:	4b2c      	ldr	r3, [pc, #176]	; (800113c <GPS_GetData+0x100>)
 800108a:	9308      	str	r3, [sp, #32]
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <GPS_GetData+0x104>)
 800108e:	9307      	str	r3, [sp, #28]
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <GPS_GetData+0x108>)
 8001092:	9306      	str	r3, [sp, #24]
 8001094:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <GPS_GetData+0x10c>)
 8001096:	9305      	str	r3, [sp, #20]
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <GPS_GetData+0x110>)
 800109a:	9304      	str	r3, [sp, #16]
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <GPS_GetData+0x114>)
 800109e:	9303      	str	r3, [sp, #12]
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <GPS_GetData+0x118>)
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <GPS_GetData+0x11c>)
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <GPS_GetData+0x120>)
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <GPS_GetData+0x124>)
 80010ae:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <GPS_GetData+0xe8>)
 80010b0:	492c      	ldr	r1, [pc, #176]	; (8001164 <GPS_GetData+0x128>)
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f001 fef4 	bl	8002ea0 <siscanf>
			gps.gpgga.latitude = Convert(gps.gpgga.latitude_raw);
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <GPS_GetData+0xdc>)
 80010ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff3c 	bl	8000f3c <Convert>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4913      	ldr	r1, [pc, #76]	; (8001118 <GPS_GetData+0xdc>)
 80010ca:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
			gps.gpgga.longtitude = Convert(gps.gpgga.longtitude_raw);
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <GPS_GetData+0xdc>)
 80010d0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff31 	bl	8000f3c <Convert>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <GPS_GetData+0xdc>)
 80010e0:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
		}
		memset(gps.rx_buffer, 0, sizeof(gps.rx_buffer));
 80010e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e8:	2100      	movs	r1, #0
 80010ea:	480d      	ldr	r0, [pc, #52]	; (8001120 <GPS_GetData+0xe4>)
 80010ec:	f001 fed0 	bl	8002e90 <memset>
		gps.rx_index = 0;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <GPS_GetData+0xdc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	715a      	strb	r2, [r3, #5]
	}
	HAL_UART_Receive_IT(&neo, &gps.rx_tmp, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	491b      	ldr	r1, [pc, #108]	; (8001168 <GPS_GetData+0x12c>)
 80010fa:	481c      	ldr	r0, [pc, #112]	; (800116c <GPS_GetData+0x130>)
 80010fc:	f001 fb47 	bl	800278e <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&debug, gps.rx_buffer, sizeof(gps.rx_buffer), 2000);
 8001100:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	4905      	ldr	r1, [pc, #20]	; (8001120 <GPS_GetData+0xe4>)
 800110a:	4819      	ldr	r0, [pc, #100]	; (8001170 <GPS_GetData+0x134>)
 800110c:	f001 faad 	bl	800266a <HAL_UART_Transmit>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000a0 	.word	0x200000a0
 800111c:	08003d18 	.word	0x08003d18
 8001120:	200000a6 	.word	0x200000a6
 8001124:	200002a8 	.word	0x200002a8
 8001128:	200002ec 	.word	0x200002ec
 800112c:	200002e8 	.word	0x200002e8
 8001130:	200002e6 	.word	0x200002e6
 8001134:	200002dc 	.word	0x200002dc
 8001138:	200002d8 	.word	0x200002d8
 800113c:	200002d4 	.word	0x200002d4
 8001140:	200002d2 	.word	0x200002d2
 8001144:	200002d1 	.word	0x200002d1
 8001148:	200002d0 	.word	0x200002d0
 800114c:	200002c4 	.word	0x200002c4
 8001150:	200002c0 	.word	0x200002c0
 8001154:	200002b0 	.word	0x200002b0
 8001158:	200002ac 	.word	0x200002ac
 800115c:	200002aa 	.word	0x200002aa
 8001160:	200002a9 	.word	0x200002a9
 8001164:	08003d20 	.word	0x08003d20
 8001168:	200000a4 	.word	0x200000a4
 800116c:	200002f0 	.word	0x200002f0
 8001170:	20000330 	.word	0x20000330

08001174 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern GPS_Struct gps;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	GPS_Callback();
 800117c:	f7ff ff3c 	bl	8000ff8 <GPS_Callback>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f000 fa60 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001190:	f000 f80e 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001194:	f000 f8a6 	bl	80012e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001198:	f000 f850 	bl	800123c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800119c:	f000 f878 	bl	8001290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 80011a0:	f7ff ff18 	bl	8000fd4 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_GetData();
 80011a4:	f7ff ff4a 	bl	800103c <GPS_GetData>
	  HAL_Delay(100);
 80011a8:	2064      	movs	r0, #100	; 0x64
 80011aa:	f000 fab3 	bl	8001714 <HAL_Delay>
	  GPS_GetData();
 80011ae:	e7f9      	b.n	80011a4 <main+0x1c>

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b090      	sub	sp, #64	; 0x40
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	2228      	movs	r2, #40	; 0x28
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fe66 	bl	8002e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d2:	2301      	movs	r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0318 	add.w	r3, r7, #24
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fdcf 	bl	8001d9c <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001204:	f000 f8ba 	bl	800137c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2102      	movs	r1, #2
 8001222:	4618      	mov	r0, r3
 8001224:	f001 f83a 	bl	800229c <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800122e:	f000 f8a5 	bl	800137c <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3740      	adds	r7, #64	; 0x40
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART1_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800124c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART1_UART_Init+0x4c>)
 8001274:	f001 f9ac 	bl	80025d0 <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f87d 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200002f0 	.word	0x200002f0
 800128c:	40013800 	.word	0x40013800

08001290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART2_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 800129c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART2_UART_Init+0x4c>)
 80012c8:	f001 f982 	bl	80025d0 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f000 f853 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000330 	.word	0x20000330
 80012e0:	40004400 	.word	0x40004400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_GPIO_Init+0x90>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a1d      	ldr	r2, [pc, #116]	; (8001374 <MX_GPIO_Init+0x90>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_GPIO_Init+0x90>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_GPIO_Init+0x90>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <MX_GPIO_Init+0x90>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_GPIO_Init+0x90>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_GPIO_Init+0x90>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <MX_GPIO_Init+0x90>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_GPIO_Init+0x90>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	480c      	ldr	r0, [pc, #48]	; (8001378 <MX_GPIO_Init+0x94>)
 8001348:	f000 fd10 	bl	8001d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2302      	movs	r3, #2
 800135c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	4619      	mov	r1, r3
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_GPIO_Init+0x94>)
 8001366:	f000 fb7d 	bl	8001a64 <HAL_GPIO_Init>

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	40011000 	.word	0x40011000

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_MspInit+0x5c>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <HAL_MspInit+0x5c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <HAL_MspInit+0x5c>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_MspInit+0x5c>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_MspInit+0x5c>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_MspInit+0x5c>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x60>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_MspInit+0x60>)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <HAL_UART_MspInit+0x118>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d13a      	bne.n	8001482 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <HAL_UART_MspInit+0x11c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a3d      	ldr	r2, [pc, #244]	; (8001508 <HAL_UART_MspInit+0x11c>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <HAL_UART_MspInit+0x11c>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_UART_MspInit+0x11c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <HAL_UART_MspInit+0x11c>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <HAL_UART_MspInit+0x11c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	4619      	mov	r1, r3
 8001450:	482e      	ldr	r0, [pc, #184]	; (800150c <HAL_UART_MspInit+0x120>)
 8001452:	f000 fb07 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4619      	mov	r1, r3
 800146a:	4828      	ldr	r0, [pc, #160]	; (800150c <HAL_UART_MspInit+0x120>)
 800146c:	f000 fafa 	bl	8001a64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2101      	movs	r1, #1
 8001474:	2025      	movs	r0, #37	; 0x25
 8001476:	f000 fa48 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800147a:	2025      	movs	r0, #37	; 0x25
 800147c:	f000 fa61 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001480:	e03c      	b.n	80014fc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_UART_MspInit+0x124>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d137      	bne.n	80014fc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_UART_MspInit+0x11c>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_UART_MspInit+0x11c>)
 8001492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001496:	61d3      	str	r3, [r2, #28]
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_UART_MspInit+0x11c>)
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_UART_MspInit+0x11c>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <HAL_UART_MspInit+0x11c>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_UART_MspInit+0x11c>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 80014bc:	2304      	movs	r3, #4
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	4619      	mov	r1, r3
 80014ce:	480f      	ldr	r0, [pc, #60]	; (800150c <HAL_UART_MspInit+0x120>)
 80014d0:	f000 fac8 	bl	8001a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80014d4:	2308      	movs	r3, #8
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	4619      	mov	r1, r3
 80014e6:	4809      	ldr	r0, [pc, #36]	; (800150c <HAL_UART_MspInit+0x120>)
 80014e8:	f000 fabc 	bl	8001a64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2101      	movs	r1, #1
 80014f0:	2026      	movs	r0, #38	; 0x26
 80014f2:	f000 fa0a 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f6:	2026      	movs	r0, #38	; 0x26
 80014f8:	f000 fa23 	bl	8001942 <HAL_NVIC_EnableIRQ>
}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40013800 	.word	0x40013800
 8001508:	40021000 	.word	0x40021000
 800150c:	40010800 	.word	0x40010800
 8001510:	40004400 	.word	0x40004400

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800155a:	f000 f8bf 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <USART1_IRQHandler+0x10>)
 800156a:	f001 f965 	bl	8002838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002f0 	.word	0x200002f0

08001578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <USART2_IRQHandler+0x10>)
 800157e:	f001 f95b 	bl	8002838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000330 	.word	0x20000330

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f001 fc3e 	bl	8002e3c <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20005000 	.word	0x20005000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000094 	.word	0x20000094
 80015f4:	20000388 	.word	0x20000388

080015f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001604:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001606:	e003      	b.n	8001610 <LoopCopyDataInit>

08001608 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800160a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800160c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800160e:	3104      	adds	r1, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001610:	480a      	ldr	r0, [pc, #40]	; (800163c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001614:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001616:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001618:	d3f6      	bcc.n	8001608 <CopyDataInit>
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800161c:	e002      	b.n	8001624 <LoopFillZerobss>

0800161e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001620:	f842 3b04 	str.w	r3, [r2], #4

08001624 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001626:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001628:	d3f9      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162a:	f7ff ffe5 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f001 fc0b 	bl	8002e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001632:	f7ff fda9 	bl	8001188 <main>
  bx lr
 8001636:	4770      	bx	lr
  ldr r3, =_sidata
 8001638:	08003f38 	.word	0x08003f38
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001640:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001644:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001648:	20000384 	.word	0x20000384

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f947 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	2000      	movs	r0, #0
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fe8c 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f95f 	bl	800195e <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f927 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000000 	.word	0x20000000
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000004 	.word	0x20000004

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000370 	.word	0x20000370

08001700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	20000370 	.word	0x20000370

08001714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fff0 	bl	8001700 <HAL_GetTick>
 8001720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d005      	beq.n	800173a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_Delay+0x44>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800173a:	bf00      	nop
 800173c:	f7ff ffe0 	bl	8001700 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	429a      	cmp	r2, r3
 800174a:	d8f7      	bhi.n	800173c <HAL_Delay+0x28>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <__NVIC_EnableIRQ+0x34>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff90 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff2d 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff42 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff90 	bl	800184c <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5f 	bl	80017f8 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff35 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800198a:	2b02      	cmp	r3, #2
 800198c:	d005      	beq.n	800199a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2204      	movs	r2, #4
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e051      	b.n	8001a3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 020e 	bic.w	r2, r2, #14
 80019a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <HAL_DMA_Abort_IT+0xd0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d029      	beq.n	8001a18 <HAL_DMA_Abort_IT+0xa0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <HAL_DMA_Abort_IT+0xd4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d022      	beq.n	8001a14 <HAL_DMA_Abort_IT+0x9c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <HAL_DMA_Abort_IT+0xd8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d01a      	beq.n	8001a0e <HAL_DMA_Abort_IT+0x96>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_DMA_Abort_IT+0xdc>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d012      	beq.n	8001a08 <HAL_DMA_Abort_IT+0x90>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1c      	ldr	r2, [pc, #112]	; (8001a58 <HAL_DMA_Abort_IT+0xe0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00a      	beq.n	8001a02 <HAL_DMA_Abort_IT+0x8a>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <HAL_DMA_Abort_IT+0xe4>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d102      	bne.n	80019fc <HAL_DMA_Abort_IT+0x84>
 80019f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019fa:	e00e      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 80019fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a00:	e00b      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a06:	e008      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0c:	e005      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a12:	e002      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a14:	2310      	movs	r3, #16
 8001a16:	e000      	b.n	8001a1a <HAL_DMA_Abort_IT+0xa2>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4a11      	ldr	r2, [pc, #68]	; (8001a60 <HAL_DMA_Abort_IT+0xe8>)
 8001a1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
    } 
  }
  return status;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40020008 	.word	0x40020008
 8001a4c:	4002001c 	.word	0x4002001c
 8001a50:	40020030 	.word	0x40020030
 8001a54:	40020044 	.word	0x40020044
 8001a58:	40020058 	.word	0x40020058
 8001a5c:	4002006c 	.word	0x4002006c
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b08b      	sub	sp, #44	; 0x2c
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a76:	e169      	b.n	8001d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8158 	bne.w	8001d46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4a9a      	ldr	r2, [pc, #616]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05e      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aa0:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d875      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aa6:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d058      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001aac:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_GPIO_Init+0x2a4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d86f      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ab2:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d052      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ab8:	4a94      	ldr	r2, [pc, #592]	; (8001d0c <HAL_GPIO_Init+0x2a8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d869      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001abe:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d04c      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ac4:	4a92      	ldr	r2, [pc, #584]	; (8001d10 <HAL_GPIO_Init+0x2ac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d863      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001aca:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d046      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
 8001ad0:	4a90      	ldr	r2, [pc, #576]	; (8001d14 <HAL_GPIO_Init+0x2b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d85d      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d82a      	bhi.n	8001b30 <HAL_GPIO_Init+0xcc>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d859      	bhi.n	8001b92 <HAL_GPIO_Init+0x12e>
 8001ade:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <HAL_GPIO_Init+0x80>)
 8001ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae4:	08001b5f 	.word	0x08001b5f
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b4b 	.word	0x08001b4b
 8001af0:	08001b8d 	.word	0x08001b8d
 8001af4:	08001b93 	.word	0x08001b93
 8001af8:	08001b93 	.word	0x08001b93
 8001afc:	08001b93 	.word	0x08001b93
 8001b00:	08001b93 	.word	0x08001b93
 8001b04:	08001b93 	.word	0x08001b93
 8001b08:	08001b93 	.word	0x08001b93
 8001b0c:	08001b93 	.word	0x08001b93
 8001b10:	08001b93 	.word	0x08001b93
 8001b14:	08001b93 	.word	0x08001b93
 8001b18:	08001b93 	.word	0x08001b93
 8001b1c:	08001b93 	.word	0x08001b93
 8001b20:	08001b93 	.word	0x08001b93
 8001b24:	08001b93 	.word	0x08001b93
 8001b28:	08001b41 	.word	0x08001b41
 8001b2c:	08001b55 	.word	0x08001b55
 8001b30:	4a79      	ldr	r2, [pc, #484]	; (8001d18 <HAL_GPIO_Init+0x2b4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b36:	e02c      	b.n	8001b92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	623b      	str	r3, [r7, #32]
          break;
 8001b3e:	e029      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	3304      	adds	r3, #4
 8001b46:	623b      	str	r3, [r7, #32]
          break;
 8001b48:	e024      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e01f      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	330c      	adds	r3, #12
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e01a      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b66:	2304      	movs	r3, #4
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e013      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d105      	bne.n	8001b80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b74:	2308      	movs	r3, #8
 8001b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	611a      	str	r2, [r3, #16]
          break;
 8001b7e:	e009      	b.n	8001b94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b80:	2308      	movs	r3, #8
 8001b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	615a      	str	r2, [r3, #20]
          break;
 8001b8a:	e003      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
          break;
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x130>
          break;
 8001b92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d801      	bhi.n	8001b9e <HAL_GPIO_Init+0x13a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	e001      	b.n	8001ba2 <HAL_GPIO_Init+0x13e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d802      	bhi.n	8001bb0 <HAL_GPIO_Init+0x14c>
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	e002      	b.n	8001bb6 <HAL_GPIO_Init+0x152>
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3b08      	subs	r3, #8
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	210f      	movs	r1, #15
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	6a39      	ldr	r1, [r7, #32]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80b1 	beq.w	8001d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a4c      	ldr	r2, [pc, #304]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_GPIO_Init+0x2b8>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bfc:	4a48      	ldr	r2, [pc, #288]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	220f      	movs	r2, #15
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <HAL_GPIO_Init+0x2c0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d013      	beq.n	8001c50 <HAL_GPIO_Init+0x1ec>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a3f      	ldr	r2, [pc, #252]	; (8001d28 <HAL_GPIO_Init+0x2c4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d00d      	beq.n	8001c4c <HAL_GPIO_Init+0x1e8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	; (8001d2c <HAL_GPIO_Init+0x2c8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x1e4>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <HAL_GPIO_Init+0x2cc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_GPIO_Init+0x1e0>
 8001c40:	2303      	movs	r3, #3
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c44:	2304      	movs	r3, #4
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1ee>
 8001c50:	2300      	movs	r3, #0
 8001c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c62:	492f      	ldr	r1, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2bc>)
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	492c      	ldr	r1, [pc, #176]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4928      	ldr	r1, [pc, #160]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4922      	ldr	r1, [pc, #136]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	491e      	ldr	r1, [pc, #120]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4918      	ldr	r1, [pc, #96]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4914      	ldr	r1, [pc, #80]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d021      	beq.n	8001d38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	490e      	ldr	r1, [pc, #56]	; (8001d34 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e021      	b.n	8001d46 <HAL_GPIO_Init+0x2e2>
 8001d02:	bf00      	nop
 8001d04:	10320000 	.word	0x10320000
 8001d08:	10310000 	.word	0x10310000
 8001d0c:	10220000 	.word	0x10220000
 8001d10:	10210000 	.word	0x10210000
 8001d14:	10120000 	.word	0x10120000
 8001d18:	10110000 	.word	0x10110000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	40010800 	.word	0x40010800
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40011000 	.word	0x40011000
 8001d30:	40011400 	.word	0x40011400
 8001d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4909      	ldr	r1, [pc, #36]	; (8001d68 <HAL_GPIO_Init+0x304>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	fa22 f303 	lsr.w	r3, r2, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f47f ae8e 	bne.w	8001a78 <HAL_GPIO_Init+0x14>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	372c      	adds	r7, #44	; 0x2c
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7c:	787b      	ldrb	r3, [r7, #1]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d88:	e003      	b.n	8001d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d8a:	887b      	ldrh	r3, [r7, #2]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e26c      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 8087 	beq.w	8001eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbc:	4b92      	ldr	r3, [pc, #584]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d00c      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d112      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
 8001dd4:	4b8c      	ldr	r3, [pc, #560]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d10b      	bne.n	8001dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de2:	4b89      	ldr	r3, [pc, #548]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d06c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d168      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e246      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x76>
 8001e04:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a7f      	ldr	r2, [pc, #508]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x98>
 8001e1a:	4b7b      	ldr	r3, [pc, #492]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7a      	ldr	r2, [pc, #488]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b78      	ldr	r3, [pc, #480]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a77      	ldr	r2, [pc, #476]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0xbc>
 8001e3e:	4b72      	ldr	r3, [pc, #456]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a71      	ldr	r2, [pc, #452]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b6f      	ldr	r3, [pc, #444]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd4>
 8001e58:	4b6b      	ldr	r3, [pc, #428]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a6a      	ldr	r2, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a67      	ldr	r2, [pc, #412]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fc42 	bl	8001700 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff fc3e 	bl	8001700 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	; 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1fa      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe4>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fc2e 	bl	8001700 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fc2a 	bl	8001700 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	; 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e1e6      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x10c>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d063      	beq.n	8001f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00b      	beq.n	8001efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ee2:	4b49      	ldr	r3, [pc, #292]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
 8001eee:	4b46      	ldr	r3, [pc, #280]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d116      	bne.n	8001f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d001      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e1ba      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4939      	ldr	r1, [pc, #228]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f26:	e03a      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fbe3 	bl	8001700 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3e:	f7ff fbdf 	bl	8001700 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e19b      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f0      	beq.n	8001f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4927      	ldr	r1, [pc, #156]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]
 8001f70:	e015      	b.n	8001f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f72:	4b26      	ldr	r3, [pc, #152]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fbc2 	bl	8001700 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f80:	f7ff fbbe 	bl	8001700 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e17a      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03a      	beq.n	8002020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d019      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb8:	f7ff fba2 	bl	8001700 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc0:	f7ff fb9e 	bl	8001700 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e15a      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f000 fad8 	bl	8002594 <RCC_Delay>
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fec:	f7ff fb88 	bl	8001700 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fb84 	bl	8001700 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d908      	bls.n	8002014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e140      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	42420000 	.word	0x42420000
 8002010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e9      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80a6 	beq.w	800217a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202e:	2300      	movs	r3, #0
 8002030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002032:	4b97      	ldr	r3, [pc, #604]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10d      	bne.n	800205a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b94      	ldr	r3, [pc, #592]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a93      	ldr	r2, [pc, #588]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a8a      	ldr	r2, [pc, #552]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7ff fb45 	bl	8001700 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff fb41 	bl	8001700 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b64      	cmp	r3, #100	; 0x64
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0fd      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x312>
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	e02d      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x334>
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4a75      	ldr	r2, [pc, #468]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6213      	str	r3, [r2, #32]
 80020c2:	4b73      	ldr	r3, [pc, #460]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	4a72      	ldr	r2, [pc, #456]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	6213      	str	r3, [r2, #32]
 80020ce:	e01c      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCC_OscConfig+0x356>
 80020d8:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a6c      	ldr	r2, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a69      	ldr	r2, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6213      	str	r3, [r2, #32]
 80020f0:	e00b      	b.n	800210a <HAL_RCC_OscConfig+0x36e>
 80020f2:	4b67      	ldr	r3, [pc, #412]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a66      	ldr	r2, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d015      	beq.n	800213e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7ff faf5 	bl	8001700 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff faf1 	bl	8001700 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	; 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0ab      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ee      	beq.n	800211a <HAL_RCC_OscConfig+0x37e>
 800213c:	e014      	b.n	8002168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213e:	f7ff fadf 	bl	8001700 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff fadb 	bl	8001700 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e095      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d105      	bne.n	800217a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a47      	ldr	r2, [pc, #284]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 8081 	beq.w	8002286 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 030c 	and.w	r3, r3, #12
 800218c:	2b08      	cmp	r3, #8
 800218e:	d061      	beq.n	8002254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d146      	bne.n	8002226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002198:	4b3f      	ldr	r3, [pc, #252]	; (8002298 <HAL_RCC_OscConfig+0x4fc>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff faaf 	bl	8001700 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff faab 	bl	8001700 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e067      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d108      	bne.n	80021e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	492d      	ldr	r1, [pc, #180]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a19      	ldr	r1, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	430b      	orrs	r3, r1
 80021f2:	4927      	ldr	r1, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_OscConfig+0x4fc>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fa7f 	bl	8001700 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fa7b 	bl	8001700 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e037      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x46a>
 8002224:	e02f      	b.n	8002286 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_RCC_OscConfig+0x4fc>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7ff fa68 	bl	8001700 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002234:	f7ff fa64 	bl	8001700 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e020      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x498>
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e013      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	40007000 	.word	0x40007000
 8002298:	42420060 	.word	0x42420060

0800229c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0d0      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002302:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800231a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d115      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e073      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4936      	ldr	r1, [pc, #216]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800238c:	f7ff f9b8 	bl	8001700 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7ff f9b4 	bl	8001700 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e053      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d210      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	4922      	ldr	r1, [pc, #136]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_ClockConfig+0x1c0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f821 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490a      	ldr	r1, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1c8>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1cc>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff f916 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000
 8002460:	40021000 	.word	0x40021000
 8002464:	08003d88 	.word	0x08003d88
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b490      	push	{r4, r7}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002478:	1d3c      	adds	r4, r7, #4
 800247a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800247c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002480:	f240 2301 	movw	r3, #513	; 0x201
 8002484:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800249a:	4b22      	ldr	r3, [pc, #136]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0x40>
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d003      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x46>
 80024ae:	e02d      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b2:	623b      	str	r3, [r7, #32]
      break;
 80024b4:	e02d      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	0c9b      	lsrs	r3, r3, #18
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024c2:	4413      	add	r3, r2
 80024c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d013      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d4:	4b13      	ldr	r3, [pc, #76]	; (8002524 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	0c5b      	lsrs	r3, r3, #17
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024e2:	4413      	add	r3, r2
 80024e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	fb02 f203 	mul.w	r2, r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
 80024fa:	e004      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4a0b      	ldr	r2, [pc, #44]	; (800252c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	623b      	str	r3, [r7, #32]
      break;
 800250a:	e002      	b.n	8002512 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0xb8>)
 800250e:	623b      	str	r3, [r7, #32]
      break;
 8002510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002512:	6a3b      	ldr	r3, [r7, #32]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3728      	adds	r7, #40	; 0x28
 8002518:	46bd      	mov	sp, r7
 800251a:	bc90      	pop	{r4, r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	08003d6c 	.word	0x08003d6c
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	003d0900 	.word	0x003d0900

08002530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_RCC_GetHCLKFreq+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	20000000 	.word	0x20000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002548:	f7ff fff2 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	08003d98 	.word	0x08003d98

0800256c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002570:	f7ff ffde 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	0adb      	lsrs	r3, r3, #11
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08003d98 	.word	0x08003d98

08002594 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <RCC_Delay+0x34>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <RCC_Delay+0x38>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0a5b      	lsrs	r3, r3, #9
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025b0:	bf00      	nop
  }
  while (Delay --);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1e5a      	subs	r2, r3, #1
 80025b6:	60fa      	str	r2, [r7, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <RCC_Delay+0x1c>
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	20000000 	.word	0x20000000
 80025cc:	10624dd3 	.word	0x10624dd3

080025d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e03f      	b.n	8002662 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe fef8 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2224      	movs	r2, #36	; 0x24
 8002600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fb83 	bl	8002d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b08a      	sub	sp, #40	; 0x28
 800266e:	af02      	add	r7, sp, #8
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b20      	cmp	r3, #32
 8002688:	d17c      	bne.n	8002784 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <HAL_UART_Transmit+0x2c>
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e075      	b.n	8002786 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_UART_Transmit+0x3e>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e06e      	b.n	8002786 <HAL_UART_Transmit+0x11c>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2221      	movs	r2, #33	; 0x21
 80026ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026be:	f7ff f81f 	bl	8001700 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d8:	d108      	bne.n	80026ec <HAL_UART_Transmit+0x82>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e003      	b.n	80026f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026fc:	e02a      	b.n	8002754 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2200      	movs	r2, #0
 8002706:	2180      	movs	r1, #128	; 0x80
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f9a7 	bl	8002a5c <UART_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e036      	b.n	8002786 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800272c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3302      	adds	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e007      	b.n	8002746 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3301      	adds	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1cf      	bne.n	80026fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f977 	bl	8002a5c <UART_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e006      	b.n	8002786 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	e000      	b.n	8002786 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d140      	bne.n	800282a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Receive_IT+0x26>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e039      	b.n	800282c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Receive_IT+0x38>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e032      	b.n	800282c <HAL_UART_Receive_IT+0x9e>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	88fa      	ldrh	r2, [r7, #6]
 80027d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2222      	movs	r2, #34	; 0x22
 80027ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002804:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0220 	orr.w	r2, r2, #32
 8002824:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	e000      	b.n	800282c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
	...

08002838 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10d      	bne.n	800288a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_UART_IRQHandler+0x52>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f9cc 	bl	8002c20 <UART_Receive_IT>
      return;
 8002888:	e0d0      	b.n	8002a2c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80b0 	beq.w	80029f2 <HAL_UART_IRQHandler+0x1ba>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_UART_IRQHandler+0x70>
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80a5 	beq.w	80029f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_UART_IRQHandler+0x90>
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_UART_IRQHandler+0xb0>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	f043 0202 	orr.w	r2, r3, #2
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_UART_IRQHandler+0xd0>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00f      	beq.n	8002932 <HAL_UART_IRQHandler+0xfa>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <HAL_UART_IRQHandler+0xee>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	f043 0208 	orr.w	r2, r3, #8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d077      	beq.n	8002a2a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0320 	and.w	r3, r3, #32
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_UART_IRQHandler+0x11c>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f966 	bl	8002c20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d102      	bne.n	800297c <HAL_UART_IRQHandler+0x144>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d031      	beq.n	80029e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8b7 	bl	8002af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800299e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	4a21      	ldr	r2, [pc, #132]	; (8002a34 <HAL_UART_IRQHandler+0x1fc>)
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe ffdf 	bl	8001978 <HAL_DMA_Abort_IT>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d016      	beq.n	80029ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029ca:	4610      	mov	r0, r2
 80029cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ce:	e00e      	b.n	80029ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f83a 	bl	8002a4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d6:	e00a      	b.n	80029ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f836 	bl	8002a4a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029de:	e006      	b.n	80029ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f832 	bl	8002a4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80029ec:	e01d      	b.n	8002a2a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ee:	bf00      	nop
    return;
 80029f0:	e01b      	b.n	8002a2a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <HAL_UART_IRQHandler+0x1d6>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8a3 	bl	8002b52 <UART_Transmit_IT>
    return;
 8002a0c:	e00e      	b.n	8002a2c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <HAL_UART_IRQHandler+0x1f4>
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8e4 	bl	8002bf0 <UART_EndTransmit_IT>
    return;
 8002a28:	e000      	b.n	8002a2c <HAL_UART_IRQHandler+0x1f4>
    return;
 8002a2a:	bf00      	nop
  }
}
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08002b2b 	.word	0x08002b2b

08002a38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a6c:	e02c      	b.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d028      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a7c:	f7fe fe40 	bl	8001700 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d21d      	bcs.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e00f      	b.n	8002ae8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d0c3      	beq.n	8002a6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff ff80 	bl	8002a4a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b085      	sub	sp, #20
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b21      	cmp	r3, #33	; 0x21
 8002b64:	d13e      	bne.n	8002be4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	d114      	bne.n	8002b9a <UART_Transmit_IT+0x48>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d110      	bne.n	8002b9a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	621a      	str	r2, [r3, #32]
 8002b98:	e008      	b.n	8002bac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	1c59      	adds	r1, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6211      	str	r1, [r2, #32]
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	e000      	b.n	8002be6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002be4:	2302      	movs	r3, #2
  }
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff11 	bl	8002a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b22      	cmp	r3, #34	; 0x22
 8002c32:	d170      	bne.n	8002d16 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c3c:	d117      	bne.n	8002c6e <UART_Receive_IT+0x4e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d113      	bne.n	8002c6e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	1c9a      	adds	r2, r3, #2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c6c:	e026      	b.n	8002cbc <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d007      	beq.n	8002c92 <UART_Receive_IT+0x72>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <UART_Receive_IT+0x80>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e008      	b.n	8002cb2 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d120      	bne.n	8002d12 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0220 	bic.w	r2, r2, #32
 8002cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7fe fa33 	bl	8001174 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	e002      	b.n	8002d18 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d5a:	f023 030c 	bic.w	r3, r3, #12
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <UART_SetConfig+0x114>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d103      	bne.n	8002d90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d88:	f7ff fbf0 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	e002      	b.n	8002d96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d90:	f7ff fbd8 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8002d94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009a      	lsls	r2, r3, #2
 8002da0:	441a      	add	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	4a22      	ldr	r2, [pc, #136]	; (8002e38 <UART_SetConfig+0x118>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	0119      	lsls	r1, r3, #4
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <UART_SetConfig+0x118>)
 8002dce:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	3332      	adds	r3, #50	; 0x32
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <UART_SetConfig+0x118>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dec:	4419      	add	r1, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009a      	lsls	r2, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <UART_SetConfig+0x118>)
 8002e06:	fba3 0302 	umull	r0, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2064      	movs	r0, #100	; 0x64
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <UART_SetConfig+0x118>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	f003 020f 	and.w	r2, r3, #15
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	440a      	add	r2, r1
 8002e2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40013800 	.word	0x40013800
 8002e38:	51eb851f 	.word	0x51eb851f

08002e3c <__errno>:
 8002e3c:	4b01      	ldr	r3, [pc, #4]	; (8002e44 <__errno+0x8>)
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	2000000c 	.word	0x2000000c

08002e48 <__libc_init_array>:
 8002e48:	b570      	push	{r4, r5, r6, lr}
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	4d0c      	ldr	r5, [pc, #48]	; (8002e80 <__libc_init_array+0x38>)
 8002e4e:	4c0d      	ldr	r4, [pc, #52]	; (8002e84 <__libc_init_array+0x3c>)
 8002e50:	1b64      	subs	r4, r4, r5
 8002e52:	10a4      	asrs	r4, r4, #2
 8002e54:	42a6      	cmp	r6, r4
 8002e56:	d109      	bne.n	8002e6c <__libc_init_array+0x24>
 8002e58:	f000 ff52 	bl	8003d00 <_init>
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	4d0a      	ldr	r5, [pc, #40]	; (8002e88 <__libc_init_array+0x40>)
 8002e60:	4c0a      	ldr	r4, [pc, #40]	; (8002e8c <__libc_init_array+0x44>)
 8002e62:	1b64      	subs	r4, r4, r5
 8002e64:	10a4      	asrs	r4, r4, #2
 8002e66:	42a6      	cmp	r6, r4
 8002e68:	d105      	bne.n	8002e76 <__libc_init_array+0x2e>
 8002e6a:	bd70      	pop	{r4, r5, r6, pc}
 8002e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e70:	4798      	blx	r3
 8002e72:	3601      	adds	r6, #1
 8002e74:	e7ee      	b.n	8002e54 <__libc_init_array+0xc>
 8002e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7a:	4798      	blx	r3
 8002e7c:	3601      	adds	r6, #1
 8002e7e:	e7f2      	b.n	8002e66 <__libc_init_array+0x1e>
 8002e80:	08003f30 	.word	0x08003f30
 8002e84:	08003f30 	.word	0x08003f30
 8002e88:	08003f30 	.word	0x08003f30
 8002e8c:	08003f34 	.word	0x08003f34

08002e90 <memset>:
 8002e90:	4603      	mov	r3, r0
 8002e92:	4402      	add	r2, r0
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d100      	bne.n	8002e9a <memset+0xa>
 8002e98:	4770      	bx	lr
 8002e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9e:	e7f9      	b.n	8002e94 <memset+0x4>

08002ea0 <siscanf>:
 8002ea0:	b40e      	push	{r1, r2, r3}
 8002ea2:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002ea6:	b530      	push	{r4, r5, lr}
 8002ea8:	b09c      	sub	sp, #112	; 0x70
 8002eaa:	ac1f      	add	r4, sp, #124	; 0x7c
 8002eac:	f854 5b04 	ldr.w	r5, [r4], #4
 8002eb0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002eb4:	9002      	str	r0, [sp, #8]
 8002eb6:	9006      	str	r0, [sp, #24]
 8002eb8:	f7fd f948 	bl	800014c <strlen>
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <siscanf+0x4c>)
 8002ebe:	9003      	str	r0, [sp, #12]
 8002ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ec6:	9314      	str	r3, [sp, #80]	; 0x50
 8002ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ecc:	9007      	str	r0, [sp, #28]
 8002ece:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <siscanf+0x50>)
 8002ed0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002ed4:	462a      	mov	r2, r5
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	a902      	add	r1, sp, #8
 8002eda:	6800      	ldr	r0, [r0, #0]
 8002edc:	9401      	str	r4, [sp, #4]
 8002ede:	f000 f87d 	bl	8002fdc <__ssvfiscanf_r>
 8002ee2:	b01c      	add	sp, #112	; 0x70
 8002ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ee8:	b003      	add	sp, #12
 8002eea:	4770      	bx	lr
 8002eec:	08002ef5 	.word	0x08002ef5
 8002ef0:	2000000c 	.word	0x2000000c

08002ef4 <__seofread>:
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	4770      	bx	lr

08002ef8 <strstr>:
 8002ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efa:	780c      	ldrb	r4, [r1, #0]
 8002efc:	b164      	cbz	r4, 8002f18 <strstr+0x20>
 8002efe:	4603      	mov	r3, r0
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	1c5e      	adds	r6, r3, #1
 8002f06:	b90a      	cbnz	r2, 8002f0c <strstr+0x14>
 8002f08:	4610      	mov	r0, r2
 8002f0a:	e005      	b.n	8002f18 <strstr+0x20>
 8002f0c:	4294      	cmp	r4, r2
 8002f0e:	d108      	bne.n	8002f22 <strstr+0x2a>
 8002f10:	460d      	mov	r5, r1
 8002f12:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002f16:	b902      	cbnz	r2, 8002f1a <strstr+0x22>
 8002f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f1a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002f1e:	4297      	cmp	r7, r2
 8002f20:	d0f7      	beq.n	8002f12 <strstr+0x1a>
 8002f22:	4633      	mov	r3, r6
 8002f24:	e7ec      	b.n	8002f00 <strstr+0x8>

08002f26 <_sungetc_r>:
 8002f26:	b538      	push	{r3, r4, r5, lr}
 8002f28:	1c4b      	adds	r3, r1, #1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	d103      	bne.n	8002f36 <_sungetc_r+0x10>
 8002f2e:	f04f 35ff 	mov.w	r5, #4294967295
 8002f32:	4628      	mov	r0, r5
 8002f34:	bd38      	pop	{r3, r4, r5, pc}
 8002f36:	8993      	ldrh	r3, [r2, #12]
 8002f38:	b2cd      	uxtb	r5, r1
 8002f3a:	f023 0320 	bic.w	r3, r3, #32
 8002f3e:	8193      	strh	r3, [r2, #12]
 8002f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f42:	6852      	ldr	r2, [r2, #4]
 8002f44:	b18b      	cbz	r3, 8002f6a <_sungetc_r+0x44>
 8002f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	dd08      	ble.n	8002f5e <_sungetc_r+0x38>
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	1e5a      	subs	r2, r3, #1
 8002f50:	6022      	str	r2, [r4, #0]
 8002f52:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002f56:	6863      	ldr	r3, [r4, #4]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	6063      	str	r3, [r4, #4]
 8002f5c:	e7e9      	b.n	8002f32 <_sungetc_r+0xc>
 8002f5e:	4621      	mov	r1, r4
 8002f60:	f000 fc40 	bl	80037e4 <__submore>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	d0f1      	beq.n	8002f4c <_sungetc_r+0x26>
 8002f68:	e7e1      	b.n	8002f2e <_sungetc_r+0x8>
 8002f6a:	6921      	ldr	r1, [r4, #16]
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	b151      	cbz	r1, 8002f86 <_sungetc_r+0x60>
 8002f70:	4299      	cmp	r1, r3
 8002f72:	d208      	bcs.n	8002f86 <_sungetc_r+0x60>
 8002f74:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002f78:	42a9      	cmp	r1, r5
 8002f7a:	d104      	bne.n	8002f86 <_sungetc_r+0x60>
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	3201      	adds	r2, #1
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	6062      	str	r2, [r4, #4]
 8002f84:	e7d5      	b.n	8002f32 <_sungetc_r+0xc>
 8002f86:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002f8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f8e:	6363      	str	r3, [r4, #52]	; 0x34
 8002f90:	2303      	movs	r3, #3
 8002f92:	63a3      	str	r3, [r4, #56]	; 0x38
 8002f94:	4623      	mov	r3, r4
 8002f96:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e7dc      	b.n	8002f5a <_sungetc_r+0x34>

08002fa0 <__ssrefill_r>:
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002fa6:	b169      	cbz	r1, 8002fc4 <__ssrefill_r+0x24>
 8002fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fac:	4299      	cmp	r1, r3
 8002fae:	d001      	beq.n	8002fb4 <__ssrefill_r+0x14>
 8002fb0:	f000 fc6e 	bl	8003890 <_free_r>
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	b113      	cbz	r3, 8002fc4 <__ssrefill_r+0x24>
 8002fbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd10      	pop	{r4, pc}
 8002fc4:	6923      	ldr	r3, [r4, #16]
 8002fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fca:	6023      	str	r3, [r4, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6063      	str	r3, [r4, #4]
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	f043 0320 	orr.w	r3, r3, #32
 8002fd6:	81a3      	strh	r3, [r4, #12]
 8002fd8:	e7f3      	b.n	8002fc2 <__ssrefill_r+0x22>
	...

08002fdc <__ssvfiscanf_r>:
 8002fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002fea:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002fee:	49b3      	ldr	r1, [pc, #716]	; (80032bc <__ssvfiscanf_r+0x2e0>)
 8002ff0:	f10d 0804 	add.w	r8, sp, #4
 8002ff4:	91a0      	str	r1, [sp, #640]	; 0x280
 8002ff6:	49b2      	ldr	r1, [pc, #712]	; (80032c0 <__ssvfiscanf_r+0x2e4>)
 8002ff8:	4fb2      	ldr	r7, [pc, #712]	; (80032c4 <__ssvfiscanf_r+0x2e8>)
 8002ffa:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80032c8 <__ssvfiscanf_r+0x2ec>
 8002ffe:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003002:	91a1      	str	r1, [sp, #644]	; 0x284
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f892 a000 	ldrb.w	sl, [r2]
 800300a:	f1ba 0f00 	cmp.w	sl, #0
 800300e:	f000 8153 	beq.w	80032b8 <__ssvfiscanf_r+0x2dc>
 8003012:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8003016:	1c55      	adds	r5, r2, #1
 8003018:	f013 0308 	ands.w	r3, r3, #8
 800301c:	d019      	beq.n	8003052 <__ssvfiscanf_r+0x76>
 800301e:	6863      	ldr	r3, [r4, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	dd0f      	ble.n	8003044 <__ssvfiscanf_r+0x68>
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	5cba      	ldrb	r2, [r7, r2]
 800302a:	0712      	lsls	r2, r2, #28
 800302c:	d401      	bmi.n	8003032 <__ssvfiscanf_r+0x56>
 800302e:	462a      	mov	r2, r5
 8003030:	e7e9      	b.n	8003006 <__ssvfiscanf_r+0x2a>
 8003032:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003034:	3301      	adds	r3, #1
 8003036:	3201      	adds	r2, #1
 8003038:	9245      	str	r2, [sp, #276]	; 0x114
 800303a:	6862      	ldr	r2, [r4, #4]
 800303c:	6023      	str	r3, [r4, #0]
 800303e:	3a01      	subs	r2, #1
 8003040:	6062      	str	r2, [r4, #4]
 8003042:	e7ec      	b.n	800301e <__ssvfiscanf_r+0x42>
 8003044:	4621      	mov	r1, r4
 8003046:	4630      	mov	r0, r6
 8003048:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800304a:	4798      	blx	r3
 800304c:	2800      	cmp	r0, #0
 800304e:	d0e9      	beq.n	8003024 <__ssvfiscanf_r+0x48>
 8003050:	e7ed      	b.n	800302e <__ssvfiscanf_r+0x52>
 8003052:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003056:	f040 8086 	bne.w	8003166 <__ssvfiscanf_r+0x18a>
 800305a:	9341      	str	r3, [sp, #260]	; 0x104
 800305c:	9343      	str	r3, [sp, #268]	; 0x10c
 800305e:	7853      	ldrb	r3, [r2, #1]
 8003060:	2b2a      	cmp	r3, #42	; 0x2a
 8003062:	bf04      	itt	eq
 8003064:	2310      	moveq	r3, #16
 8003066:	1c95      	addeq	r5, r2, #2
 8003068:	f04f 020a 	mov.w	r2, #10
 800306c:	bf08      	it	eq
 800306e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003070:	46ab      	mov	fp, r5
 8003072:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003076:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800307a:	2b09      	cmp	r3, #9
 800307c:	d91d      	bls.n	80030ba <__ssvfiscanf_r+0xde>
 800307e:	2203      	movs	r2, #3
 8003080:	4891      	ldr	r0, [pc, #580]	; (80032c8 <__ssvfiscanf_r+0x2ec>)
 8003082:	f000 fbe9 	bl	8003858 <memchr>
 8003086:	b140      	cbz	r0, 800309a <__ssvfiscanf_r+0xbe>
 8003088:	2301      	movs	r3, #1
 800308a:	465d      	mov	r5, fp
 800308c:	eba0 0009 	sub.w	r0, r0, r9
 8003090:	fa03 f000 	lsl.w	r0, r3, r0
 8003094:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003096:	4318      	orrs	r0, r3
 8003098:	9041      	str	r0, [sp, #260]	; 0x104
 800309a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800309e:	2b78      	cmp	r3, #120	; 0x78
 80030a0:	d806      	bhi.n	80030b0 <__ssvfiscanf_r+0xd4>
 80030a2:	2b57      	cmp	r3, #87	; 0x57
 80030a4:	d810      	bhi.n	80030c8 <__ssvfiscanf_r+0xec>
 80030a6:	2b25      	cmp	r3, #37	; 0x25
 80030a8:	d05d      	beq.n	8003166 <__ssvfiscanf_r+0x18a>
 80030aa:	d857      	bhi.n	800315c <__ssvfiscanf_r+0x180>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d075      	beq.n	800319c <__ssvfiscanf_r+0x1c0>
 80030b0:	2303      	movs	r3, #3
 80030b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80030b4:	230a      	movs	r3, #10
 80030b6:	9342      	str	r3, [sp, #264]	; 0x108
 80030b8:	e082      	b.n	80031c0 <__ssvfiscanf_r+0x1e4>
 80030ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80030bc:	465d      	mov	r5, fp
 80030be:	fb02 1303 	mla	r3, r2, r3, r1
 80030c2:	3b30      	subs	r3, #48	; 0x30
 80030c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80030c6:	e7d3      	b.n	8003070 <__ssvfiscanf_r+0x94>
 80030c8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80030cc:	2a20      	cmp	r2, #32
 80030ce:	d8ef      	bhi.n	80030b0 <__ssvfiscanf_r+0xd4>
 80030d0:	a101      	add	r1, pc, #4	; (adr r1, 80030d8 <__ssvfiscanf_r+0xfc>)
 80030d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080031ab 	.word	0x080031ab
 80030dc:	080030b1 	.word	0x080030b1
 80030e0:	080030b1 	.word	0x080030b1
 80030e4:	08003209 	.word	0x08003209
 80030e8:	080030b1 	.word	0x080030b1
 80030ec:	080030b1 	.word	0x080030b1
 80030f0:	080030b1 	.word	0x080030b1
 80030f4:	080030b1 	.word	0x080030b1
 80030f8:	080030b1 	.word	0x080030b1
 80030fc:	080030b1 	.word	0x080030b1
 8003100:	080030b1 	.word	0x080030b1
 8003104:	0800321f 	.word	0x0800321f
 8003108:	080031f5 	.word	0x080031f5
 800310c:	08003163 	.word	0x08003163
 8003110:	08003163 	.word	0x08003163
 8003114:	08003163 	.word	0x08003163
 8003118:	080030b1 	.word	0x080030b1
 800311c:	080031f9 	.word	0x080031f9
 8003120:	080030b1 	.word	0x080030b1
 8003124:	080030b1 	.word	0x080030b1
 8003128:	080030b1 	.word	0x080030b1
 800312c:	080030b1 	.word	0x080030b1
 8003130:	0800322f 	.word	0x0800322f
 8003134:	08003201 	.word	0x08003201
 8003138:	080031a3 	.word	0x080031a3
 800313c:	080030b1 	.word	0x080030b1
 8003140:	080030b1 	.word	0x080030b1
 8003144:	0800322b 	.word	0x0800322b
 8003148:	080030b1 	.word	0x080030b1
 800314c:	080031f5 	.word	0x080031f5
 8003150:	080030b1 	.word	0x080030b1
 8003154:	080030b1 	.word	0x080030b1
 8003158:	080031ab 	.word	0x080031ab
 800315c:	3b45      	subs	r3, #69	; 0x45
 800315e:	2b02      	cmp	r3, #2
 8003160:	d8a6      	bhi.n	80030b0 <__ssvfiscanf_r+0xd4>
 8003162:	2305      	movs	r3, #5
 8003164:	e02b      	b.n	80031be <__ssvfiscanf_r+0x1e2>
 8003166:	6863      	ldr	r3, [r4, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	dd0d      	ble.n	8003188 <__ssvfiscanf_r+0x1ac>
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	4552      	cmp	r2, sl
 8003172:	f040 80a1 	bne.w	80032b8 <__ssvfiscanf_r+0x2dc>
 8003176:	3301      	adds	r3, #1
 8003178:	6862      	ldr	r2, [r4, #4]
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800317e:	3a01      	subs	r2, #1
 8003180:	3301      	adds	r3, #1
 8003182:	6062      	str	r2, [r4, #4]
 8003184:	9345      	str	r3, [sp, #276]	; 0x114
 8003186:	e752      	b.n	800302e <__ssvfiscanf_r+0x52>
 8003188:	4621      	mov	r1, r4
 800318a:	4630      	mov	r0, r6
 800318c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800318e:	4798      	blx	r3
 8003190:	2800      	cmp	r0, #0
 8003192:	d0eb      	beq.n	800316c <__ssvfiscanf_r+0x190>
 8003194:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003196:	2800      	cmp	r0, #0
 8003198:	f040 8084 	bne.w	80032a4 <__ssvfiscanf_r+0x2c8>
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	e086      	b.n	80032b0 <__ssvfiscanf_r+0x2d4>
 80031a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	9241      	str	r2, [sp, #260]	; 0x104
 80031aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80031ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b0:	9241      	str	r2, [sp, #260]	; 0x104
 80031b2:	2210      	movs	r2, #16
 80031b4:	2b6f      	cmp	r3, #111	; 0x6f
 80031b6:	bf34      	ite	cc
 80031b8:	2303      	movcc	r3, #3
 80031ba:	2304      	movcs	r3, #4
 80031bc:	9242      	str	r2, [sp, #264]	; 0x108
 80031be:	9347      	str	r3, [sp, #284]	; 0x11c
 80031c0:	6863      	ldr	r3, [r4, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dd41      	ble.n	800324a <__ssvfiscanf_r+0x26e>
 80031c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80031c8:	0659      	lsls	r1, r3, #25
 80031ca:	d404      	bmi.n	80031d6 <__ssvfiscanf_r+0x1fa>
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	5cba      	ldrb	r2, [r7, r2]
 80031d2:	0712      	lsls	r2, r2, #28
 80031d4:	d440      	bmi.n	8003258 <__ssvfiscanf_r+0x27c>
 80031d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80031d8:	2b02      	cmp	r3, #2
 80031da:	dc4f      	bgt.n	800327c <__ssvfiscanf_r+0x2a0>
 80031dc:	466b      	mov	r3, sp
 80031de:	4622      	mov	r2, r4
 80031e0:	4630      	mov	r0, r6
 80031e2:	a941      	add	r1, sp, #260	; 0x104
 80031e4:	f000 f874 	bl	80032d0 <_scanf_chars>
 80031e8:	2801      	cmp	r0, #1
 80031ea:	d065      	beq.n	80032b8 <__ssvfiscanf_r+0x2dc>
 80031ec:	2802      	cmp	r0, #2
 80031ee:	f47f af1e 	bne.w	800302e <__ssvfiscanf_r+0x52>
 80031f2:	e7cf      	b.n	8003194 <__ssvfiscanf_r+0x1b8>
 80031f4:	220a      	movs	r2, #10
 80031f6:	e7dd      	b.n	80031b4 <__ssvfiscanf_r+0x1d8>
 80031f8:	2300      	movs	r3, #0
 80031fa:	9342      	str	r3, [sp, #264]	; 0x108
 80031fc:	2303      	movs	r3, #3
 80031fe:	e7de      	b.n	80031be <__ssvfiscanf_r+0x1e2>
 8003200:	2308      	movs	r3, #8
 8003202:	9342      	str	r3, [sp, #264]	; 0x108
 8003204:	2304      	movs	r3, #4
 8003206:	e7da      	b.n	80031be <__ssvfiscanf_r+0x1e2>
 8003208:	4629      	mov	r1, r5
 800320a:	4640      	mov	r0, r8
 800320c:	f000 f9aa 	bl	8003564 <__sccl>
 8003210:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003212:	4605      	mov	r5, r0
 8003214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003218:	9341      	str	r3, [sp, #260]	; 0x104
 800321a:	2301      	movs	r3, #1
 800321c:	e7cf      	b.n	80031be <__ssvfiscanf_r+0x1e2>
 800321e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003224:	9341      	str	r3, [sp, #260]	; 0x104
 8003226:	2300      	movs	r3, #0
 8003228:	e7c9      	b.n	80031be <__ssvfiscanf_r+0x1e2>
 800322a:	2302      	movs	r3, #2
 800322c:	e7c7      	b.n	80031be <__ssvfiscanf_r+0x1e2>
 800322e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003230:	06c3      	lsls	r3, r0, #27
 8003232:	f53f aefc 	bmi.w	800302e <__ssvfiscanf_r+0x52>
 8003236:	9b00      	ldr	r3, [sp, #0]
 8003238:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800323a:	1d19      	adds	r1, r3, #4
 800323c:	9100      	str	r1, [sp, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	07c0      	lsls	r0, r0, #31
 8003242:	bf4c      	ite	mi
 8003244:	801a      	strhmi	r2, [r3, #0]
 8003246:	601a      	strpl	r2, [r3, #0]
 8003248:	e6f1      	b.n	800302e <__ssvfiscanf_r+0x52>
 800324a:	4621      	mov	r1, r4
 800324c:	4630      	mov	r0, r6
 800324e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003250:	4798      	blx	r3
 8003252:	2800      	cmp	r0, #0
 8003254:	d0b7      	beq.n	80031c6 <__ssvfiscanf_r+0x1ea>
 8003256:	e79d      	b.n	8003194 <__ssvfiscanf_r+0x1b8>
 8003258:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800325a:	3201      	adds	r2, #1
 800325c:	9245      	str	r2, [sp, #276]	; 0x114
 800325e:	6862      	ldr	r2, [r4, #4]
 8003260:	3a01      	subs	r2, #1
 8003262:	2a00      	cmp	r2, #0
 8003264:	6062      	str	r2, [r4, #4]
 8003266:	dd02      	ble.n	800326e <__ssvfiscanf_r+0x292>
 8003268:	3301      	adds	r3, #1
 800326a:	6023      	str	r3, [r4, #0]
 800326c:	e7ae      	b.n	80031cc <__ssvfiscanf_r+0x1f0>
 800326e:	4621      	mov	r1, r4
 8003270:	4630      	mov	r0, r6
 8003272:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003274:	4798      	blx	r3
 8003276:	2800      	cmp	r0, #0
 8003278:	d0a8      	beq.n	80031cc <__ssvfiscanf_r+0x1f0>
 800327a:	e78b      	b.n	8003194 <__ssvfiscanf_r+0x1b8>
 800327c:	2b04      	cmp	r3, #4
 800327e:	dc06      	bgt.n	800328e <__ssvfiscanf_r+0x2b2>
 8003280:	466b      	mov	r3, sp
 8003282:	4622      	mov	r2, r4
 8003284:	4630      	mov	r0, r6
 8003286:	a941      	add	r1, sp, #260	; 0x104
 8003288:	f000 f87a 	bl	8003380 <_scanf_i>
 800328c:	e7ac      	b.n	80031e8 <__ssvfiscanf_r+0x20c>
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <__ssvfiscanf_r+0x2f0>)
 8003290:	2b00      	cmp	r3, #0
 8003292:	f43f aecc 	beq.w	800302e <__ssvfiscanf_r+0x52>
 8003296:	466b      	mov	r3, sp
 8003298:	4622      	mov	r2, r4
 800329a:	4630      	mov	r0, r6
 800329c:	a941      	add	r1, sp, #260	; 0x104
 800329e:	f3af 8000 	nop.w
 80032a2:	e7a1      	b.n	80031e8 <__ssvfiscanf_r+0x20c>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80032aa:	bf18      	it	ne
 80032ac:	f04f 30ff 	movne.w	r0, #4294967295
 80032b0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80032b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80032ba:	e7f9      	b.n	80032b0 <__ssvfiscanf_r+0x2d4>
 80032bc:	08002f27 	.word	0x08002f27
 80032c0:	08002fa1 	.word	0x08002fa1
 80032c4:	08003dc0 	.word	0x08003dc0
 80032c8:	08003da0 	.word	0x08003da0
 80032cc:	00000000 	.word	0x00000000

080032d0 <_scanf_chars>:
 80032d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d4:	4615      	mov	r5, r2
 80032d6:	688a      	ldr	r2, [r1, #8]
 80032d8:	4680      	mov	r8, r0
 80032da:	460c      	mov	r4, r1
 80032dc:	b932      	cbnz	r2, 80032ec <_scanf_chars+0x1c>
 80032de:	698a      	ldr	r2, [r1, #24]
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	bf0c      	ite	eq
 80032e4:	2201      	moveq	r2, #1
 80032e6:	f04f 32ff 	movne.w	r2, #4294967295
 80032ea:	608a      	str	r2, [r1, #8]
 80032ec:	2700      	movs	r7, #0
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800337c <_scanf_chars+0xac>
 80032f4:	06d1      	lsls	r1, r2, #27
 80032f6:	bf5f      	itttt	pl
 80032f8:	681a      	ldrpl	r2, [r3, #0]
 80032fa:	1d11      	addpl	r1, r2, #4
 80032fc:	6019      	strpl	r1, [r3, #0]
 80032fe:	6816      	ldrpl	r6, [r2, #0]
 8003300:	69a0      	ldr	r0, [r4, #24]
 8003302:	b188      	cbz	r0, 8003328 <_scanf_chars+0x58>
 8003304:	2801      	cmp	r0, #1
 8003306:	d107      	bne.n	8003318 <_scanf_chars+0x48>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	6963      	ldr	r3, [r4, #20]
 800330e:	5c9b      	ldrb	r3, [r3, r2]
 8003310:	b953      	cbnz	r3, 8003328 <_scanf_chars+0x58>
 8003312:	bb27      	cbnz	r7, 800335e <_scanf_chars+0x8e>
 8003314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003318:	2802      	cmp	r0, #2
 800331a:	d120      	bne.n	800335e <_scanf_chars+0x8e>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	d41a      	bmi.n	800335e <_scanf_chars+0x8e>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	3701      	adds	r7, #1
 800332c:	06da      	lsls	r2, r3, #27
 800332e:	bf5e      	ittt	pl
 8003330:	682b      	ldrpl	r3, [r5, #0]
 8003332:	781b      	ldrbpl	r3, [r3, #0]
 8003334:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003338:	682a      	ldr	r2, [r5, #0]
 800333a:	686b      	ldr	r3, [r5, #4]
 800333c:	3201      	adds	r2, #1
 800333e:	602a      	str	r2, [r5, #0]
 8003340:	68a2      	ldr	r2, [r4, #8]
 8003342:	3b01      	subs	r3, #1
 8003344:	3a01      	subs	r2, #1
 8003346:	606b      	str	r3, [r5, #4]
 8003348:	60a2      	str	r2, [r4, #8]
 800334a:	b142      	cbz	r2, 800335e <_scanf_chars+0x8e>
 800334c:	2b00      	cmp	r3, #0
 800334e:	dcd7      	bgt.n	8003300 <_scanf_chars+0x30>
 8003350:	4629      	mov	r1, r5
 8003352:	4640      	mov	r0, r8
 8003354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003358:	4798      	blx	r3
 800335a:	2800      	cmp	r0, #0
 800335c:	d0d0      	beq.n	8003300 <_scanf_chars+0x30>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	f013 0310 	ands.w	r3, r3, #16
 8003364:	d105      	bne.n	8003372 <_scanf_chars+0xa2>
 8003366:	68e2      	ldr	r2, [r4, #12]
 8003368:	3201      	adds	r2, #1
 800336a:	60e2      	str	r2, [r4, #12]
 800336c:	69a2      	ldr	r2, [r4, #24]
 800336e:	b102      	cbz	r2, 8003372 <_scanf_chars+0xa2>
 8003370:	7033      	strb	r3, [r6, #0]
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	2000      	movs	r0, #0
 8003376:	441f      	add	r7, r3
 8003378:	6127      	str	r7, [r4, #16]
 800337a:	e7cb      	b.n	8003314 <_scanf_chars+0x44>
 800337c:	08003dc0 	.word	0x08003dc0

08003380 <_scanf_i>:
 8003380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003384:	460c      	mov	r4, r1
 8003386:	4698      	mov	r8, r3
 8003388:	4b72      	ldr	r3, [pc, #456]	; (8003554 <_scanf_i+0x1d4>)
 800338a:	b087      	sub	sp, #28
 800338c:	4682      	mov	sl, r0
 800338e:	4616      	mov	r6, r2
 8003390:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003394:	ab03      	add	r3, sp, #12
 8003396:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800339a:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <_scanf_i+0x1d8>)
 800339c:	69a1      	ldr	r1, [r4, #24]
 800339e:	4a6f      	ldr	r2, [pc, #444]	; (800355c <_scanf_i+0x1dc>)
 80033a0:	4627      	mov	r7, r4
 80033a2:	2903      	cmp	r1, #3
 80033a4:	bf18      	it	ne
 80033a6:	461a      	movne	r2, r3
 80033a8:	68a3      	ldr	r3, [r4, #8]
 80033aa:	9201      	str	r2, [sp, #4]
 80033ac:	1e5a      	subs	r2, r3, #1
 80033ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80033b2:	bf81      	itttt	hi
 80033b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80033b8:	eb03 0905 	addhi.w	r9, r3, r5
 80033bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80033c0:	60a3      	strhi	r3, [r4, #8]
 80033c2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80033c6:	bf98      	it	ls
 80033c8:	f04f 0900 	movls.w	r9, #0
 80033cc:	463d      	mov	r5, r7
 80033ce:	f04f 0b00 	mov.w	fp, #0
 80033d2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80033d6:	6023      	str	r3, [r4, #0]
 80033d8:	6831      	ldr	r1, [r6, #0]
 80033da:	ab03      	add	r3, sp, #12
 80033dc:	2202      	movs	r2, #2
 80033de:	7809      	ldrb	r1, [r1, #0]
 80033e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80033e4:	f000 fa38 	bl	8003858 <memchr>
 80033e8:	b328      	cbz	r0, 8003436 <_scanf_i+0xb6>
 80033ea:	f1bb 0f01 	cmp.w	fp, #1
 80033ee:	d159      	bne.n	80034a4 <_scanf_i+0x124>
 80033f0:	6862      	ldr	r2, [r4, #4]
 80033f2:	b92a      	cbnz	r2, 8003400 <_scanf_i+0x80>
 80033f4:	2308      	movs	r3, #8
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	6063      	str	r3, [r4, #4]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fe:	6022      	str	r2, [r4, #0]
 8003400:	6822      	ldr	r2, [r4, #0]
 8003402:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003406:	6022      	str	r2, [r4, #0]
 8003408:	68a2      	ldr	r2, [r4, #8]
 800340a:	1e51      	subs	r1, r2, #1
 800340c:	60a1      	str	r1, [r4, #8]
 800340e:	b192      	cbz	r2, 8003436 <_scanf_i+0xb6>
 8003410:	6832      	ldr	r2, [r6, #0]
 8003412:	1c51      	adds	r1, r2, #1
 8003414:	6031      	str	r1, [r6, #0]
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	f805 2b01 	strb.w	r2, [r5], #1
 800341c:	6872      	ldr	r2, [r6, #4]
 800341e:	3a01      	subs	r2, #1
 8003420:	2a00      	cmp	r2, #0
 8003422:	6072      	str	r2, [r6, #4]
 8003424:	dc07      	bgt.n	8003436 <_scanf_i+0xb6>
 8003426:	4631      	mov	r1, r6
 8003428:	4650      	mov	r0, sl
 800342a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800342e:	4790      	blx	r2
 8003430:	2800      	cmp	r0, #0
 8003432:	f040 8085 	bne.w	8003540 <_scanf_i+0x1c0>
 8003436:	f10b 0b01 	add.w	fp, fp, #1
 800343a:	f1bb 0f03 	cmp.w	fp, #3
 800343e:	d1cb      	bne.n	80033d8 <_scanf_i+0x58>
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	b90b      	cbnz	r3, 8003448 <_scanf_i+0xc8>
 8003444:	230a      	movs	r3, #10
 8003446:	6063      	str	r3, [r4, #4]
 8003448:	6863      	ldr	r3, [r4, #4]
 800344a:	4945      	ldr	r1, [pc, #276]	; (8003560 <_scanf_i+0x1e0>)
 800344c:	6960      	ldr	r0, [r4, #20]
 800344e:	1ac9      	subs	r1, r1, r3
 8003450:	f000 f888 	bl	8003564 <__sccl>
 8003454:	f04f 0b00 	mov.w	fp, #0
 8003458:	68a3      	ldr	r3, [r4, #8]
 800345a:	6822      	ldr	r2, [r4, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03d      	beq.n	80034dc <_scanf_i+0x15c>
 8003460:	6831      	ldr	r1, [r6, #0]
 8003462:	6960      	ldr	r0, [r4, #20]
 8003464:	f891 c000 	ldrb.w	ip, [r1]
 8003468:	f810 000c 	ldrb.w	r0, [r0, ip]
 800346c:	2800      	cmp	r0, #0
 800346e:	d035      	beq.n	80034dc <_scanf_i+0x15c>
 8003470:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003474:	d124      	bne.n	80034c0 <_scanf_i+0x140>
 8003476:	0510      	lsls	r0, r2, #20
 8003478:	d522      	bpl.n	80034c0 <_scanf_i+0x140>
 800347a:	f10b 0b01 	add.w	fp, fp, #1
 800347e:	f1b9 0f00 	cmp.w	r9, #0
 8003482:	d003      	beq.n	800348c <_scanf_i+0x10c>
 8003484:	3301      	adds	r3, #1
 8003486:	f109 39ff 	add.w	r9, r9, #4294967295
 800348a:	60a3      	str	r3, [r4, #8]
 800348c:	6873      	ldr	r3, [r6, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	6073      	str	r3, [r6, #4]
 8003494:	dd1b      	ble.n	80034ce <_scanf_i+0x14e>
 8003496:	6833      	ldr	r3, [r6, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	6033      	str	r3, [r6, #0]
 800349c:	68a3      	ldr	r3, [r4, #8]
 800349e:	3b01      	subs	r3, #1
 80034a0:	60a3      	str	r3, [r4, #8]
 80034a2:	e7d9      	b.n	8003458 <_scanf_i+0xd8>
 80034a4:	f1bb 0f02 	cmp.w	fp, #2
 80034a8:	d1ae      	bne.n	8003408 <_scanf_i+0x88>
 80034aa:	6822      	ldr	r2, [r4, #0]
 80034ac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80034b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80034b4:	d1bf      	bne.n	8003436 <_scanf_i+0xb6>
 80034b6:	2310      	movs	r3, #16
 80034b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034bc:	6063      	str	r3, [r4, #4]
 80034be:	e7a2      	b.n	8003406 <_scanf_i+0x86>
 80034c0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	780b      	ldrb	r3, [r1, #0]
 80034c8:	f805 3b01 	strb.w	r3, [r5], #1
 80034cc:	e7de      	b.n	800348c <_scanf_i+0x10c>
 80034ce:	4631      	mov	r1, r6
 80034d0:	4650      	mov	r0, sl
 80034d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80034d6:	4798      	blx	r3
 80034d8:	2800      	cmp	r0, #0
 80034da:	d0df      	beq.n	800349c <_scanf_i+0x11c>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	05d9      	lsls	r1, r3, #23
 80034e0:	d50d      	bpl.n	80034fe <_scanf_i+0x17e>
 80034e2:	42bd      	cmp	r5, r7
 80034e4:	d909      	bls.n	80034fa <_scanf_i+0x17a>
 80034e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80034ea:	4632      	mov	r2, r6
 80034ec:	4650      	mov	r0, sl
 80034ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80034f2:	f105 39ff 	add.w	r9, r5, #4294967295
 80034f6:	4798      	blx	r3
 80034f8:	464d      	mov	r5, r9
 80034fa:	42bd      	cmp	r5, r7
 80034fc:	d028      	beq.n	8003550 <_scanf_i+0x1d0>
 80034fe:	6822      	ldr	r2, [r4, #0]
 8003500:	f012 0210 	ands.w	r2, r2, #16
 8003504:	d113      	bne.n	800352e <_scanf_i+0x1ae>
 8003506:	702a      	strb	r2, [r5, #0]
 8003508:	4639      	mov	r1, r7
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	4650      	mov	r0, sl
 800350e:	9e01      	ldr	r6, [sp, #4]
 8003510:	47b0      	blx	r6
 8003512:	f8d8 3000 	ldr.w	r3, [r8]
 8003516:	6821      	ldr	r1, [r4, #0]
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	f8c8 2000 	str.w	r2, [r8]
 800351e:	f011 0f20 	tst.w	r1, #32
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	d00f      	beq.n	8003546 <_scanf_i+0x1c6>
 8003526:	6018      	str	r0, [r3, #0]
 8003528:	68e3      	ldr	r3, [r4, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	60e3      	str	r3, [r4, #12]
 800352e:	2000      	movs	r0, #0
 8003530:	1bed      	subs	r5, r5, r7
 8003532:	44ab      	add	fp, r5
 8003534:	6925      	ldr	r5, [r4, #16]
 8003536:	445d      	add	r5, fp
 8003538:	6125      	str	r5, [r4, #16]
 800353a:	b007      	add	sp, #28
 800353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003540:	f04f 0b00 	mov.w	fp, #0
 8003544:	e7ca      	b.n	80034dc <_scanf_i+0x15c>
 8003546:	07ca      	lsls	r2, r1, #31
 8003548:	bf4c      	ite	mi
 800354a:	8018      	strhmi	r0, [r3, #0]
 800354c:	6018      	strpl	r0, [r3, #0]
 800354e:	e7eb      	b.n	8003528 <_scanf_i+0x1a8>
 8003550:	2001      	movs	r0, #1
 8003552:	e7f2      	b.n	800353a <_scanf_i+0x1ba>
 8003554:	08003d7c 	.word	0x08003d7c
 8003558:	080037e1 	.word	0x080037e1
 800355c:	080036e5 	.word	0x080036e5
 8003560:	08003dbd 	.word	0x08003dbd

08003564 <__sccl>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	780b      	ldrb	r3, [r1, #0]
 8003568:	4604      	mov	r4, r0
 800356a:	2b5e      	cmp	r3, #94	; 0x5e
 800356c:	bf13      	iteet	ne
 800356e:	2200      	movne	r2, #0
 8003570:	2201      	moveq	r2, #1
 8003572:	784b      	ldrbeq	r3, [r1, #1]
 8003574:	1c48      	addne	r0, r1, #1
 8003576:	bf08      	it	eq
 8003578:	1c88      	addeq	r0, r1, #2
 800357a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800357e:	1e61      	subs	r1, r4, #1
 8003580:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003584:	42a9      	cmp	r1, r5
 8003586:	d1fb      	bne.n	8003580 <__sccl+0x1c>
 8003588:	b90b      	cbnz	r3, 800358e <__sccl+0x2a>
 800358a:	3801      	subs	r0, #1
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	f082 0101 	eor.w	r1, r2, #1
 8003592:	54e1      	strb	r1, [r4, r3]
 8003594:	1c42      	adds	r2, r0, #1
 8003596:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800359a:	4610      	mov	r0, r2
 800359c:	2d2d      	cmp	r5, #45	; 0x2d
 800359e:	f102 36ff 	add.w	r6, r2, #4294967295
 80035a2:	d006      	beq.n	80035b2 <__sccl+0x4e>
 80035a4:	2d5d      	cmp	r5, #93	; 0x5d
 80035a6:	d0f1      	beq.n	800358c <__sccl+0x28>
 80035a8:	b90d      	cbnz	r5, 80035ae <__sccl+0x4a>
 80035aa:	4630      	mov	r0, r6
 80035ac:	e7ee      	b.n	800358c <__sccl+0x28>
 80035ae:	462b      	mov	r3, r5
 80035b0:	e7ef      	b.n	8003592 <__sccl+0x2e>
 80035b2:	7816      	ldrb	r6, [r2, #0]
 80035b4:	2e5d      	cmp	r6, #93	; 0x5d
 80035b6:	d0fa      	beq.n	80035ae <__sccl+0x4a>
 80035b8:	42b3      	cmp	r3, r6
 80035ba:	dcf8      	bgt.n	80035ae <__sccl+0x4a>
 80035bc:	4618      	mov	r0, r3
 80035be:	3001      	adds	r0, #1
 80035c0:	4286      	cmp	r6, r0
 80035c2:	5421      	strb	r1, [r4, r0]
 80035c4:	dcfb      	bgt.n	80035be <__sccl+0x5a>
 80035c6:	43d8      	mvns	r0, r3
 80035c8:	4430      	add	r0, r6
 80035ca:	42b3      	cmp	r3, r6
 80035cc:	bfa8      	it	ge
 80035ce:	2000      	movge	r0, #0
 80035d0:	1c5d      	adds	r5, r3, #1
 80035d2:	182b      	adds	r3, r5, r0
 80035d4:	3202      	adds	r2, #2
 80035d6:	e7de      	b.n	8003596 <__sccl+0x32>

080035d8 <_strtol_l.isra.0>:
 80035d8:	2b01      	cmp	r3, #1
 80035da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035de:	4686      	mov	lr, r0
 80035e0:	d001      	beq.n	80035e6 <_strtol_l.isra.0+0xe>
 80035e2:	2b24      	cmp	r3, #36	; 0x24
 80035e4:	d906      	bls.n	80035f4 <_strtol_l.isra.0+0x1c>
 80035e6:	f7ff fc29 	bl	8002e3c <__errno>
 80035ea:	2316      	movs	r3, #22
 80035ec:	6003      	str	r3, [r0, #0]
 80035ee:	2000      	movs	r0, #0
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f4:	468c      	mov	ip, r1
 80035f6:	4e3a      	ldr	r6, [pc, #232]	; (80036e0 <_strtol_l.isra.0+0x108>)
 80035f8:	4660      	mov	r0, ip
 80035fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80035fe:	5da5      	ldrb	r5, [r4, r6]
 8003600:	f015 0508 	ands.w	r5, r5, #8
 8003604:	d1f8      	bne.n	80035f8 <_strtol_l.isra.0+0x20>
 8003606:	2c2d      	cmp	r4, #45	; 0x2d
 8003608:	d133      	bne.n	8003672 <_strtol_l.isra.0+0x9a>
 800360a:	f04f 0801 	mov.w	r8, #1
 800360e:	f89c 4000 	ldrb.w	r4, [ip]
 8003612:	f100 0c02 	add.w	ip, r0, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d05d      	beq.n	80036d6 <_strtol_l.isra.0+0xfe>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d10c      	bne.n	8003638 <_strtol_l.isra.0+0x60>
 800361e:	2c30      	cmp	r4, #48	; 0x30
 8003620:	d10a      	bne.n	8003638 <_strtol_l.isra.0+0x60>
 8003622:	f89c 0000 	ldrb.w	r0, [ip]
 8003626:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800362a:	2858      	cmp	r0, #88	; 0x58
 800362c:	d14e      	bne.n	80036cc <_strtol_l.isra.0+0xf4>
 800362e:	2310      	movs	r3, #16
 8003630:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003634:	f10c 0c02 	add.w	ip, ip, #2
 8003638:	2500      	movs	r5, #0
 800363a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800363e:	3f01      	subs	r7, #1
 8003640:	fbb7 f9f3 	udiv	r9, r7, r3
 8003644:	4628      	mov	r0, r5
 8003646:	fb03 7a19 	mls	sl, r3, r9, r7
 800364a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800364e:	2e09      	cmp	r6, #9
 8003650:	d818      	bhi.n	8003684 <_strtol_l.isra.0+0xac>
 8003652:	4634      	mov	r4, r6
 8003654:	42a3      	cmp	r3, r4
 8003656:	dd24      	ble.n	80036a2 <_strtol_l.isra.0+0xca>
 8003658:	2d00      	cmp	r5, #0
 800365a:	db1f      	blt.n	800369c <_strtol_l.isra.0+0xc4>
 800365c:	4581      	cmp	r9, r0
 800365e:	d31d      	bcc.n	800369c <_strtol_l.isra.0+0xc4>
 8003660:	d101      	bne.n	8003666 <_strtol_l.isra.0+0x8e>
 8003662:	45a2      	cmp	sl, r4
 8003664:	db1a      	blt.n	800369c <_strtol_l.isra.0+0xc4>
 8003666:	2501      	movs	r5, #1
 8003668:	fb00 4003 	mla	r0, r0, r3, r4
 800366c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003670:	e7eb      	b.n	800364a <_strtol_l.isra.0+0x72>
 8003672:	2c2b      	cmp	r4, #43	; 0x2b
 8003674:	bf08      	it	eq
 8003676:	f89c 4000 	ldrbeq.w	r4, [ip]
 800367a:	46a8      	mov	r8, r5
 800367c:	bf08      	it	eq
 800367e:	f100 0c02 	addeq.w	ip, r0, #2
 8003682:	e7c8      	b.n	8003616 <_strtol_l.isra.0+0x3e>
 8003684:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003688:	2e19      	cmp	r6, #25
 800368a:	d801      	bhi.n	8003690 <_strtol_l.isra.0+0xb8>
 800368c:	3c37      	subs	r4, #55	; 0x37
 800368e:	e7e1      	b.n	8003654 <_strtol_l.isra.0+0x7c>
 8003690:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003694:	2e19      	cmp	r6, #25
 8003696:	d804      	bhi.n	80036a2 <_strtol_l.isra.0+0xca>
 8003698:	3c57      	subs	r4, #87	; 0x57
 800369a:	e7db      	b.n	8003654 <_strtol_l.isra.0+0x7c>
 800369c:	f04f 35ff 	mov.w	r5, #4294967295
 80036a0:	e7e4      	b.n	800366c <_strtol_l.isra.0+0x94>
 80036a2:	2d00      	cmp	r5, #0
 80036a4:	da08      	bge.n	80036b8 <_strtol_l.isra.0+0xe0>
 80036a6:	2322      	movs	r3, #34	; 0x22
 80036a8:	4638      	mov	r0, r7
 80036aa:	f8ce 3000 	str.w	r3, [lr]
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d09e      	beq.n	80035f0 <_strtol_l.isra.0+0x18>
 80036b2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80036b6:	e007      	b.n	80036c8 <_strtol_l.isra.0+0xf0>
 80036b8:	f1b8 0f00 	cmp.w	r8, #0
 80036bc:	d000      	beq.n	80036c0 <_strtol_l.isra.0+0xe8>
 80036be:	4240      	negs	r0, r0
 80036c0:	2a00      	cmp	r2, #0
 80036c2:	d095      	beq.n	80035f0 <_strtol_l.isra.0+0x18>
 80036c4:	2d00      	cmp	r5, #0
 80036c6:	d1f4      	bne.n	80036b2 <_strtol_l.isra.0+0xda>
 80036c8:	6011      	str	r1, [r2, #0]
 80036ca:	e791      	b.n	80035f0 <_strtol_l.isra.0+0x18>
 80036cc:	2430      	movs	r4, #48	; 0x30
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1b2      	bne.n	8003638 <_strtol_l.isra.0+0x60>
 80036d2:	2308      	movs	r3, #8
 80036d4:	e7b0      	b.n	8003638 <_strtol_l.isra.0+0x60>
 80036d6:	2c30      	cmp	r4, #48	; 0x30
 80036d8:	d0a3      	beq.n	8003622 <_strtol_l.isra.0+0x4a>
 80036da:	230a      	movs	r3, #10
 80036dc:	e7ac      	b.n	8003638 <_strtol_l.isra.0+0x60>
 80036de:	bf00      	nop
 80036e0:	08003dc0 	.word	0x08003dc0

080036e4 <_strtol_r>:
 80036e4:	f7ff bf78 	b.w	80035d8 <_strtol_l.isra.0>

080036e8 <_strtoul_l.isra.0>:
 80036e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036ec:	468c      	mov	ip, r1
 80036ee:	4686      	mov	lr, r0
 80036f0:	4e3a      	ldr	r6, [pc, #232]	; (80037dc <_strtoul_l.isra.0+0xf4>)
 80036f2:	4660      	mov	r0, ip
 80036f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80036f8:	5da5      	ldrb	r5, [r4, r6]
 80036fa:	f015 0508 	ands.w	r5, r5, #8
 80036fe:	d1f8      	bne.n	80036f2 <_strtoul_l.isra.0+0xa>
 8003700:	2c2d      	cmp	r4, #45	; 0x2d
 8003702:	d134      	bne.n	800376e <_strtoul_l.isra.0+0x86>
 8003704:	f04f 0801 	mov.w	r8, #1
 8003708:	f89c 4000 	ldrb.w	r4, [ip]
 800370c:	f100 0c02 	add.w	ip, r0, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05e      	beq.n	80037d2 <_strtoul_l.isra.0+0xea>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d10c      	bne.n	8003732 <_strtoul_l.isra.0+0x4a>
 8003718:	2c30      	cmp	r4, #48	; 0x30
 800371a:	d10a      	bne.n	8003732 <_strtoul_l.isra.0+0x4a>
 800371c:	f89c 0000 	ldrb.w	r0, [ip]
 8003720:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003724:	2858      	cmp	r0, #88	; 0x58
 8003726:	d14f      	bne.n	80037c8 <_strtoul_l.isra.0+0xe0>
 8003728:	2310      	movs	r3, #16
 800372a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800372e:	f10c 0c02 	add.w	ip, ip, #2
 8003732:	f04f 37ff 	mov.w	r7, #4294967295
 8003736:	fbb7 f7f3 	udiv	r7, r7, r3
 800373a:	2500      	movs	r5, #0
 800373c:	fb03 f907 	mul.w	r9, r3, r7
 8003740:	4628      	mov	r0, r5
 8003742:	ea6f 0909 	mvn.w	r9, r9
 8003746:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800374a:	2e09      	cmp	r6, #9
 800374c:	d818      	bhi.n	8003780 <_strtoul_l.isra.0+0x98>
 800374e:	4634      	mov	r4, r6
 8003750:	42a3      	cmp	r3, r4
 8003752:	dd24      	ble.n	800379e <_strtoul_l.isra.0+0xb6>
 8003754:	2d00      	cmp	r5, #0
 8003756:	db1f      	blt.n	8003798 <_strtoul_l.isra.0+0xb0>
 8003758:	4287      	cmp	r7, r0
 800375a:	d31d      	bcc.n	8003798 <_strtoul_l.isra.0+0xb0>
 800375c:	d101      	bne.n	8003762 <_strtoul_l.isra.0+0x7a>
 800375e:	45a1      	cmp	r9, r4
 8003760:	db1a      	blt.n	8003798 <_strtoul_l.isra.0+0xb0>
 8003762:	2501      	movs	r5, #1
 8003764:	fb00 4003 	mla	r0, r0, r3, r4
 8003768:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800376c:	e7eb      	b.n	8003746 <_strtoul_l.isra.0+0x5e>
 800376e:	2c2b      	cmp	r4, #43	; 0x2b
 8003770:	bf08      	it	eq
 8003772:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003776:	46a8      	mov	r8, r5
 8003778:	bf08      	it	eq
 800377a:	f100 0c02 	addeq.w	ip, r0, #2
 800377e:	e7c7      	b.n	8003710 <_strtoul_l.isra.0+0x28>
 8003780:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003784:	2e19      	cmp	r6, #25
 8003786:	d801      	bhi.n	800378c <_strtoul_l.isra.0+0xa4>
 8003788:	3c37      	subs	r4, #55	; 0x37
 800378a:	e7e1      	b.n	8003750 <_strtoul_l.isra.0+0x68>
 800378c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003790:	2e19      	cmp	r6, #25
 8003792:	d804      	bhi.n	800379e <_strtoul_l.isra.0+0xb6>
 8003794:	3c57      	subs	r4, #87	; 0x57
 8003796:	e7db      	b.n	8003750 <_strtoul_l.isra.0+0x68>
 8003798:	f04f 35ff 	mov.w	r5, #4294967295
 800379c:	e7e4      	b.n	8003768 <_strtoul_l.isra.0+0x80>
 800379e:	2d00      	cmp	r5, #0
 80037a0:	da07      	bge.n	80037b2 <_strtoul_l.isra.0+0xca>
 80037a2:	2322      	movs	r3, #34	; 0x22
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	f8ce 3000 	str.w	r3, [lr]
 80037ac:	b942      	cbnz	r2, 80037c0 <_strtoul_l.isra.0+0xd8>
 80037ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037b2:	f1b8 0f00 	cmp.w	r8, #0
 80037b6:	d000      	beq.n	80037ba <_strtoul_l.isra.0+0xd2>
 80037b8:	4240      	negs	r0, r0
 80037ba:	2a00      	cmp	r2, #0
 80037bc:	d0f7      	beq.n	80037ae <_strtoul_l.isra.0+0xc6>
 80037be:	b10d      	cbz	r5, 80037c4 <_strtoul_l.isra.0+0xdc>
 80037c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80037c4:	6011      	str	r1, [r2, #0]
 80037c6:	e7f2      	b.n	80037ae <_strtoul_l.isra.0+0xc6>
 80037c8:	2430      	movs	r4, #48	; 0x30
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1b1      	bne.n	8003732 <_strtoul_l.isra.0+0x4a>
 80037ce:	2308      	movs	r3, #8
 80037d0:	e7af      	b.n	8003732 <_strtoul_l.isra.0+0x4a>
 80037d2:	2c30      	cmp	r4, #48	; 0x30
 80037d4:	d0a2      	beq.n	800371c <_strtoul_l.isra.0+0x34>
 80037d6:	230a      	movs	r3, #10
 80037d8:	e7ab      	b.n	8003732 <_strtoul_l.isra.0+0x4a>
 80037da:	bf00      	nop
 80037dc:	08003dc0 	.word	0x08003dc0

080037e0 <_strtoul_r>:
 80037e0:	f7ff bf82 	b.w	80036e8 <_strtoul_l.isra.0>

080037e4 <__submore>:
 80037e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037e8:	460c      	mov	r4, r1
 80037ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80037ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037f0:	4299      	cmp	r1, r3
 80037f2:	d11b      	bne.n	800382c <__submore+0x48>
 80037f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037f8:	f000 f896 	bl	8003928 <_malloc_r>
 80037fc:	b918      	cbnz	r0, 8003806 <__submore+0x22>
 80037fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380a:	63a3      	str	r3, [r4, #56]	; 0x38
 800380c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003810:	6360      	str	r0, [r4, #52]	; 0x34
 8003812:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003816:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800381a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800381e:	7043      	strb	r3, [r0, #1]
 8003820:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003824:	7003      	strb	r3, [r0, #0]
 8003826:	6020      	str	r0, [r4, #0]
 8003828:	2000      	movs	r0, #0
 800382a:	e7ea      	b.n	8003802 <__submore+0x1e>
 800382c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800382e:	0077      	lsls	r7, r6, #1
 8003830:	463a      	mov	r2, r7
 8003832:	f000 f8d3 	bl	80039dc <_realloc_r>
 8003836:	4605      	mov	r5, r0
 8003838:	2800      	cmp	r0, #0
 800383a:	d0e0      	beq.n	80037fe <__submore+0x1a>
 800383c:	eb00 0806 	add.w	r8, r0, r6
 8003840:	4601      	mov	r1, r0
 8003842:	4632      	mov	r2, r6
 8003844:	4640      	mov	r0, r8
 8003846:	f000 f815 	bl	8003874 <memcpy>
 800384a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800384e:	f8c4 8000 	str.w	r8, [r4]
 8003852:	e7e9      	b.n	8003828 <__submore+0x44>

08003854 <__retarget_lock_acquire_recursive>:
 8003854:	4770      	bx	lr

08003856 <__retarget_lock_release_recursive>:
 8003856:	4770      	bx	lr

08003858 <memchr>:
 8003858:	4603      	mov	r3, r0
 800385a:	b510      	push	{r4, lr}
 800385c:	b2c9      	uxtb	r1, r1
 800385e:	4402      	add	r2, r0
 8003860:	4293      	cmp	r3, r2
 8003862:	4618      	mov	r0, r3
 8003864:	d101      	bne.n	800386a <memchr+0x12>
 8003866:	2000      	movs	r0, #0
 8003868:	e003      	b.n	8003872 <memchr+0x1a>
 800386a:	7804      	ldrb	r4, [r0, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	428c      	cmp	r4, r1
 8003870:	d1f6      	bne.n	8003860 <memchr+0x8>
 8003872:	bd10      	pop	{r4, pc}

08003874 <memcpy>:
 8003874:	440a      	add	r2, r1
 8003876:	4291      	cmp	r1, r2
 8003878:	f100 33ff 	add.w	r3, r0, #4294967295
 800387c:	d100      	bne.n	8003880 <memcpy+0xc>
 800387e:	4770      	bx	lr
 8003880:	b510      	push	{r4, lr}
 8003882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003886:	4291      	cmp	r1, r2
 8003888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800388c:	d1f9      	bne.n	8003882 <memcpy+0xe>
 800388e:	bd10      	pop	{r4, pc}

08003890 <_free_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	4605      	mov	r5, r0
 8003894:	2900      	cmp	r1, #0
 8003896:	d043      	beq.n	8003920 <_free_r+0x90>
 8003898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800389c:	1f0c      	subs	r4, r1, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	bfb8      	it	lt
 80038a2:	18e4      	addlt	r4, r4, r3
 80038a4:	f000 f8d0 	bl	8003a48 <__malloc_lock>
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <_free_r+0x94>)
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	4610      	mov	r0, r2
 80038ae:	b933      	cbnz	r3, 80038be <_free_r+0x2e>
 80038b0:	6063      	str	r3, [r4, #4]
 80038b2:	6014      	str	r4, [r2, #0]
 80038b4:	4628      	mov	r0, r5
 80038b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ba:	f000 b8cb 	b.w	8003a54 <__malloc_unlock>
 80038be:	42a3      	cmp	r3, r4
 80038c0:	d90a      	bls.n	80038d8 <_free_r+0x48>
 80038c2:	6821      	ldr	r1, [r4, #0]
 80038c4:	1862      	adds	r2, r4, r1
 80038c6:	4293      	cmp	r3, r2
 80038c8:	bf01      	itttt	eq
 80038ca:	681a      	ldreq	r2, [r3, #0]
 80038cc:	685b      	ldreq	r3, [r3, #4]
 80038ce:	1852      	addeq	r2, r2, r1
 80038d0:	6022      	streq	r2, [r4, #0]
 80038d2:	6063      	str	r3, [r4, #4]
 80038d4:	6004      	str	r4, [r0, #0]
 80038d6:	e7ed      	b.n	80038b4 <_free_r+0x24>
 80038d8:	461a      	mov	r2, r3
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b10b      	cbz	r3, 80038e2 <_free_r+0x52>
 80038de:	42a3      	cmp	r3, r4
 80038e0:	d9fa      	bls.n	80038d8 <_free_r+0x48>
 80038e2:	6811      	ldr	r1, [r2, #0]
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	42a0      	cmp	r0, r4
 80038e8:	d10b      	bne.n	8003902 <_free_r+0x72>
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	4401      	add	r1, r0
 80038ee:	1850      	adds	r0, r2, r1
 80038f0:	4283      	cmp	r3, r0
 80038f2:	6011      	str	r1, [r2, #0]
 80038f4:	d1de      	bne.n	80038b4 <_free_r+0x24>
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4401      	add	r1, r0
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e7d8      	b.n	80038b4 <_free_r+0x24>
 8003902:	d902      	bls.n	800390a <_free_r+0x7a>
 8003904:	230c      	movs	r3, #12
 8003906:	602b      	str	r3, [r5, #0]
 8003908:	e7d4      	b.n	80038b4 <_free_r+0x24>
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	1821      	adds	r1, r4, r0
 800390e:	428b      	cmp	r3, r1
 8003910:	bf01      	itttt	eq
 8003912:	6819      	ldreq	r1, [r3, #0]
 8003914:	685b      	ldreq	r3, [r3, #4]
 8003916:	1809      	addeq	r1, r1, r0
 8003918:	6021      	streq	r1, [r4, #0]
 800391a:	6063      	str	r3, [r4, #4]
 800391c:	6054      	str	r4, [r2, #4]
 800391e:	e7c9      	b.n	80038b4 <_free_r+0x24>
 8003920:	bd38      	pop	{r3, r4, r5, pc}
 8003922:	bf00      	nop
 8003924:	20000098 	.word	0x20000098

08003928 <_malloc_r>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	1ccd      	adds	r5, r1, #3
 800392c:	f025 0503 	bic.w	r5, r5, #3
 8003930:	3508      	adds	r5, #8
 8003932:	2d0c      	cmp	r5, #12
 8003934:	bf38      	it	cc
 8003936:	250c      	movcc	r5, #12
 8003938:	2d00      	cmp	r5, #0
 800393a:	4606      	mov	r6, r0
 800393c:	db01      	blt.n	8003942 <_malloc_r+0x1a>
 800393e:	42a9      	cmp	r1, r5
 8003940:	d903      	bls.n	800394a <_malloc_r+0x22>
 8003942:	230c      	movs	r3, #12
 8003944:	6033      	str	r3, [r6, #0]
 8003946:	2000      	movs	r0, #0
 8003948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800394a:	f000 f87d 	bl	8003a48 <__malloc_lock>
 800394e:	4921      	ldr	r1, [pc, #132]	; (80039d4 <_malloc_r+0xac>)
 8003950:	680a      	ldr	r2, [r1, #0]
 8003952:	4614      	mov	r4, r2
 8003954:	b99c      	cbnz	r4, 800397e <_malloc_r+0x56>
 8003956:	4f20      	ldr	r7, [pc, #128]	; (80039d8 <_malloc_r+0xb0>)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b923      	cbnz	r3, 8003966 <_malloc_r+0x3e>
 800395c:	4621      	mov	r1, r4
 800395e:	4630      	mov	r0, r6
 8003960:	f000 f862 	bl	8003a28 <_sbrk_r>
 8003964:	6038      	str	r0, [r7, #0]
 8003966:	4629      	mov	r1, r5
 8003968:	4630      	mov	r0, r6
 800396a:	f000 f85d 	bl	8003a28 <_sbrk_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d123      	bne.n	80039ba <_malloc_r+0x92>
 8003972:	230c      	movs	r3, #12
 8003974:	4630      	mov	r0, r6
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	f000 f86c 	bl	8003a54 <__malloc_unlock>
 800397c:	e7e3      	b.n	8003946 <_malloc_r+0x1e>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	1b5b      	subs	r3, r3, r5
 8003982:	d417      	bmi.n	80039b4 <_malloc_r+0x8c>
 8003984:	2b0b      	cmp	r3, #11
 8003986:	d903      	bls.n	8003990 <_malloc_r+0x68>
 8003988:	6023      	str	r3, [r4, #0]
 800398a:	441c      	add	r4, r3
 800398c:	6025      	str	r5, [r4, #0]
 800398e:	e004      	b.n	800399a <_malloc_r+0x72>
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	42a2      	cmp	r2, r4
 8003994:	bf0c      	ite	eq
 8003996:	600b      	streq	r3, [r1, #0]
 8003998:	6053      	strne	r3, [r2, #4]
 800399a:	4630      	mov	r0, r6
 800399c:	f000 f85a 	bl	8003a54 <__malloc_unlock>
 80039a0:	f104 000b 	add.w	r0, r4, #11
 80039a4:	1d23      	adds	r3, r4, #4
 80039a6:	f020 0007 	bic.w	r0, r0, #7
 80039aa:	1ac2      	subs	r2, r0, r3
 80039ac:	d0cc      	beq.n	8003948 <_malloc_r+0x20>
 80039ae:	1a1b      	subs	r3, r3, r0
 80039b0:	50a3      	str	r3, [r4, r2]
 80039b2:	e7c9      	b.n	8003948 <_malloc_r+0x20>
 80039b4:	4622      	mov	r2, r4
 80039b6:	6864      	ldr	r4, [r4, #4]
 80039b8:	e7cc      	b.n	8003954 <_malloc_r+0x2c>
 80039ba:	1cc4      	adds	r4, r0, #3
 80039bc:	f024 0403 	bic.w	r4, r4, #3
 80039c0:	42a0      	cmp	r0, r4
 80039c2:	d0e3      	beq.n	800398c <_malloc_r+0x64>
 80039c4:	1a21      	subs	r1, r4, r0
 80039c6:	4630      	mov	r0, r6
 80039c8:	f000 f82e 	bl	8003a28 <_sbrk_r>
 80039cc:	3001      	adds	r0, #1
 80039ce:	d1dd      	bne.n	800398c <_malloc_r+0x64>
 80039d0:	e7cf      	b.n	8003972 <_malloc_r+0x4a>
 80039d2:	bf00      	nop
 80039d4:	20000098 	.word	0x20000098
 80039d8:	2000009c 	.word	0x2000009c

080039dc <_realloc_r>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	4607      	mov	r7, r0
 80039e0:	4614      	mov	r4, r2
 80039e2:	460e      	mov	r6, r1
 80039e4:	b921      	cbnz	r1, 80039f0 <_realloc_r+0x14>
 80039e6:	4611      	mov	r1, r2
 80039e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039ec:	f7ff bf9c 	b.w	8003928 <_malloc_r>
 80039f0:	b922      	cbnz	r2, 80039fc <_realloc_r+0x20>
 80039f2:	f7ff ff4d 	bl	8003890 <_free_r>
 80039f6:	4625      	mov	r5, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039fc:	f000 f830 	bl	8003a60 <_malloc_usable_size_r>
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d20f      	bcs.n	8003a24 <_realloc_r+0x48>
 8003a04:	4621      	mov	r1, r4
 8003a06:	4638      	mov	r0, r7
 8003a08:	f7ff ff8e 	bl	8003928 <_malloc_r>
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d0f2      	beq.n	80039f8 <_realloc_r+0x1c>
 8003a12:	4631      	mov	r1, r6
 8003a14:	4622      	mov	r2, r4
 8003a16:	f7ff ff2d 	bl	8003874 <memcpy>
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	f7ff ff37 	bl	8003890 <_free_r>
 8003a22:	e7e9      	b.n	80039f8 <_realloc_r+0x1c>
 8003a24:	4635      	mov	r5, r6
 8003a26:	e7e7      	b.n	80039f8 <_realloc_r+0x1c>

08003a28 <_sbrk_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4d05      	ldr	r5, [pc, #20]	; (8003a44 <_sbrk_r+0x1c>)
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	f7fd fdaa 	bl	800158c <_sbrk>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_sbrk_r+0x1a>
 8003a3c:	682b      	ldr	r3, [r5, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_sbrk_r+0x1a>
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	20000374 	.word	0x20000374

08003a48 <__malloc_lock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	; (8003a50 <__malloc_lock+0x8>)
 8003a4a:	f7ff bf03 	b.w	8003854 <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	2000037c 	.word	0x2000037c

08003a54 <__malloc_unlock>:
 8003a54:	4801      	ldr	r0, [pc, #4]	; (8003a5c <__malloc_unlock+0x8>)
 8003a56:	f7ff befe 	b.w	8003856 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	2000037c 	.word	0x2000037c

08003a60 <_malloc_usable_size_r>:
 8003a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a64:	1f18      	subs	r0, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfbc      	itt	lt
 8003a6a:	580b      	ldrlt	r3, [r1, r0]
 8003a6c:	18c0      	addlt	r0, r0, r3
 8003a6e:	4770      	bx	lr

08003a70 <fmod>:
 8003a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a74:	461f      	mov	r7, r3
 8003a76:	4680      	mov	r8, r0
 8003a78:	4689      	mov	r9, r1
 8003a7a:	4616      	mov	r6, r2
 8003a7c:	f000 f82e 	bl	8003adc <__ieee754_fmod>
 8003a80:	4b15      	ldr	r3, [pc, #84]	; (8003ad8 <fmod+0x68>)
 8003a82:	4604      	mov	r4, r0
 8003a84:	f993 3000 	ldrsb.w	r3, [r3]
 8003a88:	460d      	mov	r5, r1
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	d020      	beq.n	8003ad0 <fmod+0x60>
 8003a8e:	4632      	mov	r2, r6
 8003a90:	463b      	mov	r3, r7
 8003a92:	4630      	mov	r0, r6
 8003a94:	4639      	mov	r1, r7
 8003a96:	f7fc ffb7 	bl	8000a08 <__aeabi_dcmpun>
 8003a9a:	b9c8      	cbnz	r0, 8003ad0 <fmod+0x60>
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fc ffb0 	bl	8000a08 <__aeabi_dcmpun>
 8003aa8:	b990      	cbnz	r0, 8003ad0 <fmod+0x60>
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2300      	movs	r3, #0
 8003aae:	4630      	mov	r0, r6
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	f7fc ff77 	bl	80009a4 <__aeabi_dcmpeq>
 8003ab6:	b158      	cbz	r0, 8003ad0 <fmod+0x60>
 8003ab8:	f7ff f9c0 	bl	8002e3c <__errno>
 8003abc:	2321      	movs	r3, #33	; 0x21
 8003abe:	2200      	movs	r2, #0
 8003ac0:	6003      	str	r3, [r0, #0]
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7fc fe2e 	bl	8000728 <__aeabi_ddiv>
 8003acc:	4604      	mov	r4, r0
 8003ace:	460d      	mov	r5, r1
 8003ad0:	4620      	mov	r0, r4
 8003ad2:	4629      	mov	r1, r5
 8003ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad8:	20000070 	.word	0x20000070

08003adc <__ieee754_fmod>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	ea58 0302 	orrs.w	r3, r8, r2
 8003aee:	460e      	mov	r6, r1
 8003af0:	4614      	mov	r4, r2
 8003af2:	4694      	mov	ip, r2
 8003af4:	4696      	mov	lr, r2
 8003af6:	d00d      	beq.n	8003b14 <__ieee754_fmod+0x38>
 8003af8:	4a7b      	ldr	r2, [pc, #492]	; (8003ce8 <__ieee754_fmod+0x20c>)
 8003afa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003afe:	4293      	cmp	r3, r2
 8003b00:	468a      	mov	sl, r1
 8003b02:	dc07      	bgt.n	8003b14 <__ieee754_fmod+0x38>
 8003b04:	4262      	negs	r2, r4
 8003b06:	4979      	ldr	r1, [pc, #484]	; (8003cec <__ieee754_fmod+0x210>)
 8003b08:	4322      	orrs	r2, r4
 8003b0a:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 8003b0e:	428a      	cmp	r2, r1
 8003b10:	460a      	mov	r2, r1
 8003b12:	d90c      	bls.n	8003b2e <__ieee754_fmod+0x52>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4622      	mov	r2, r4
 8003b18:	4638      	mov	r0, r7
 8003b1a:	4631      	mov	r1, r6
 8003b1c:	f7fc fcda 	bl	80004d4 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	f7fc fe00 	bl	8000728 <__aeabi_ddiv>
 8003b28:	4607      	mov	r7, r0
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	e00f      	b.n	8003b4e <__ieee754_fmod+0x72>
 8003b2e:	4543      	cmp	r3, r8
 8003b30:	46b9      	mov	r9, r7
 8003b32:	4639      	mov	r1, r7
 8003b34:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 8003b38:	dc0d      	bgt.n	8003b56 <__ieee754_fmod+0x7a>
 8003b3a:	db08      	blt.n	8003b4e <__ieee754_fmod+0x72>
 8003b3c:	4567      	cmp	r7, ip
 8003b3e:	d306      	bcc.n	8003b4e <__ieee754_fmod+0x72>
 8003b40:	d109      	bne.n	8003b56 <__ieee754_fmod+0x7a>
 8003b42:	4a6b      	ldr	r2, [pc, #428]	; (8003cf0 <__ieee754_fmod+0x214>)
 8003b44:	0fe4      	lsrs	r4, r4, #31
 8003b46:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8003b4a:	e9d4 7600 	ldrd	r7, r6, [r4]
 8003b4e:	4638      	mov	r0, r7
 8003b50:	4631      	mov	r1, r6
 8003b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b56:	ea1a 0f02 	tst.w	sl, r2
 8003b5a:	d14a      	bne.n	8003bf2 <__ieee754_fmod+0x116>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d141      	bne.n	8003be4 <__ieee754_fmod+0x108>
 8003b60:	464a      	mov	r2, r9
 8003b62:	4864      	ldr	r0, [pc, #400]	; (8003cf4 <__ieee754_fmod+0x218>)
 8003b64:	2a00      	cmp	r2, #0
 8003b66:	dc3a      	bgt.n	8003bde <__ieee754_fmod+0x102>
 8003b68:	4a60      	ldr	r2, [pc, #384]	; (8003cec <__ieee754_fmod+0x210>)
 8003b6a:	402a      	ands	r2, r5
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	d14f      	bne.n	8003c10 <__ieee754_fmod+0x134>
 8003b70:	f1b8 0f00 	cmp.w	r8, #0
 8003b74:	d144      	bne.n	8003c00 <__ieee754_fmod+0x124>
 8003b76:	4666      	mov	r6, ip
 8003b78:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	dc3c      	bgt.n	8003bfa <__ieee754_fmod+0x11e>
 8003b80:	4e5d      	ldr	r6, [pc, #372]	; (8003cf8 <__ieee754_fmod+0x21c>)
 8003b82:	42b0      	cmp	r0, r6
 8003b84:	db49      	blt.n	8003c1a <__ieee754_fmod+0x13e>
 8003b86:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8003b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b8e:	4e5a      	ldr	r6, [pc, #360]	; (8003cf8 <__ieee754_fmod+0x21c>)
 8003b90:	42b2      	cmp	r2, r6
 8003b92:	db54      	blt.n	8003c3e <__ieee754_fmod+0x162>
 8003b94:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003b98:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8003b9c:	1a80      	subs	r0, r0, r2
 8003b9e:	1b5e      	subs	r6, r3, r5
 8003ba0:	eba1 070e 	sub.w	r7, r1, lr
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d161      	bne.n	8003c6c <__ieee754_fmod+0x190>
 8003ba8:	4571      	cmp	r1, lr
 8003baa:	bf38      	it	cc
 8003bac:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8003bb0:	2e00      	cmp	r6, #0
 8003bb2:	bfa4      	itt	ge
 8003bb4:	4639      	movge	r1, r7
 8003bb6:	4633      	movge	r3, r6
 8003bb8:	ea53 0001 	orrs.w	r0, r3, r1
 8003bbc:	d0c1      	beq.n	8003b42 <__ieee754_fmod+0x66>
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	db68      	blt.n	8003c96 <__ieee754_fmod+0x1ba>
 8003bc4:	484c      	ldr	r0, [pc, #304]	; (8003cf8 <__ieee754_fmod+0x21c>)
 8003bc6:	4282      	cmp	r2, r0
 8003bc8:	db6b      	blt.n	8003ca2 <__ieee754_fmod+0x1c6>
 8003bca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003bce:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003bd2:	431c      	orrs	r4, r3
 8003bd4:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 8003bd8:	460f      	mov	r7, r1
 8003bda:	464e      	mov	r6, r9
 8003bdc:	e7b7      	b.n	8003b4e <__ieee754_fmod+0x72>
 8003bde:	3801      	subs	r0, #1
 8003be0:	0052      	lsls	r2, r2, #1
 8003be2:	e7bf      	b.n	8003b64 <__ieee754_fmod+0x88>
 8003be4:	4844      	ldr	r0, [pc, #272]	; (8003cf8 <__ieee754_fmod+0x21c>)
 8003be6:	02da      	lsls	r2, r3, #11
 8003be8:	2a00      	cmp	r2, #0
 8003bea:	ddbd      	ble.n	8003b68 <__ieee754_fmod+0x8c>
 8003bec:	3801      	subs	r0, #1
 8003bee:	0052      	lsls	r2, r2, #1
 8003bf0:	e7fa      	b.n	8003be8 <__ieee754_fmod+0x10c>
 8003bf2:	1518      	asrs	r0, r3, #20
 8003bf4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003bf8:	e7b6      	b.n	8003b68 <__ieee754_fmod+0x8c>
 8003bfa:	3a01      	subs	r2, #1
 8003bfc:	0076      	lsls	r6, r6, #1
 8003bfe:	e7bd      	b.n	8003b7c <__ieee754_fmod+0xa0>
 8003c00:	4a3d      	ldr	r2, [pc, #244]	; (8003cf8 <__ieee754_fmod+0x21c>)
 8003c02:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	ddba      	ble.n	8003b80 <__ieee754_fmod+0xa4>
 8003c0a:	3a01      	subs	r2, #1
 8003c0c:	0076      	lsls	r6, r6, #1
 8003c0e:	e7fa      	b.n	8003c06 <__ieee754_fmod+0x12a>
 8003c10:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003c14:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003c18:	e7b2      	b.n	8003b80 <__ieee754_fmod+0xa4>
 8003c1a:	1a31      	subs	r1, r6, r0
 8003c1c:	291f      	cmp	r1, #31
 8003c1e:	dc08      	bgt.n	8003c32 <__ieee754_fmod+0x156>
 8003c20:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 8003c24:	408b      	lsls	r3, r1
 8003c26:	fa29 f606 	lsr.w	r6, r9, r6
 8003c2a:	4333      	orrs	r3, r6
 8003c2c:	fa09 f101 	lsl.w	r1, r9, r1
 8003c30:	e7ad      	b.n	8003b8e <__ieee754_fmod+0xb2>
 8003c32:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <__ieee754_fmod+0x220>)
 8003c34:	2100      	movs	r1, #0
 8003c36:	1a1b      	subs	r3, r3, r0
 8003c38:	fa09 f303 	lsl.w	r3, r9, r3
 8003c3c:	e7a7      	b.n	8003b8e <__ieee754_fmod+0xb2>
 8003c3e:	eba6 0e02 	sub.w	lr, r6, r2
 8003c42:	f1be 0f1f 	cmp.w	lr, #31
 8003c46:	dc0a      	bgt.n	8003c5e <__ieee754_fmod+0x182>
 8003c48:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8003c4c:	fa08 f80e 	lsl.w	r8, r8, lr
 8003c50:	fa2c f505 	lsr.w	r5, ip, r5
 8003c54:	ea45 0508 	orr.w	r5, r5, r8
 8003c58:	fa0c fe0e 	lsl.w	lr, ip, lr
 8003c5c:	e79e      	b.n	8003b9c <__ieee754_fmod+0xc0>
 8003c5e:	4d27      	ldr	r5, [pc, #156]	; (8003cfc <__ieee754_fmod+0x220>)
 8003c60:	f04f 0e00 	mov.w	lr, #0
 8003c64:	1aad      	subs	r5, r5, r2
 8003c66:	fa0c f505 	lsl.w	r5, ip, r5
 8003c6a:	e797      	b.n	8003b9c <__ieee754_fmod+0xc0>
 8003c6c:	4571      	cmp	r1, lr
 8003c6e:	bf38      	it	cc
 8003c70:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	da05      	bge.n	8003c84 <__ieee754_fmod+0x1a8>
 8003c78:	0fce      	lsrs	r6, r1, #31
 8003c7a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003c7e:	0049      	lsls	r1, r1, #1
 8003c80:	3801      	subs	r0, #1
 8003c82:	e78c      	b.n	8003b9e <__ieee754_fmod+0xc2>
 8003c84:	ea56 0307 	orrs.w	r3, r6, r7
 8003c88:	f43f af5b 	beq.w	8003b42 <__ieee754_fmod+0x66>
 8003c8c:	0ffb      	lsrs	r3, r7, #31
 8003c8e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8003c92:	0079      	lsls	r1, r7, #1
 8003c94:	e7f4      	b.n	8003c80 <__ieee754_fmod+0x1a4>
 8003c96:	0fc8      	lsrs	r0, r1, #31
 8003c98:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c9c:	0049      	lsls	r1, r1, #1
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	e78d      	b.n	8003bbe <__ieee754_fmod+0xe2>
 8003ca2:	1a80      	subs	r0, r0, r2
 8003ca4:	2814      	cmp	r0, #20
 8003ca6:	dc0a      	bgt.n	8003cbe <__ieee754_fmod+0x1e2>
 8003ca8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003cac:	fa03 f202 	lsl.w	r2, r3, r2
 8003cb0:	40c1      	lsrs	r1, r0
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	4103      	asrs	r3, r0
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	ea43 0104 	orr.w	r1, r3, r4
 8003cbc:	e734      	b.n	8003b28 <__ieee754_fmod+0x4c>
 8003cbe:	281f      	cmp	r0, #31
 8003cc0:	dc07      	bgt.n	8003cd2 <__ieee754_fmod+0x1f6>
 8003cc2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003cc6:	40c1      	lsrs	r1, r0
 8003cc8:	fa03 f202 	lsl.w	r2, r3, r2
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	4623      	mov	r3, r4
 8003cd0:	e7f1      	b.n	8003cb6 <__ieee754_fmod+0x1da>
 8003cd2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8003cd6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003cda:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8003cde:	32e2      	adds	r2, #226	; 0xe2
 8003ce0:	fa43 f202 	asr.w	r2, r3, r2
 8003ce4:	e7f3      	b.n	8003cce <__ieee754_fmod+0x1f2>
 8003ce6:	bf00      	nop
 8003ce8:	7fefffff 	.word	0x7fefffff
 8003cec:	7ff00000 	.word	0x7ff00000
 8003cf0:	08003f20 	.word	0x08003f20
 8003cf4:	fffffbed 	.word	0xfffffbed
 8003cf8:	fffffc02 	.word	0xfffffc02
 8003cfc:	fffffbe2 	.word	0xfffffbe2

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
