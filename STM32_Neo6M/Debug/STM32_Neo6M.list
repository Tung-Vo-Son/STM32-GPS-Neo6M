
STM32_Neo6M.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003b40  08003b40  00013b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d58  08003d58  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003d58  08003d58  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d58  08003d58  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000078  08003dd4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003dd4  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077b2  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001923  00000000  00000000  0002784f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00029178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00029838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017214  00000000  00000000  00029e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079ee  00000000  00000000  00041044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082d23  00000000  00000000  00048a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002390  00000000  00000000  000cb7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b24 	.word	0x08003b24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003b24 	.word	0x08003b24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_frsub>:
 8000a34:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	e002      	b.n	8000a40 <__addsf3>
 8000a3a:	bf00      	nop

08000a3c <__aeabi_fsub>:
 8000a3c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a40 <__addsf3>:
 8000a40:	0042      	lsls	r2, r0, #1
 8000a42:	bf1f      	itttt	ne
 8000a44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a48:	ea92 0f03 	teqne	r2, r3
 8000a4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a54:	d06a      	beq.n	8000b2c <__addsf3+0xec>
 8000a56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a5e:	bfc1      	itttt	gt
 8000a60:	18d2      	addgt	r2, r2, r3
 8000a62:	4041      	eorgt	r1, r0
 8000a64:	4048      	eorgt	r0, r1
 8000a66:	4041      	eorgt	r1, r0
 8000a68:	bfb8      	it	lt
 8000a6a:	425b      	neglt	r3, r3
 8000a6c:	2b19      	cmp	r3, #25
 8000a6e:	bf88      	it	hi
 8000a70:	4770      	bxhi	lr
 8000a72:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a7e:	bf18      	it	ne
 8000a80:	4240      	negne	r0, r0
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a8e:	bf18      	it	ne
 8000a90:	4249      	negne	r1, r1
 8000a92:	ea92 0f03 	teq	r2, r3
 8000a96:	d03f      	beq.n	8000b18 <__addsf3+0xd8>
 8000a98:	f1a2 0201 	sub.w	r2, r2, #1
 8000a9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa0:	eb10 000c 	adds.w	r0, r0, ip
 8000aa4:	f1c3 0320 	rsb	r3, r3, #32
 8000aa8:	fa01 f103 	lsl.w	r1, r1, r3
 8000aac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab0:	d502      	bpl.n	8000ab8 <__addsf3+0x78>
 8000ab2:	4249      	negs	r1, r1
 8000ab4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ab8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000abc:	d313      	bcc.n	8000ae6 <__addsf3+0xa6>
 8000abe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ac2:	d306      	bcc.n	8000ad2 <__addsf3+0x92>
 8000ac4:	0840      	lsrs	r0, r0, #1
 8000ac6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aca:	f102 0201 	add.w	r2, r2, #1
 8000ace:	2afe      	cmp	r2, #254	; 0xfe
 8000ad0:	d251      	bcs.n	8000b76 <__addsf3+0x136>
 8000ad2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ad6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ada:	bf08      	it	eq
 8000adc:	f020 0001 	biceq.w	r0, r0, #1
 8000ae0:	ea40 0003 	orr.w	r0, r0, r3
 8000ae4:	4770      	bx	lr
 8000ae6:	0049      	lsls	r1, r1, #1
 8000ae8:	eb40 0000 	adc.w	r0, r0, r0
 8000aec:	3a01      	subs	r2, #1
 8000aee:	bf28      	it	cs
 8000af0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000af4:	d2ed      	bcs.n	8000ad2 <__addsf3+0x92>
 8000af6:	fab0 fc80 	clz	ip, r0
 8000afa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000afe:	ebb2 020c 	subs.w	r2, r2, ip
 8000b02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b06:	bfaa      	itet	ge
 8000b08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b0c:	4252      	neglt	r2, r2
 8000b0e:	4318      	orrge	r0, r3
 8000b10:	bfbc      	itt	lt
 8000b12:	40d0      	lsrlt	r0, r2
 8000b14:	4318      	orrlt	r0, r3
 8000b16:	4770      	bx	lr
 8000b18:	f092 0f00 	teq	r2, #0
 8000b1c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b20:	bf06      	itte	eq
 8000b22:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b26:	3201      	addeq	r2, #1
 8000b28:	3b01      	subne	r3, #1
 8000b2a:	e7b5      	b.n	8000a98 <__addsf3+0x58>
 8000b2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b3a:	d021      	beq.n	8000b80 <__addsf3+0x140>
 8000b3c:	ea92 0f03 	teq	r2, r3
 8000b40:	d004      	beq.n	8000b4c <__addsf3+0x10c>
 8000b42:	f092 0f00 	teq	r2, #0
 8000b46:	bf08      	it	eq
 8000b48:	4608      	moveq	r0, r1
 8000b4a:	4770      	bx	lr
 8000b4c:	ea90 0f01 	teq	r0, r1
 8000b50:	bf1c      	itt	ne
 8000b52:	2000      	movne	r0, #0
 8000b54:	4770      	bxne	lr
 8000b56:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b5a:	d104      	bne.n	8000b66 <__addsf3+0x126>
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	bf28      	it	cs
 8000b60:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	4770      	bx	lr
 8000b66:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b6a:	bf3c      	itt	cc
 8000b6c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bxcc	lr
 8000b72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b76:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7e:	4770      	bx	lr
 8000b80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b84:	bf16      	itet	ne
 8000b86:	4608      	movne	r0, r1
 8000b88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b8c:	4601      	movne	r1, r0
 8000b8e:	0242      	lsls	r2, r0, #9
 8000b90:	bf06      	itte	eq
 8000b92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b96:	ea90 0f01 	teqeq	r0, r1
 8000b9a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_ui2f>:
 8000ba0:	f04f 0300 	mov.w	r3, #0
 8000ba4:	e004      	b.n	8000bb0 <__aeabi_i2f+0x8>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_i2f>:
 8000ba8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bac:	bf48      	it	mi
 8000bae:	4240      	negmi	r0, r0
 8000bb0:	ea5f 0c00 	movs.w	ip, r0
 8000bb4:	bf08      	it	eq
 8000bb6:	4770      	bxeq	lr
 8000bb8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bbc:	4601      	mov	r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	e01c      	b.n	8000bfe <__aeabi_l2f+0x2a>

08000bc4 <__aeabi_ul2f>:
 8000bc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bc8:	bf08      	it	eq
 8000bca:	4770      	bxeq	lr
 8000bcc:	f04f 0300 	mov.w	r3, #0
 8000bd0:	e00a      	b.n	8000be8 <__aeabi_l2f+0x14>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_l2f>:
 8000bd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd8:	bf08      	it	eq
 8000bda:	4770      	bxeq	lr
 8000bdc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__aeabi_l2f+0x14>
 8000be2:	4240      	negs	r0, r0
 8000be4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be8:	ea5f 0c01 	movs.w	ip, r1
 8000bec:	bf02      	ittt	eq
 8000bee:	4684      	moveq	ip, r0
 8000bf0:	4601      	moveq	r1, r0
 8000bf2:	2000      	moveq	r0, #0
 8000bf4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c02:	fabc f28c 	clz	r2, ip
 8000c06:	3a08      	subs	r2, #8
 8000c08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c0c:	db10      	blt.n	8000c30 <__aeabi_l2f+0x5c>
 8000c0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c12:	4463      	add	r3, ip
 8000c14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c20:	fa20 f202 	lsr.w	r2, r0, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f102 0220 	add.w	r2, r2, #32
 8000c34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c38:	f1c2 0220 	rsb	r2, r2, #32
 8000c3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c40:	fa21 f202 	lsr.w	r2, r1, r2
 8000c44:	eb43 0002 	adc.w	r0, r3, r2
 8000c48:	bf08      	it	eq
 8000c4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_fmul>:
 8000c50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c58:	bf1e      	ittt	ne
 8000c5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c5e:	ea92 0f0c 	teqne	r2, ip
 8000c62:	ea93 0f0c 	teqne	r3, ip
 8000c66:	d06f      	beq.n	8000d48 <__aeabi_fmul+0xf8>
 8000c68:	441a      	add	r2, r3
 8000c6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c6e:	0240      	lsls	r0, r0, #9
 8000c70:	bf18      	it	ne
 8000c72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c76:	d01e      	beq.n	8000cb6 <__aeabi_fmul+0x66>
 8000c78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c84:	fba0 3101 	umull	r3, r1, r0, r1
 8000c88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c90:	bf3e      	ittt	cc
 8000c92:	0049      	lslcc	r1, r1, #1
 8000c94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c98:	005b      	lslcc	r3, r3, #1
 8000c9a:	ea40 0001 	orr.w	r0, r0, r1
 8000c9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ca2:	2afd      	cmp	r2, #253	; 0xfd
 8000ca4:	d81d      	bhi.n	8000ce2 <__aeabi_fmul+0x92>
 8000ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000caa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cae:	bf08      	it	eq
 8000cb0:	f020 0001 	biceq.w	r0, r0, #1
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cbe:	bf08      	it	eq
 8000cc0:	0249      	lsleq	r1, r1, #9
 8000cc2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cca:	3a7f      	subs	r2, #127	; 0x7f
 8000ccc:	bfc2      	ittt	gt
 8000cce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cd2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd6:	4770      	bxgt	lr
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	f04f 0300 	mov.w	r3, #0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	dc5d      	bgt.n	8000da0 <__aeabi_fmul+0x150>
 8000ce4:	f112 0f19 	cmn.w	r2, #25
 8000ce8:	bfdc      	itt	le
 8000cea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cee:	4770      	bxle	lr
 8000cf0:	f1c2 0200 	rsb	r2, r2, #0
 8000cf4:	0041      	lsls	r1, r0, #1
 8000cf6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cfa:	f1c2 0220 	rsb	r2, r2, #32
 8000cfe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d06:	f140 0000 	adc.w	r0, r0, #0
 8000d0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d0e:	bf08      	it	eq
 8000d10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d14:	4770      	bx	lr
 8000d16:	f092 0f00 	teq	r2, #0
 8000d1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d1e:	bf02      	ittt	eq
 8000d20:	0040      	lsleq	r0, r0, #1
 8000d22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d26:	3a01      	subeq	r2, #1
 8000d28:	d0f9      	beq.n	8000d1e <__aeabi_fmul+0xce>
 8000d2a:	ea40 000c 	orr.w	r0, r0, ip
 8000d2e:	f093 0f00 	teq	r3, #0
 8000d32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0049      	lsleq	r1, r1, #1
 8000d3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d3e:	3b01      	subeq	r3, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xe6>
 8000d42:	ea41 010c 	orr.w	r1, r1, ip
 8000d46:	e78f      	b.n	8000c68 <__aeabi_fmul+0x18>
 8000d48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d4c:	ea92 0f0c 	teq	r2, ip
 8000d50:	bf18      	it	ne
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d00a      	beq.n	8000d6e <__aeabi_fmul+0x11e>
 8000d58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d5c:	bf18      	it	ne
 8000d5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d62:	d1d8      	bne.n	8000d16 <__aeabi_fmul+0xc6>
 8000d64:	ea80 0001 	eor.w	r0, r0, r1
 8000d68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	bf17      	itett	ne
 8000d74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d78:	4608      	moveq	r0, r1
 8000d7a:	f091 0f00 	teqne	r1, #0
 8000d7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d82:	d014      	beq.n	8000dae <__aeabi_fmul+0x15e>
 8000d84:	ea92 0f0c 	teq	r2, ip
 8000d88:	d101      	bne.n	8000d8e <__aeabi_fmul+0x13e>
 8000d8a:	0242      	lsls	r2, r0, #9
 8000d8c:	d10f      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d8e:	ea93 0f0c 	teq	r3, ip
 8000d92:	d103      	bne.n	8000d9c <__aeabi_fmul+0x14c>
 8000d94:	024b      	lsls	r3, r1, #9
 8000d96:	bf18      	it	ne
 8000d98:	4608      	movne	r0, r1
 8000d9a:	d108      	bne.n	8000dae <__aeabi_fmul+0x15e>
 8000d9c:	ea80 0001 	eor.w	r0, r0, r1
 8000da0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000da4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dac:	4770      	bx	lr
 8000dae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000db6:	4770      	bx	lr

08000db8 <__aeabi_fdiv>:
 8000db8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc0:	bf1e      	ittt	ne
 8000dc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc6:	ea92 0f0c 	teqne	r2, ip
 8000dca:	ea93 0f0c 	teqne	r3, ip
 8000dce:	d069      	beq.n	8000ea4 <__aeabi_fdiv+0xec>
 8000dd0:	eba2 0203 	sub.w	r2, r2, r3
 8000dd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd8:	0249      	lsls	r1, r1, #9
 8000dda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dde:	d037      	beq.n	8000e50 <__aeabi_fdiv+0x98>
 8000de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000de8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	428b      	cmp	r3, r1
 8000df2:	bf38      	it	cc
 8000df4:	005b      	lslcc	r3, r3, #1
 8000df6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	bf24      	itt	cs
 8000e02:	1a5b      	subcs	r3, r3, r1
 8000e04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e0c:	bf24      	itt	cs
 8000e0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e1a:	bf24      	itt	cs
 8000e1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e28:	bf24      	itt	cs
 8000e2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e3a:	d1e0      	bne.n	8000dfe <__aeabi_fdiv+0x46>
 8000e3c:	2afd      	cmp	r2, #253	; 0xfd
 8000e3e:	f63f af50 	bhi.w	8000ce2 <__aeabi_fmul+0x92>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e48:	bf08      	it	eq
 8000e4a:	f020 0001 	biceq.w	r0, r0, #1
 8000e4e:	4770      	bx	lr
 8000e50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e58:	327f      	adds	r2, #127	; 0x7f
 8000e5a:	bfc2      	ittt	gt
 8000e5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e64:	4770      	bxgt	lr
 8000e66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	3a01      	subs	r2, #1
 8000e70:	e737      	b.n	8000ce2 <__aeabi_fmul+0x92>
 8000e72:	f092 0f00 	teq	r2, #0
 8000e76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0040      	lsleq	r0, r0, #1
 8000e7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e82:	3a01      	subeq	r2, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fdiv+0xc2>
 8000e86:	ea40 000c 	orr.w	r0, r0, ip
 8000e8a:	f093 0f00 	teq	r3, #0
 8000e8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0049      	lsleq	r1, r1, #1
 8000e96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e9a:	3b01      	subeq	r3, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xda>
 8000e9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ea2:	e795      	b.n	8000dd0 <__aeabi_fdiv+0x18>
 8000ea4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d108      	bne.n	8000ec0 <__aeabi_fdiv+0x108>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	f47f af7d 	bne.w	8000dae <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	f47f af70 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e776      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ec0:	ea93 0f0c 	teq	r3, ip
 8000ec4:	d104      	bne.n	8000ed0 <__aeabi_fdiv+0x118>
 8000ec6:	024b      	lsls	r3, r1, #9
 8000ec8:	f43f af4c 	beq.w	8000d64 <__aeabi_fmul+0x114>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e76e      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eda:	d1ca      	bne.n	8000e72 <__aeabi_fdiv+0xba>
 8000edc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee0:	f47f af5c 	bne.w	8000d9c <__aeabi_fmul+0x14c>
 8000ee4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ee8:	f47f af3c 	bne.w	8000d64 <__aeabi_fmul+0x114>
 8000eec:	e75f      	b.n	8000dae <__aeabi_fmul+0x15e>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_f2iz>:
 8000ef0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30f      	bcc.n	8000f1a <__aeabi_f2iz+0x2a>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d90d      	bls.n	8000f20 <__aeabi_f2iz+0x30>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f10:	fa23 f002 	lsr.w	r0, r3, r2
 8000f14:	bf18      	it	ne
 8000f16:	4240      	negne	r0, r0
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr
 8000f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f24:	d101      	bne.n	8000f2a <__aeabi_f2iz+0x3a>
 8000f26:	0242      	lsls	r2, r0, #9
 8000f28:	d105      	bne.n	8000f36 <__aeabi_f2iz+0x46>
 8000f2a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f2e:	bf08      	it	eq
 8000f30:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f34:	4770      	bx	lr
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4770      	bx	lr

08000f3c <Convert>:
#include "ST47_Neo6M.h"
extern UART_HandleTypeDef neo;
GPS_Struct gps;

double Convert(float degMin)
{
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	double min = 0.0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double decDeg = 0.0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 2302 	strd	r2, r3, [r7, #8]

	//get the minutes, fmod() requires double
	min = fmod((double)degMin, 100.0);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fa61 	bl	8000424 <__aeabi_f2d>
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <Convert+0x8c>)
 8000f68:	f002 fc94 	bl	8003894 <fmod>
 8000f6c:	e9c7 0104 	strd	r0, r1, [r7, #16]

	//rebuild coordinates in decimal degrees
	degMin = (int) ( degMin / 100 );
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <Convert+0x90>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff20 	bl	8000db8 <__aeabi_fdiv>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ffb8 	bl	8000ef0 <__aeabi_f2iz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fe10 	bl	8000ba8 <__aeabi_i2f>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	607b      	str	r3, [r7, #4]
	decDeg = degMin + ( min / 60 );
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fa49 	bl	8000424 <__aeabi_f2d>
 8000f92:	4604      	mov	r4, r0
 8000f94:	460d      	mov	r5, r1
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <Convert+0x94>)
 8000f9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa0:	f7ff fbc2 	bl	8000728 <__aeabi_ddiv>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4620      	mov	r0, r4
 8000faa:	4629      	mov	r1, r5
 8000fac:	f7ff f8dc 	bl	8000168 <__adddf3>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return decDeg;
 8000fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40590000 	.word	0x40590000
 8000fcc:	42c80000 	.word	0x42c80000
 8000fd0:	404e0000 	.word	0x404e0000

08000fd4 <GPS_Init>:

void GPS_Init()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	gps.rx_index = 0;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <GPS_Init+0x18>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	715a      	strb	r2, [r3, #5]
	HAL_UART_Receive_IT(&neo, &gps.rx_tmp, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4903      	ldr	r1, [pc, #12]	; (8000ff0 <GPS_Init+0x1c>)
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <GPS_Init+0x20>)
 8000fe4:	f001 fb2f 	bl	8002646 <HAL_UART_Receive_IT>
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	200000a4 	.word	0x200000a4
 8000ff4:	200002f0 	.word	0x200002f0

08000ff8 <GPS_Callback>:

void GPS_Callback()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	gps.process_time = HAL_GetTick();
 8000ffc:	f000 fb6e 	bl	80016dc <HAL_GetTick>
 8001000:	4603      	mov	r3, r0
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <GPS_Callback+0x38>)
 8001004:	6013      	str	r3, [r2, #0]
	if(gps.rx_index < sizeof(gps.rx_buffer))
	{
		gps.rx_buffer[gps.rx_index] = gps.rx_tmp;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <GPS_Callback+0x38>)
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	4619      	mov	r1, r3
 800100c:	4b08      	ldr	r3, [pc, #32]	; (8001030 <GPS_Callback+0x38>)
 800100e:	791a      	ldrb	r2, [r3, #4]
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <GPS_Callback+0x38>)
 8001012:	440b      	add	r3, r1
 8001014:	719a      	strb	r2, [r3, #6]
		gps.rx_index ++;
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <GPS_Callback+0x38>)
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <GPS_Callback+0x38>)
 8001020:	715a      	strb	r2, [r3, #5]
	}
	HAL_UART_Receive_IT(&neo, &gps.rx_tmp, 1);
 8001022:	2201      	movs	r2, #1
 8001024:	4903      	ldr	r1, [pc, #12]	; (8001034 <GPS_Callback+0x3c>)
 8001026:	4804      	ldr	r0, [pc, #16]	; (8001038 <GPS_Callback+0x40>)
 8001028:	f001 fb0d 	bl	8002646 <HAL_UART_Receive_IT>
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200000a0 	.word	0x200000a0
 8001034:	200000a4 	.word	0x200000a4
 8001038:	200002f0 	.word	0x200002f0

0800103c <GPS_GetData>:

void GPS_GetData()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b090      	sub	sp, #64	; 0x40
 8001040:	af0e      	add	r7, sp, #56	; 0x38
	if((HAL_GetTick() - gps.process_time > 50) && gps.rx_index > 0)
 8001042:	f000 fb4b 	bl	80016dc <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <GPS_GetData+0xc4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b32      	cmp	r3, #50	; 0x32
 8001050:	d951      	bls.n	80010f6 <GPS_GetData+0xba>
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <GPS_GetData+0xc4>)
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d04d      	beq.n	80010f6 <GPS_GetData+0xba>
	{
		char* response = strstr((char*)gps.rx_buffer, "$GPGGA");
 800105a:	492a      	ldr	r1, [pc, #168]	; (8001104 <GPS_GetData+0xc8>)
 800105c:	482a      	ldr	r0, [pc, #168]	; (8001108 <GPS_GetData+0xcc>)
 800105e:	f001 fe5d 	bl	8002d1c <strstr>
 8001062:	6078      	str	r0, [r7, #4]
		if(response != NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d03c      	beq.n	80010e4 <GPS_GetData+0xa8>
		{
			memset(&gps.gpgga, 0, sizeof(gps.gpgga));
 800106a:	2248      	movs	r2, #72	; 0x48
 800106c:	2100      	movs	r1, #0
 800106e:	4827      	ldr	r0, [pc, #156]	; (800110c <GPS_GetData+0xd0>)
 8001070:	f001 fe20 	bl	8002cb4 <memset>
			sscanf(response,"$GPGGA, %2hhd%2hhd%2hhd.%3hd,%f,%c,%f,%c,%hhd,%hhd,%f,%f,%c,%hd,%s,*%2s\r\n", &gps.gpgga.utc_hour, &gps.gpgga.utc_min, &gps.gpgga.utc_sec, &gps.gpgga.utc_microsec, &gps.gpgga.latitude_raw, &gps.gpgga.ns_indicator, &gps.gpgga.longtitude_raw, &gps.gpgga.ew_indicator, &gps.gpgga.gps_quality_indicator, &gps.gpgga.num_of_satellites, &gps.gpgga.hdop, &gps.gpgga.msl_altitude, &gps.gpgga.msl_units, &gps.gpgga.age_of_diffCorr, gps.gpgga.diff_ref_station_id, gps.gpgga.checksum); // @suppress("Float formatting support")
 8001074:	4b26      	ldr	r3, [pc, #152]	; (8001110 <GPS_GetData+0xd4>)
 8001076:	930d      	str	r3, [sp, #52]	; 0x34
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <GPS_GetData+0xd8>)
 800107a:	930c      	str	r3, [sp, #48]	; 0x30
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <GPS_GetData+0xdc>)
 800107e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <GPS_GetData+0xe0>)
 8001082:	930a      	str	r3, [sp, #40]	; 0x28
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <GPS_GetData+0xe4>)
 8001086:	9309      	str	r3, [sp, #36]	; 0x24
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <GPS_GetData+0xe8>)
 800108a:	9308      	str	r3, [sp, #32]
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <GPS_GetData+0xec>)
 800108e:	9307      	str	r3, [sp, #28]
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <GPS_GetData+0xf0>)
 8001092:	9306      	str	r3, [sp, #24]
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <GPS_GetData+0xf4>)
 8001096:	9305      	str	r3, [sp, #20]
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <GPS_GetData+0xf8>)
 800109a:	9304      	str	r3, [sp, #16]
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <GPS_GetData+0xfc>)
 800109e:	9303      	str	r3, [sp, #12]
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <GPS_GetData+0x100>)
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <GPS_GetData+0x104>)
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <GPS_GetData+0x108>)
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <GPS_GetData+0x10c>)
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <GPS_GetData+0xd0>)
 80010b0:	4926      	ldr	r1, [pc, #152]	; (800114c <GPS_GetData+0x110>)
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f001 fe06 	bl	8002cc4 <siscanf>
			gps.gpgga.latitude = Convert(gps.gpgga.latitude_raw);
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <GPS_GetData+0xc4>)
 80010ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff3c 	bl	8000f3c <Convert>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	490d      	ldr	r1, [pc, #52]	; (8001100 <GPS_GetData+0xc4>)
 80010ca:	e9c1 2386 	strd	r2, r3, [r1, #536]	; 0x218
			gps.gpgga.longtitude = Convert(gps.gpgga.longtitude_raw);
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <GPS_GetData+0xc4>)
 80010d0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff31 	bl	8000f3c <Convert>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <GPS_GetData+0xc4>)
 80010e0:	e9c1 238a 	strd	r2, r3, [r1, #552]	; 0x228
		}
		memset(gps.rx_buffer, 0, sizeof(gps.rx_buffer));
 80010e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e8:	2100      	movs	r1, #0
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <GPS_GetData+0xcc>)
 80010ec:	f001 fde2 	bl	8002cb4 <memset>
		gps.rx_index = 0;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <GPS_GetData+0xc4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	715a      	strb	r2, [r3, #5]
	}
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000a0 	.word	0x200000a0
 8001104:	08003b40 	.word	0x08003b40
 8001108:	200000a6 	.word	0x200000a6
 800110c:	200002a8 	.word	0x200002a8
 8001110:	200002ec 	.word	0x200002ec
 8001114:	200002e8 	.word	0x200002e8
 8001118:	200002e6 	.word	0x200002e6
 800111c:	200002dc 	.word	0x200002dc
 8001120:	200002d8 	.word	0x200002d8
 8001124:	200002d4 	.word	0x200002d4
 8001128:	200002d2 	.word	0x200002d2
 800112c:	200002d1 	.word	0x200002d1
 8001130:	200002d0 	.word	0x200002d0
 8001134:	200002c4 	.word	0x200002c4
 8001138:	200002c0 	.word	0x200002c0
 800113c:	200002b0 	.word	0x200002b0
 8001140:	200002ac 	.word	0x200002ac
 8001144:	200002aa 	.word	0x200002aa
 8001148:	200002a9 	.word	0x200002a9
 800114c:	08003b48 	.word	0x08003b48

08001150 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
#define neo huart1
#define debug huart2

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	GPS_Callback();
 8001158:	f7ff ff4e 	bl	8000ff8 <GPS_Callback>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 fa60 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f80e 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 f8a6 	bl	80012c0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001174:	f000 f850 	bl	8001218 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001178:	f000 f878 	bl	800126c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800117c:	f7ff ff2a 	bl	8000fd4 <GPS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GPS_GetData();
 8001180:	f7ff ff5c 	bl	800103c <GPS_GetData>
	  HAL_Delay(100);
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	f000 fab3 	bl	80016f0 <HAL_Delay>
  {
 800118a:	e7f9      	b.n	8001180 <main+0x1c>

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b090      	sub	sp, #64	; 0x40
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0318 	add.w	r3, r7, #24
 8001196:	2228      	movs	r2, #40	; 0x28
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f001 fd8a 	bl	8002cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011bc:	2301      	movs	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fdcf 	bl	8001d78 <HAL_RCC_OscConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011e0:	f000 f8ba 	bl	8001358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2302      	movs	r3, #2
 80011ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2102      	movs	r1, #2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 f83a 	bl	8002278 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800120a:	f000 f8a5 	bl	8001358 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3740      	adds	r7, #64	; 0x40
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 800121e:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_USART1_UART_Init+0x50>)
 8001220:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 8001224:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001228:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_USART1_UART_Init+0x4c>)
 8001250:	f001 f9ac 	bl	80025ac <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800125a:	f000 f87d 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200002f0 	.word	0x200002f0
 8001268:	40013800 	.word	0x40013800

0800126c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_USART2_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f001 f982 	bl	80025ac <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f000 f853 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000330 	.word	0x20000330
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MX_GPIO_Init+0x90>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	; (8001350 <MX_GPIO_Init+0x90>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_GPIO_Init+0x90>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_GPIO_Init+0x90>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a17      	ldr	r2, [pc, #92]	; (8001350 <MX_GPIO_Init+0x90>)
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_GPIO_Init+0x90>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <MX_GPIO_Init+0x90>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a11      	ldr	r2, [pc, #68]	; (8001350 <MX_GPIO_Init+0x90>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <MX_GPIO_Init+0x90>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_GPIO_Init+0x94>)
 8001324:	f000 fd10 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2302      	movs	r3, #2
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	4619      	mov	r1, r3
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_GPIO_Init+0x94>)
 8001342:	f000 fb7d 	bl	8001a40 <HAL_GPIO_Init>

}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	40011000 	.word	0x40011000

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	e7fe      	b.n	8001360 <Error_Handler+0x8>
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_MspInit+0x5c>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6193      	str	r3, [r2, #24]
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_MspInit+0x5c>)
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_MspInit+0x5c>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_MspInit+0x5c>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_MspInit+0x60>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_MspInit+0x60>)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010000 	.word	0x40010000

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <HAL_UART_MspInit+0x118>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d13a      	bne.n	800145e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a3d      	ldr	r2, [pc, #244]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a37      	ldr	r2, [pc, #220]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 8001406:	f043 0304 	orr.w	r3, r3, #4
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin;
 8001418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_RX_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4619      	mov	r1, r3
 800142c:	482e      	ldr	r0, [pc, #184]	; (80014e8 <HAL_UART_MspInit+0x120>)
 800142e:	f000 fb07 	bl	8001a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPS_TX_Pin;
 8001432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPS_TX_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	4828      	ldr	r0, [pc, #160]	; (80014e8 <HAL_UART_MspInit+0x120>)
 8001448:	f000 fafa 	bl	8001a40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2101      	movs	r1, #1
 8001450:	2025      	movs	r0, #37	; 0x25
 8001452:	f000 fa48 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001456:	2025      	movs	r0, #37	; 0x25
 8001458:	f000 fa61 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800145c:	e03c      	b.n	80014d8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a22      	ldr	r2, [pc, #136]	; (80014ec <HAL_UART_MspInit+0x124>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d137      	bne.n	80014d8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 800146e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001472:	61d3      	str	r3, [r2, #28]
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 8001486:	f043 0304 	orr.w	r3, r3, #4
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x11c>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 8001498:	2304      	movs	r3, #4
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0318 	add.w	r3, r7, #24
 80014a8:	4619      	mov	r1, r3
 80014aa:	480f      	ldr	r0, [pc, #60]	; (80014e8 <HAL_UART_MspInit+0x120>)
 80014ac:	f000 fac8 	bl	8001a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 80014b0:	2308      	movs	r3, #8
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4619      	mov	r1, r3
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <HAL_UART_MspInit+0x120>)
 80014c4:	f000 fabc 	bl	8001a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	2026      	movs	r0, #38	; 0x26
 80014ce:	f000 fa0a 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d2:	2026      	movs	r0, #38	; 0x26
 80014d4:	f000 fa23 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40004400 	.word	0x40004400

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr

08001532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001536:	f000 f8bf 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <USART1_IRQHandler+0x10>)
 8001546:	f001 f8d3 	bl	80026f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002f0 	.word	0x200002f0

08001554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USART2_IRQHandler+0x10>)
 800155a:	f001 f8c9 	bl	80026f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000330 	.word	0x20000330

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f001 fb62 	bl	8002c60 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20005000 	.word	0x20005000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	20000094 	.word	0x20000094
 80015d0:	20000388 	.word	0x20000388

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e2:	e003      	b.n	80015ec <LoopCopyDataInit>

080015e4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015e6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ea:	3104      	adds	r1, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015f0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f4:	d3f6      	bcc.n	80015e4 <CopyDataInit>
  ldr r2, =_sbss
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015f8:	e002      	b.n	8001600 <LoopFillZerobss>

080015fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015fc:	f842 3b04 	str.w	r3, [r2], #4

08001600 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001602:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001604:	d3f9      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001606:	f7ff ffe5 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160a:	f001 fb2f 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fda9 	bl	8001164 <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r3, =_sidata
 8001614:	08003d60 	.word	0x08003d60
  ldr r0, =_sdata
 8001618:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800161c:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001620:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001624:	20000384 	.word	0x20000384

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f947 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	2000      	movs	r0, #0
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fe8c 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f95f 	bl	800193a <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f927 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000004 	.word	0x20000004

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x20>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000370 	.word	0x20000370

080016dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_GetTick+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	20000370 	.word	0x20000370

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff fff0 	bl	80016dc <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_Delay+0x44>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffe0 	bl	80016dc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	60d3      	str	r3, [r2, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	db0b      	blt.n	80017c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	f003 021f 	and.w	r2, r3, #31
 80017b4:	4906      	ldr	r1, [pc, #24]	; (80017d0 <__NVIC_EnableIRQ+0x34>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	095b      	lsrs	r3, r3, #5
 80017bc:	2001      	movs	r0, #1
 80017be:	fa00 f202 	lsl.w	r2, r0, r2
 80017c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100

080017d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	db0a      	blt.n	80017fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	490c      	ldr	r1, [pc, #48]	; (8001820 <__NVIC_SetPriority+0x4c>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	440b      	add	r3, r1
 80017f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017fc:	e00a      	b.n	8001814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <__NVIC_SetPriority+0x50>)
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	3b04      	subs	r3, #4
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	b2d2      	uxtb	r2, r2
 8001810:	440b      	add	r3, r1
 8001812:	761a      	strb	r2, [r3, #24]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f1c3 0307 	rsb	r3, r3, #7
 8001842:	2b04      	cmp	r3, #4
 8001844:	bf28      	it	cs
 8001846:	2304      	movcs	r3, #4
 8001848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3304      	adds	r3, #4
 800184e:	2b06      	cmp	r3, #6
 8001850:	d902      	bls.n	8001858 <NVIC_EncodePriority+0x30>
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3b03      	subs	r3, #3
 8001856:	e000      	b.n	800185a <NVIC_EncodePriority+0x32>
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	f04f 32ff 	mov.w	r2, #4294967295
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	401a      	ands	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001870:	f04f 31ff 	mov.w	r1, #4294967295
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43d9      	mvns	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	4313      	orrs	r3, r2
         );
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	; 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff90 	bl	80017d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff2d 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff42 	bl	8001780 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff90 	bl	8001828 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5f 	bl	80017d4 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff35 	bl	800179c <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001966:	2b02      	cmp	r3, #2
 8001968:	d005      	beq.n	8001976 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2204      	movs	r2, #4
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	e051      	b.n	8001a1a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 020e 	bic.w	r2, r2, #14
 8001984:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <HAL_DMA_Abort_IT+0xd0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d029      	beq.n	80019f4 <HAL_DMA_Abort_IT+0xa0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a20      	ldr	r2, [pc, #128]	; (8001a28 <HAL_DMA_Abort_IT+0xd4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d022      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x9c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_DMA_Abort_IT+0xd8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d01a      	beq.n	80019ea <HAL_DMA_Abort_IT+0x96>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_DMA_Abort_IT+0xdc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d012      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x90>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_DMA_Abort_IT+0xe0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00a      	beq.n	80019de <HAL_DMA_Abort_IT+0x8a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <HAL_DMA_Abort_IT+0xe4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d102      	bne.n	80019d8 <HAL_DMA_Abort_IT+0x84>
 80019d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d6:	e00e      	b.n	80019f6 <HAL_DMA_Abort_IT+0xa2>
 80019d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019dc:	e00b      	b.n	80019f6 <HAL_DMA_Abort_IT+0xa2>
 80019de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e2:	e008      	b.n	80019f6 <HAL_DMA_Abort_IT+0xa2>
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	e005      	b.n	80019f6 <HAL_DMA_Abort_IT+0xa2>
 80019ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ee:	e002      	b.n	80019f6 <HAL_DMA_Abort_IT+0xa2>
 80019f0:	2310      	movs	r3, #16
 80019f2:	e000      	b.n	80019f6 <HAL_DMA_Abort_IT+0xa2>
 80019f4:	2301      	movs	r3, #1
 80019f6:	4a11      	ldr	r2, [pc, #68]	; (8001a3c <HAL_DMA_Abort_IT+0xe8>)
 80019f8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
    } 
  }
  return status;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020008 	.word	0x40020008
 8001a28:	4002001c 	.word	0x4002001c
 8001a2c:	40020030 	.word	0x40020030
 8001a30:	40020044 	.word	0x40020044
 8001a34:	40020058 	.word	0x40020058
 8001a38:	4002006c 	.word	0x4002006c
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b08b      	sub	sp, #44	; 0x2c
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e169      	b.n	8001d28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a54:	2201      	movs	r2, #1
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8158 	bne.w	8001d22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a9a      	ldr	r2, [pc, #616]	; (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d05e      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a7c:	4a98      	ldr	r2, [pc, #608]	; (8001ce0 <HAL_GPIO_Init+0x2a0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d875      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a82:	4a98      	ldr	r2, [pc, #608]	; (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d058      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a88:	4a96      	ldr	r2, [pc, #600]	; (8001ce4 <HAL_GPIO_Init+0x2a4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d86f      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a8e:	4a96      	ldr	r2, [pc, #600]	; (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d052      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001a94:	4a94      	ldr	r2, [pc, #592]	; (8001ce8 <HAL_GPIO_Init+0x2a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d869      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001a9a:	4a94      	ldr	r2, [pc, #592]	; (8001cec <HAL_GPIO_Init+0x2ac>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d04c      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aa0:	4a92      	ldr	r2, [pc, #584]	; (8001cec <HAL_GPIO_Init+0x2ac>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d863      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aa6:	4a92      	ldr	r2, [pc, #584]	; (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d046      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
 8001aac:	4a90      	ldr	r2, [pc, #576]	; (8001cf0 <HAL_GPIO_Init+0x2b0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d85d      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d82a      	bhi.n	8001b0c <HAL_GPIO_Init+0xcc>
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d859      	bhi.n	8001b6e <HAL_GPIO_Init+0x12e>
 8001aba:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <HAL_GPIO_Init+0x80>)
 8001abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac0:	08001b3b 	.word	0x08001b3b
 8001ac4:	08001b15 	.word	0x08001b15
 8001ac8:	08001b27 	.word	0x08001b27
 8001acc:	08001b69 	.word	0x08001b69
 8001ad0:	08001b6f 	.word	0x08001b6f
 8001ad4:	08001b6f 	.word	0x08001b6f
 8001ad8:	08001b6f 	.word	0x08001b6f
 8001adc:	08001b6f 	.word	0x08001b6f
 8001ae0:	08001b6f 	.word	0x08001b6f
 8001ae4:	08001b6f 	.word	0x08001b6f
 8001ae8:	08001b6f 	.word	0x08001b6f
 8001aec:	08001b6f 	.word	0x08001b6f
 8001af0:	08001b6f 	.word	0x08001b6f
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b6f 	.word	0x08001b6f
 8001afc:	08001b6f 	.word	0x08001b6f
 8001b00:	08001b6f 	.word	0x08001b6f
 8001b04:	08001b1d 	.word	0x08001b1d
 8001b08:	08001b31 	.word	0x08001b31
 8001b0c:	4a79      	ldr	r2, [pc, #484]	; (8001cf4 <HAL_GPIO_Init+0x2b4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b12:	e02c      	b.n	8001b6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	623b      	str	r3, [r7, #32]
          break;
 8001b1a:	e029      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	3304      	adds	r3, #4
 8001b22:	623b      	str	r3, [r7, #32]
          break;
 8001b24:	e024      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e01f      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	330c      	adds	r3, #12
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e01a      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d102      	bne.n	8001b48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b42:	2304      	movs	r3, #4
 8001b44:	623b      	str	r3, [r7, #32]
          break;
 8001b46:	e013      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b50:	2308      	movs	r3, #8
 8001b52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	611a      	str	r2, [r3, #16]
          break;
 8001b5a:	e009      	b.n	8001b70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	615a      	str	r2, [r3, #20]
          break;
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x130>
          break;
 8001b6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	d801      	bhi.n	8001b7a <HAL_GPIO_Init+0x13a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_Init+0x13e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2bff      	cmp	r3, #255	; 0xff
 8001b84:	d802      	bhi.n	8001b8c <HAL_GPIO_Init+0x14c>
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	e002      	b.n	8001b92 <HAL_GPIO_Init+0x152>
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	3b08      	subs	r3, #8
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	210f      	movs	r1, #15
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	431a      	orrs	r2, r3
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80b1 	beq.w	8001d22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6193      	str	r3, [r2, #24]
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <HAL_GPIO_Init+0x2b8>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bd8:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	220f      	movs	r2, #15
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <HAL_GPIO_Init+0x2c0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d013      	beq.n	8001c2c <HAL_GPIO_Init+0x1ec>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <HAL_GPIO_Init+0x2c4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00d      	beq.n	8001c28 <HAL_GPIO_Init+0x1e8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <HAL_GPIO_Init+0x2c8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1e4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3d      	ldr	r2, [pc, #244]	; (8001d0c <HAL_GPIO_Init+0x2cc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_GPIO_Init+0x1e0>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c20:	2304      	movs	r3, #4
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x1ee>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3e:	492f      	ldr	r1, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x2bc>)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c58:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	492c      	ldr	r1, [pc, #176]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4928      	ldr	r1, [pc, #160]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c80:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4922      	ldr	r1, [pc, #136]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	491e      	ldr	r1, [pc, #120]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	4918      	ldr	r1, [pc, #96]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cb6:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	4914      	ldr	r1, [pc, #80]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d021      	beq.n	8001d14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
 8001cdc:	e021      	b.n	8001d22 <HAL_GPIO_Init+0x2e2>
 8001cde:	bf00      	nop
 8001ce0:	10320000 	.word	0x10320000
 8001ce4:	10310000 	.word	0x10310000
 8001ce8:	10220000 	.word	0x10220000
 8001cec:	10210000 	.word	0x10210000
 8001cf0:	10120000 	.word	0x10120000
 8001cf4:	10110000 	.word	0x10110000
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40010800 	.word	0x40010800
 8001d04:	40010c00 	.word	0x40010c00
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40011400 	.word	0x40011400
 8001d10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	4909      	ldr	r1, [pc, #36]	; (8001d44 <HAL_GPIO_Init+0x304>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	3301      	adds	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f47f ae8e 	bne.w	8001a54 <HAL_GPIO_Init+0x14>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	372c      	adds	r7, #44	; 0x2c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d64:	e003      	b.n	8001d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	041a      	lsls	r2, r3, #16
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e26c      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8087 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d98:	4b92      	ldr	r3, [pc, #584]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d00c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da4:	4b8f      	ldr	r3, [pc, #572]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d112      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5e>
 8001db0:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d06c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x12c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d168      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e246      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d106      	bne.n	8001dee <HAL_RCC_OscConfig+0x76>
 8001de0:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a7f      	ldr	r2, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e02e      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x98>
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a7a      	ldr	r2, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a77      	ldr	r2, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e01d      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0xbc>
 8001e1a:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a71      	ldr	r2, [pc, #452]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd4>
 8001e34:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6a      	ldr	r2, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b68      	ldr	r3, [pc, #416]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a67      	ldr	r2, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d013      	beq.n	8001e7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7ff fc42 	bl	80016dc <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fc3e 	bl	80016dc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b64      	cmp	r3, #100	; 0x64
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1fa      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0xe4>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc2e 	bl	80016dc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff fc2a 	bl	80016dc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1e6      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x10c>
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d063      	beq.n	8001f7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb2:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ebe:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 030c 	and.w	r3, r3, #12
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d11c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x18c>
 8001eca:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d116      	bne.n	8001f04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x176>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e1ba      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4939      	ldr	r1, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	4b36      	ldr	r3, [pc, #216]	; (8001fe8 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fbe3 	bl	80016dc <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7ff fbdf 	bl	80016dc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e19b      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4927      	ldr	r1, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]
 8001f4c:	e015      	b.n	8001f7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_OscConfig+0x270>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fbc2 	bl	80016dc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fbbe 	bl	80016dc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e17a      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d03a      	beq.n	8001ffc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d019      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fba2 	bl	80016dc <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb9e 	bl	80016dc <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e15a      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 fad8 	bl	8002570 <RCC_Delay>
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_RCC_OscConfig+0x274>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc8:	f7ff fb88 	bl	80016dc <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fb84 	bl	80016dc <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d908      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e140      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	42420000 	.word	0x42420000
 8001fec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	4b9e      	ldr	r3, [pc, #632]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e9      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a6 	beq.w	8002156 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800200e:	4b97      	ldr	r3, [pc, #604]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10d      	bne.n	8002036 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b94      	ldr	r3, [pc, #592]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a93      	ldr	r2, [pc, #588]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b91      	ldr	r3, [pc, #580]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b8e      	ldr	r3, [pc, #568]	; (8002270 <HAL_RCC_OscConfig+0x4f8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x4f8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a8a      	ldr	r2, [pc, #552]	; (8002270 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff fb45 	bl	80016dc <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff fb41 	bl	80016dc <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e0fd      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	4b81      	ldr	r3, [pc, #516]	; (8002270 <HAL_RCC_OscConfig+0x4f8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x312>
 800207c:	4b7b      	ldr	r3, [pc, #492]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	4a7a      	ldr	r2, [pc, #488]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6213      	str	r3, [r2, #32]
 8002088:	e02d      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x334>
 8002092:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a75      	ldr	r2, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4b73      	ldr	r3, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a72      	ldr	r2, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	e01c      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b05      	cmp	r3, #5
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x356>
 80020b4:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a6c      	ldr	r2, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a69      	ldr	r2, [pc, #420]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e00b      	b.n	80020e6 <HAL_RCC_OscConfig+0x36e>
 80020ce:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	4a66      	ldr	r2, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	6213      	str	r3, [r2, #32]
 80020da:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a63      	ldr	r2, [pc, #396]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	f023 0304 	bic.w	r3, r3, #4
 80020e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d015      	beq.n	800211a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ee:	f7ff faf5 	bl	80016dc <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7ff faf1 	bl	80016dc <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0ab      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210c:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0ee      	beq.n	80020f6 <HAL_RCC_OscConfig+0x37e>
 8002118:	e014      	b.n	8002144 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7ff fadf 	bl	80016dc <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002122:	f7ff fadb 	bl	80016dc <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002130:	4293      	cmp	r3, r2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e095      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214a:	4b48      	ldr	r3, [pc, #288]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a47      	ldr	r2, [pc, #284]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002154:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8081 	beq.w	8002262 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	4b42      	ldr	r3, [pc, #264]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d061      	beq.n	8002230 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d146      	bne.n	8002202 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b3f      	ldr	r3, [pc, #252]	; (8002274 <HAL_RCC_OscConfig+0x4fc>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff faaf 	bl	80016dc <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff faab 	bl	80016dc <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e067      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	4b35      	ldr	r3, [pc, #212]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d108      	bne.n	80021bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	492d      	ldr	r1, [pc, #180]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a19      	ldr	r1, [r3, #32]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	430b      	orrs	r3, r1
 80021ce:	4927      	ldr	r1, [pc, #156]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x4fc>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff fa7f 	bl	80016dc <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff fa7b 	bl	80016dc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e037      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46a>
 8002200:	e02f      	b.n	8002262 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_RCC_OscConfig+0x4fc>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fa68 	bl	80016dc <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff fa64 	bl	80016dc <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e020      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x498>
 800222e:	e018      	b.n	8002262 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e013      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x4f4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	429a      	cmp	r2, r3
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
 8002274:	42420060 	.word	0x42420060

08002278 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0d0      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d910      	bls.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0207 	bic.w	r2, r3, #7
 80022a2:	4965      	ldr	r1, [pc, #404]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e0b8      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	4a58      	ldr	r2, [pc, #352]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a52      	ldr	r2, [pc, #328]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f8:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	494d      	ldr	r1, [pc, #308]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d040      	beq.n	8002398 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d115      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e07f      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e073      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06b      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4936      	ldr	r1, [pc, #216]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7ff f9b8 	bl	80016dc <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7ff f9b4 	bl	80016dc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e053      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d210      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4922      	ldr	r1, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_ClockConfig+0x1c0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e032      	b.n	800242e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4916      	ldr	r1, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490e      	ldr	r1, [pc, #56]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f821 	bl	800244c <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490a      	ldr	r1, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_ClockConfig+0x1cc>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1d0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f916 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40022000 	.word	0x40022000
 800243c:	40021000 	.word	0x40021000
 8002440:	08003bb0 	.word	0x08003bb0
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004

0800244c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b490      	push	{r4, r7}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002452:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002454:	1d3c      	adds	r4, r7, #4
 8002456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800245c:	f240 2301 	movw	r3, #513	; 0x201
 8002460:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002476:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b04      	cmp	r3, #4
 8002484:	d002      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x40>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x46>
 800248a:	e02d      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248e:	623b      	str	r3, [r7, #32]
      break;
 8002490:	e02d      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800249e:	4413      	add	r3, r2
 80024a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	0c5b      	lsrs	r3, r3, #17
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024be:	4413      	add	r3, r2
 80024c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	4a0e      	ldr	r2, [pc, #56]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ca:	fb02 f203 	mul.w	r2, r2, r3
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
 80024d6:	e004      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024dc:	fb02 f303 	mul.w	r3, r2, r3
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	623b      	str	r3, [r7, #32]
      break;
 80024e6:	e002      	b.n	80024ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	623b      	str	r3, [r7, #32]
      break;
 80024ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3728      	adds	r7, #40	; 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc90      	pop	{r4, r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	08003b94 	.word	0x08003b94
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200
 8002508:	003d0900 	.word	0x003d0900

0800250c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <HAL_RCC_GetHCLKFreq+0x10>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000000 	.word	0x20000000

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002524:	f7ff fff2 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	08003bc0 	.word	0x08003bc0

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800254c:	f7ff ffde 	bl	800250c <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4903      	ldr	r1, [pc, #12]	; (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	08003bc0 	.word	0x08003bc0

08002570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <RCC_Delay+0x34>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a0a      	ldr	r2, [pc, #40]	; (80025a8 <RCC_Delay+0x38>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800258c:	bf00      	nop
  }
  while (Delay --);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1e5a      	subs	r2, r3, #1
 8002592:	60fa      	str	r2, [r7, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f9      	bne.n	800258c <RCC_Delay+0x1c>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000000 	.word	0x20000000
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e03f      	b.n	800263e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fef8 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 faa7 	bl	8002b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	4613      	mov	r3, r2
 8002652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	d140      	bne.n	80026e2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_Receive_IT+0x26>
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e039      	b.n	80026e4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_UART_Receive_IT+0x38>
 800267a:	2302      	movs	r3, #2
 800267c:	e032      	b.n	80026e4 <HAL_UART_Receive_IT+0x9e>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2222      	movs	r2, #34	; 0x22
 80026a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026bc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0220 	orr.w	r2, r2, #32
 80026dc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002714:	2300      	movs	r3, #0
 8002716:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_UART_IRQHandler+0x52>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	f003 0320 	and.w	r3, r3, #32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f982 	bl	8002a44 <UART_Receive_IT>
      return;
 8002740:	e0d0      	b.n	80028e4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80b0 	beq.w	80028aa <HAL_UART_IRQHandler+0x1ba>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_UART_IRQHandler+0x70>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a5 	beq.w	80028aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_UART_IRQHandler+0x90>
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_UART_IRQHandler+0xb0>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002798:	f043 0202 	orr.w	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_UART_IRQHandler+0xd0>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00f      	beq.n	80027ea <HAL_UART_IRQHandler+0xfa>
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <HAL_UART_IRQHandler+0xee>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e2:	f043 0208 	orr.w	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d077      	beq.n	80028e2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_UART_IRQHandler+0x11c>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f91c 	bl	8002a44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	bf14      	ite	ne
 800281a:	2301      	movne	r3, #1
 800281c:	2300      	moveq	r3, #0
 800281e:	b2db      	uxtb	r3, r3
 8002820:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_UART_IRQHandler+0x144>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d031      	beq.n	8002898 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f86d 	bl	8002914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d023      	beq.n	8002890 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002856:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002864:	4a21      	ldr	r2, [pc, #132]	; (80028ec <HAL_UART_IRQHandler+0x1fc>)
 8002866:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff f871 	bl	8001954 <HAL_DMA_Abort_IT>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d016      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002882:	4610      	mov	r0, r2
 8002884:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002886:	e00e      	b.n	80028a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f83a 	bl	8002902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800288e:	e00a      	b.n	80028a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f836 	bl	8002902 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002896:	e006      	b.n	80028a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f832 	bl	8002902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80028a4:	e01d      	b.n	80028e2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a6:	bf00      	nop
    return;
 80028a8:	e01b      	b.n	80028e2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_UART_IRQHandler+0x1d6>
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f859 	bl	8002976 <UART_Transmit_IT>
    return;
 80028c4:	e00e      	b.n	80028e4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_UART_IRQHandler+0x1f4>
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d004      	beq.n	80028e4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f89a 	bl	8002a14 <UART_EndTransmit_IT>
    return;
 80028e0:	e000      	b.n	80028e4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80028e2:	bf00      	nop
  }
}
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	0800294f 	.word	0x0800294f

080028f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800292a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f7ff ffca 	bl	8002902 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b21      	cmp	r3, #33	; 0x21
 8002988:	d13e      	bne.n	8002a08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002992:	d114      	bne.n	80029be <UART_Transmit_IT+0x48>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d110      	bne.n	80029be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	1c9a      	adds	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	621a      	str	r2, [r3, #32]
 80029bc:	e008      	b.n	80029d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6211      	str	r1, [r2, #32]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4619      	mov	r1, r3
 80029de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10f      	bne.n	8002a04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff5b 	bl	80028f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b22      	cmp	r3, #34	; 0x22
 8002a56:	d170      	bne.n	8002b3a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	d117      	bne.n	8002a92 <UART_Receive_IT+0x4e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d113      	bne.n	8002a92 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	1c9a      	adds	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	e026      	b.n	8002ae0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a96:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa4:	d007      	beq.n	8002ab6 <UART_Receive_IT+0x72>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <UART_Receive_IT+0x80>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e008      	b.n	8002ad6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4619      	mov	r1, r3
 8002aee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d120      	bne.n	8002b36 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0220 	bic.w	r2, r2, #32
 8002b02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7fe fb0f 	bl	8001150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e002      	b.n	8002b3c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b7e:	f023 030c 	bic.w	r3, r3, #12
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <UART_SetConfig+0x114>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7ff fccc 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	e002      	b.n	8002bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff fcb4 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <UART_SetConfig+0x118>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	0119      	lsls	r1, r3, #4
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <UART_SetConfig+0x118>)
 8002bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <UART_SetConfig+0x118>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	4419      	add	r1, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <UART_SetConfig+0x118>)
 8002c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	; 0x32
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <UART_SetConfig+0x118>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	51eb851f 	.word	0x51eb851f

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	2000000c 	.word	0x2000000c

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f000 ff52 	bl	8003b24 <_init>
 8002c80:	2600      	movs	r6, #0
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08003d58 	.word	0x08003d58
 8002ca8:	08003d58 	.word	0x08003d58
 8002cac:	08003d58 	.word	0x08003d58
 8002cb0:	08003d5c 	.word	0x08003d5c

08002cb4 <memset>:
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4402      	add	r2, r0
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d100      	bne.n	8002cbe <memset+0xa>
 8002cbc:	4770      	bx	lr
 8002cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc2:	e7f9      	b.n	8002cb8 <memset+0x4>

08002cc4 <siscanf>:
 8002cc4:	b40e      	push	{r1, r2, r3}
 8002cc6:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002cca:	b530      	push	{r4, r5, lr}
 8002ccc:	b09c      	sub	sp, #112	; 0x70
 8002cce:	ac1f      	add	r4, sp, #124	; 0x7c
 8002cd0:	f854 5b04 	ldr.w	r5, [r4], #4
 8002cd4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002cd8:	9002      	str	r0, [sp, #8]
 8002cda:	9006      	str	r0, [sp, #24]
 8002cdc:	f7fd fa36 	bl	800014c <strlen>
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <siscanf+0x4c>)
 8002ce2:	9003      	str	r0, [sp, #12]
 8002ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002cea:	9314      	str	r3, [sp, #80]	; 0x50
 8002cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf0:	9007      	str	r0, [sp, #28]
 8002cf2:	4808      	ldr	r0, [pc, #32]	; (8002d14 <siscanf+0x50>)
 8002cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002cf8:	462a      	mov	r2, r5
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	a902      	add	r1, sp, #8
 8002cfe:	6800      	ldr	r0, [r0, #0]
 8002d00:	9401      	str	r4, [sp, #4]
 8002d02:	f000 f87d 	bl	8002e00 <__ssvfiscanf_r>
 8002d06:	b01c      	add	sp, #112	; 0x70
 8002d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d0c:	b003      	add	sp, #12
 8002d0e:	4770      	bx	lr
 8002d10:	08002d19 	.word	0x08002d19
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <__seofread>:
 8002d18:	2000      	movs	r0, #0
 8002d1a:	4770      	bx	lr

08002d1c <strstr>:
 8002d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1e:	780c      	ldrb	r4, [r1, #0]
 8002d20:	b164      	cbz	r4, 8002d3c <strstr+0x20>
 8002d22:	4603      	mov	r3, r0
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	1c5e      	adds	r6, r3, #1
 8002d2a:	b90a      	cbnz	r2, 8002d30 <strstr+0x14>
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	e005      	b.n	8002d3c <strstr+0x20>
 8002d30:	4294      	cmp	r4, r2
 8002d32:	d108      	bne.n	8002d46 <strstr+0x2a>
 8002d34:	460d      	mov	r5, r1
 8002d36:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8002d3a:	b902      	cbnz	r2, 8002d3e <strstr+0x22>
 8002d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d3e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002d42:	4297      	cmp	r7, r2
 8002d44:	d0f7      	beq.n	8002d36 <strstr+0x1a>
 8002d46:	4633      	mov	r3, r6
 8002d48:	e7ec      	b.n	8002d24 <strstr+0x8>

08002d4a <_sungetc_r>:
 8002d4a:	b538      	push	{r3, r4, r5, lr}
 8002d4c:	1c4b      	adds	r3, r1, #1
 8002d4e:	4614      	mov	r4, r2
 8002d50:	d103      	bne.n	8002d5a <_sungetc_r+0x10>
 8002d52:	f04f 35ff 	mov.w	r5, #4294967295
 8002d56:	4628      	mov	r0, r5
 8002d58:	bd38      	pop	{r3, r4, r5, pc}
 8002d5a:	8993      	ldrh	r3, [r2, #12]
 8002d5c:	b2cd      	uxtb	r5, r1
 8002d5e:	f023 0320 	bic.w	r3, r3, #32
 8002d62:	8193      	strh	r3, [r2, #12]
 8002d64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d66:	6852      	ldr	r2, [r2, #4]
 8002d68:	b18b      	cbz	r3, 8002d8e <_sungetc_r+0x44>
 8002d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	dd08      	ble.n	8002d82 <_sungetc_r+0x38>
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	6022      	str	r2, [r4, #0]
 8002d76:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	6063      	str	r3, [r4, #4]
 8002d80:	e7e9      	b.n	8002d56 <_sungetc_r+0xc>
 8002d82:	4621      	mov	r1, r4
 8002d84:	f000 fc40 	bl	8003608 <__submore>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d0f1      	beq.n	8002d70 <_sungetc_r+0x26>
 8002d8c:	e7e1      	b.n	8002d52 <_sungetc_r+0x8>
 8002d8e:	6921      	ldr	r1, [r4, #16]
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	b151      	cbz	r1, 8002daa <_sungetc_r+0x60>
 8002d94:	4299      	cmp	r1, r3
 8002d96:	d208      	bcs.n	8002daa <_sungetc_r+0x60>
 8002d98:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002d9c:	42a9      	cmp	r1, r5
 8002d9e:	d104      	bne.n	8002daa <_sungetc_r+0x60>
 8002da0:	3b01      	subs	r3, #1
 8002da2:	3201      	adds	r2, #1
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	6062      	str	r2, [r4, #4]
 8002da8:	e7d5      	b.n	8002d56 <_sungetc_r+0xc>
 8002daa:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8002dae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002db2:	6363      	str	r3, [r4, #52]	; 0x34
 8002db4:	2303      	movs	r3, #3
 8002db6:	63a3      	str	r3, [r4, #56]	; 0x38
 8002db8:	4623      	mov	r3, r4
 8002dba:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002dbe:	6023      	str	r3, [r4, #0]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e7dc      	b.n	8002d7e <_sungetc_r+0x34>

08002dc4 <__ssrefill_r>:
 8002dc4:	b510      	push	{r4, lr}
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002dca:	b169      	cbz	r1, 8002de8 <__ssrefill_r+0x24>
 8002dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dd0:	4299      	cmp	r1, r3
 8002dd2:	d001      	beq.n	8002dd8 <__ssrefill_r+0x14>
 8002dd4:	f000 fc6e 	bl	80036b4 <_free_r>
 8002dd8:	2000      	movs	r0, #0
 8002dda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8002dde:	6063      	str	r3, [r4, #4]
 8002de0:	b113      	cbz	r3, 8002de8 <__ssrefill_r+0x24>
 8002de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	bd10      	pop	{r4, pc}
 8002de8:	6923      	ldr	r3, [r4, #16]
 8002dea:	f04f 30ff 	mov.w	r0, #4294967295
 8002dee:	6023      	str	r3, [r4, #0]
 8002df0:	2300      	movs	r3, #0
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	89a3      	ldrh	r3, [r4, #12]
 8002df6:	f043 0320 	orr.w	r3, r3, #32
 8002dfa:	81a3      	strh	r3, [r4, #12]
 8002dfc:	e7f3      	b.n	8002de6 <__ssrefill_r+0x22>
	...

08002e00 <__ssvfiscanf_r>:
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	460c      	mov	r4, r1
 8002e06:	2100      	movs	r1, #0
 8002e08:	4606      	mov	r6, r0
 8002e0a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8002e0e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8002e12:	49b3      	ldr	r1, [pc, #716]	; (80030e0 <__ssvfiscanf_r+0x2e0>)
 8002e14:	f10d 0804 	add.w	r8, sp, #4
 8002e18:	91a0      	str	r1, [sp, #640]	; 0x280
 8002e1a:	49b2      	ldr	r1, [pc, #712]	; (80030e4 <__ssvfiscanf_r+0x2e4>)
 8002e1c:	4fb2      	ldr	r7, [pc, #712]	; (80030e8 <__ssvfiscanf_r+0x2e8>)
 8002e1e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80030ec <__ssvfiscanf_r+0x2ec>
 8002e22:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8002e26:	91a1      	str	r1, [sp, #644]	; 0x284
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f892 a000 	ldrb.w	sl, [r2]
 8002e2e:	f1ba 0f00 	cmp.w	sl, #0
 8002e32:	f000 8153 	beq.w	80030dc <__ssvfiscanf_r+0x2dc>
 8002e36:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8002e3a:	1c55      	adds	r5, r2, #1
 8002e3c:	f013 0308 	ands.w	r3, r3, #8
 8002e40:	d019      	beq.n	8002e76 <__ssvfiscanf_r+0x76>
 8002e42:	6863      	ldr	r3, [r4, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	dd0f      	ble.n	8002e68 <__ssvfiscanf_r+0x68>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	5cba      	ldrb	r2, [r7, r2]
 8002e4e:	0712      	lsls	r2, r2, #28
 8002e50:	d401      	bmi.n	8002e56 <__ssvfiscanf_r+0x56>
 8002e52:	462a      	mov	r2, r5
 8002e54:	e7e9      	b.n	8002e2a <__ssvfiscanf_r+0x2a>
 8002e56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8002e58:	3301      	adds	r3, #1
 8002e5a:	3201      	adds	r2, #1
 8002e5c:	9245      	str	r2, [sp, #276]	; 0x114
 8002e5e:	6862      	ldr	r2, [r4, #4]
 8002e60:	6023      	str	r3, [r4, #0]
 8002e62:	3a01      	subs	r2, #1
 8002e64:	6062      	str	r2, [r4, #4]
 8002e66:	e7ec      	b.n	8002e42 <__ssvfiscanf_r+0x42>
 8002e68:	4621      	mov	r1, r4
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002e6e:	4798      	blx	r3
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d0e9      	beq.n	8002e48 <__ssvfiscanf_r+0x48>
 8002e74:	e7ed      	b.n	8002e52 <__ssvfiscanf_r+0x52>
 8002e76:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8002e7a:	f040 8086 	bne.w	8002f8a <__ssvfiscanf_r+0x18a>
 8002e7e:	9341      	str	r3, [sp, #260]	; 0x104
 8002e80:	9343      	str	r3, [sp, #268]	; 0x10c
 8002e82:	7853      	ldrb	r3, [r2, #1]
 8002e84:	2b2a      	cmp	r3, #42	; 0x2a
 8002e86:	bf04      	itt	eq
 8002e88:	2310      	moveq	r3, #16
 8002e8a:	1c95      	addeq	r5, r2, #2
 8002e8c:	f04f 020a 	mov.w	r2, #10
 8002e90:	bf08      	it	eq
 8002e92:	9341      	streq	r3, [sp, #260]	; 0x104
 8002e94:	46ab      	mov	fp, r5
 8002e96:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8002e9a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8002e9e:	2b09      	cmp	r3, #9
 8002ea0:	d91d      	bls.n	8002ede <__ssvfiscanf_r+0xde>
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	4891      	ldr	r0, [pc, #580]	; (80030ec <__ssvfiscanf_r+0x2ec>)
 8002ea6:	f000 fbe9 	bl	800367c <memchr>
 8002eaa:	b140      	cbz	r0, 8002ebe <__ssvfiscanf_r+0xbe>
 8002eac:	2301      	movs	r3, #1
 8002eae:	465d      	mov	r5, fp
 8002eb0:	eba0 0009 	sub.w	r0, r0, r9
 8002eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8002eb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002eba:	4318      	orrs	r0, r3
 8002ebc:	9041      	str	r0, [sp, #260]	; 0x104
 8002ebe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ec2:	2b78      	cmp	r3, #120	; 0x78
 8002ec4:	d806      	bhi.n	8002ed4 <__ssvfiscanf_r+0xd4>
 8002ec6:	2b57      	cmp	r3, #87	; 0x57
 8002ec8:	d810      	bhi.n	8002eec <__ssvfiscanf_r+0xec>
 8002eca:	2b25      	cmp	r3, #37	; 0x25
 8002ecc:	d05d      	beq.n	8002f8a <__ssvfiscanf_r+0x18a>
 8002ece:	d857      	bhi.n	8002f80 <__ssvfiscanf_r+0x180>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d075      	beq.n	8002fc0 <__ssvfiscanf_r+0x1c0>
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	9347      	str	r3, [sp, #284]	; 0x11c
 8002ed8:	230a      	movs	r3, #10
 8002eda:	9342      	str	r3, [sp, #264]	; 0x108
 8002edc:	e082      	b.n	8002fe4 <__ssvfiscanf_r+0x1e4>
 8002ede:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002ee0:	465d      	mov	r5, fp
 8002ee2:	fb02 1303 	mla	r3, r2, r3, r1
 8002ee6:	3b30      	subs	r3, #48	; 0x30
 8002ee8:	9343      	str	r3, [sp, #268]	; 0x10c
 8002eea:	e7d3      	b.n	8002e94 <__ssvfiscanf_r+0x94>
 8002eec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8002ef0:	2a20      	cmp	r2, #32
 8002ef2:	d8ef      	bhi.n	8002ed4 <__ssvfiscanf_r+0xd4>
 8002ef4:	a101      	add	r1, pc, #4	; (adr r1, 8002efc <__ssvfiscanf_r+0xfc>)
 8002ef6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002fcf 	.word	0x08002fcf
 8002f00:	08002ed5 	.word	0x08002ed5
 8002f04:	08002ed5 	.word	0x08002ed5
 8002f08:	0800302d 	.word	0x0800302d
 8002f0c:	08002ed5 	.word	0x08002ed5
 8002f10:	08002ed5 	.word	0x08002ed5
 8002f14:	08002ed5 	.word	0x08002ed5
 8002f18:	08002ed5 	.word	0x08002ed5
 8002f1c:	08002ed5 	.word	0x08002ed5
 8002f20:	08002ed5 	.word	0x08002ed5
 8002f24:	08002ed5 	.word	0x08002ed5
 8002f28:	08003043 	.word	0x08003043
 8002f2c:	08003019 	.word	0x08003019
 8002f30:	08002f87 	.word	0x08002f87
 8002f34:	08002f87 	.word	0x08002f87
 8002f38:	08002f87 	.word	0x08002f87
 8002f3c:	08002ed5 	.word	0x08002ed5
 8002f40:	0800301d 	.word	0x0800301d
 8002f44:	08002ed5 	.word	0x08002ed5
 8002f48:	08002ed5 	.word	0x08002ed5
 8002f4c:	08002ed5 	.word	0x08002ed5
 8002f50:	08002ed5 	.word	0x08002ed5
 8002f54:	08003053 	.word	0x08003053
 8002f58:	08003025 	.word	0x08003025
 8002f5c:	08002fc7 	.word	0x08002fc7
 8002f60:	08002ed5 	.word	0x08002ed5
 8002f64:	08002ed5 	.word	0x08002ed5
 8002f68:	0800304f 	.word	0x0800304f
 8002f6c:	08002ed5 	.word	0x08002ed5
 8002f70:	08003019 	.word	0x08003019
 8002f74:	08002ed5 	.word	0x08002ed5
 8002f78:	08002ed5 	.word	0x08002ed5
 8002f7c:	08002fcf 	.word	0x08002fcf
 8002f80:	3b45      	subs	r3, #69	; 0x45
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d8a6      	bhi.n	8002ed4 <__ssvfiscanf_r+0xd4>
 8002f86:	2305      	movs	r3, #5
 8002f88:	e02b      	b.n	8002fe2 <__ssvfiscanf_r+0x1e2>
 8002f8a:	6863      	ldr	r3, [r4, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	dd0d      	ble.n	8002fac <__ssvfiscanf_r+0x1ac>
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	781a      	ldrb	r2, [r3, #0]
 8002f94:	4552      	cmp	r2, sl
 8002f96:	f040 80a1 	bne.w	80030dc <__ssvfiscanf_r+0x2dc>
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	6862      	ldr	r2, [r4, #4]
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	6062      	str	r2, [r4, #4]
 8002fa8:	9345      	str	r3, [sp, #276]	; 0x114
 8002faa:	e752      	b.n	8002e52 <__ssvfiscanf_r+0x52>
 8002fac:	4621      	mov	r1, r4
 8002fae:	4630      	mov	r0, r6
 8002fb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8002fb2:	4798      	blx	r3
 8002fb4:	2800      	cmp	r0, #0
 8002fb6:	d0eb      	beq.n	8002f90 <__ssvfiscanf_r+0x190>
 8002fb8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	f040 8084 	bne.w	80030c8 <__ssvfiscanf_r+0x2c8>
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc4:	e086      	b.n	80030d4 <__ssvfiscanf_r+0x2d4>
 8002fc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	9241      	str	r2, [sp, #260]	; 0x104
 8002fce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8002fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd4:	9241      	str	r2, [sp, #260]	; 0x104
 8002fd6:	2210      	movs	r2, #16
 8002fd8:	2b6f      	cmp	r3, #111	; 0x6f
 8002fda:	bf34      	ite	cc
 8002fdc:	2303      	movcc	r3, #3
 8002fde:	2304      	movcs	r3, #4
 8002fe0:	9242      	str	r2, [sp, #264]	; 0x108
 8002fe2:	9347      	str	r3, [sp, #284]	; 0x11c
 8002fe4:	6863      	ldr	r3, [r4, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	dd41      	ble.n	800306e <__ssvfiscanf_r+0x26e>
 8002fea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002fec:	0659      	lsls	r1, r3, #25
 8002fee:	d404      	bmi.n	8002ffa <__ssvfiscanf_r+0x1fa>
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	781a      	ldrb	r2, [r3, #0]
 8002ff4:	5cba      	ldrb	r2, [r7, r2]
 8002ff6:	0712      	lsls	r2, r2, #28
 8002ff8:	d440      	bmi.n	800307c <__ssvfiscanf_r+0x27c>
 8002ffa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	dc4f      	bgt.n	80030a0 <__ssvfiscanf_r+0x2a0>
 8003000:	466b      	mov	r3, sp
 8003002:	4622      	mov	r2, r4
 8003004:	4630      	mov	r0, r6
 8003006:	a941      	add	r1, sp, #260	; 0x104
 8003008:	f000 f874 	bl	80030f4 <_scanf_chars>
 800300c:	2801      	cmp	r0, #1
 800300e:	d065      	beq.n	80030dc <__ssvfiscanf_r+0x2dc>
 8003010:	2802      	cmp	r0, #2
 8003012:	f47f af1e 	bne.w	8002e52 <__ssvfiscanf_r+0x52>
 8003016:	e7cf      	b.n	8002fb8 <__ssvfiscanf_r+0x1b8>
 8003018:	220a      	movs	r2, #10
 800301a:	e7dd      	b.n	8002fd8 <__ssvfiscanf_r+0x1d8>
 800301c:	2300      	movs	r3, #0
 800301e:	9342      	str	r3, [sp, #264]	; 0x108
 8003020:	2303      	movs	r3, #3
 8003022:	e7de      	b.n	8002fe2 <__ssvfiscanf_r+0x1e2>
 8003024:	2308      	movs	r3, #8
 8003026:	9342      	str	r3, [sp, #264]	; 0x108
 8003028:	2304      	movs	r3, #4
 800302a:	e7da      	b.n	8002fe2 <__ssvfiscanf_r+0x1e2>
 800302c:	4629      	mov	r1, r5
 800302e:	4640      	mov	r0, r8
 8003030:	f000 f9aa 	bl	8003388 <__sccl>
 8003034:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003036:	4605      	mov	r5, r0
 8003038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303c:	9341      	str	r3, [sp, #260]	; 0x104
 800303e:	2301      	movs	r3, #1
 8003040:	e7cf      	b.n	8002fe2 <__ssvfiscanf_r+0x1e2>
 8003042:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003048:	9341      	str	r3, [sp, #260]	; 0x104
 800304a:	2300      	movs	r3, #0
 800304c:	e7c9      	b.n	8002fe2 <__ssvfiscanf_r+0x1e2>
 800304e:	2302      	movs	r3, #2
 8003050:	e7c7      	b.n	8002fe2 <__ssvfiscanf_r+0x1e2>
 8003052:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003054:	06c3      	lsls	r3, r0, #27
 8003056:	f53f aefc 	bmi.w	8002e52 <__ssvfiscanf_r+0x52>
 800305a:	9b00      	ldr	r3, [sp, #0]
 800305c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800305e:	1d19      	adds	r1, r3, #4
 8003060:	9100      	str	r1, [sp, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	07c0      	lsls	r0, r0, #31
 8003066:	bf4c      	ite	mi
 8003068:	801a      	strhmi	r2, [r3, #0]
 800306a:	601a      	strpl	r2, [r3, #0]
 800306c:	e6f1      	b.n	8002e52 <__ssvfiscanf_r+0x52>
 800306e:	4621      	mov	r1, r4
 8003070:	4630      	mov	r0, r6
 8003072:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003074:	4798      	blx	r3
 8003076:	2800      	cmp	r0, #0
 8003078:	d0b7      	beq.n	8002fea <__ssvfiscanf_r+0x1ea>
 800307a:	e79d      	b.n	8002fb8 <__ssvfiscanf_r+0x1b8>
 800307c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800307e:	3201      	adds	r2, #1
 8003080:	9245      	str	r2, [sp, #276]	; 0x114
 8003082:	6862      	ldr	r2, [r4, #4]
 8003084:	3a01      	subs	r2, #1
 8003086:	2a00      	cmp	r2, #0
 8003088:	6062      	str	r2, [r4, #4]
 800308a:	dd02      	ble.n	8003092 <__ssvfiscanf_r+0x292>
 800308c:	3301      	adds	r3, #1
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	e7ae      	b.n	8002ff0 <__ssvfiscanf_r+0x1f0>
 8003092:	4621      	mov	r1, r4
 8003094:	4630      	mov	r0, r6
 8003096:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003098:	4798      	blx	r3
 800309a:	2800      	cmp	r0, #0
 800309c:	d0a8      	beq.n	8002ff0 <__ssvfiscanf_r+0x1f0>
 800309e:	e78b      	b.n	8002fb8 <__ssvfiscanf_r+0x1b8>
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	dc06      	bgt.n	80030b2 <__ssvfiscanf_r+0x2b2>
 80030a4:	466b      	mov	r3, sp
 80030a6:	4622      	mov	r2, r4
 80030a8:	4630      	mov	r0, r6
 80030aa:	a941      	add	r1, sp, #260	; 0x104
 80030ac:	f000 f87a 	bl	80031a4 <_scanf_i>
 80030b0:	e7ac      	b.n	800300c <__ssvfiscanf_r+0x20c>
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <__ssvfiscanf_r+0x2f0>)
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f43f aecc 	beq.w	8002e52 <__ssvfiscanf_r+0x52>
 80030ba:	466b      	mov	r3, sp
 80030bc:	4622      	mov	r2, r4
 80030be:	4630      	mov	r0, r6
 80030c0:	a941      	add	r1, sp, #260	; 0x104
 80030c2:	f3af 8000 	nop.w
 80030c6:	e7a1      	b.n	800300c <__ssvfiscanf_r+0x20c>
 80030c8:	89a3      	ldrh	r3, [r4, #12]
 80030ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80030ce:	bf18      	it	ne
 80030d0:	f04f 30ff 	movne.w	r0, #4294967295
 80030d4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80030d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80030de:	e7f9      	b.n	80030d4 <__ssvfiscanf_r+0x2d4>
 80030e0:	08002d4b 	.word	0x08002d4b
 80030e4:	08002dc5 	.word	0x08002dc5
 80030e8:	08003be8 	.word	0x08003be8
 80030ec:	08003bc8 	.word	0x08003bc8
 80030f0:	00000000 	.word	0x00000000

080030f4 <_scanf_chars>:
 80030f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030f8:	4615      	mov	r5, r2
 80030fa:	688a      	ldr	r2, [r1, #8]
 80030fc:	4680      	mov	r8, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	b932      	cbnz	r2, 8003110 <_scanf_chars+0x1c>
 8003102:	698a      	ldr	r2, [r1, #24]
 8003104:	2a00      	cmp	r2, #0
 8003106:	bf0c      	ite	eq
 8003108:	2201      	moveq	r2, #1
 800310a:	f04f 32ff 	movne.w	r2, #4294967295
 800310e:	608a      	str	r2, [r1, #8]
 8003110:	2700      	movs	r7, #0
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80031a0 <_scanf_chars+0xac>
 8003118:	06d1      	lsls	r1, r2, #27
 800311a:	bf5f      	itttt	pl
 800311c:	681a      	ldrpl	r2, [r3, #0]
 800311e:	1d11      	addpl	r1, r2, #4
 8003120:	6019      	strpl	r1, [r3, #0]
 8003122:	6816      	ldrpl	r6, [r2, #0]
 8003124:	69a0      	ldr	r0, [r4, #24]
 8003126:	b188      	cbz	r0, 800314c <_scanf_chars+0x58>
 8003128:	2801      	cmp	r0, #1
 800312a:	d107      	bne.n	800313c <_scanf_chars+0x48>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	6963      	ldr	r3, [r4, #20]
 8003132:	5c9b      	ldrb	r3, [r3, r2]
 8003134:	b953      	cbnz	r3, 800314c <_scanf_chars+0x58>
 8003136:	bb27      	cbnz	r7, 8003182 <_scanf_chars+0x8e>
 8003138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313c:	2802      	cmp	r0, #2
 800313e:	d120      	bne.n	8003182 <_scanf_chars+0x8e>
 8003140:	682b      	ldr	r3, [r5, #0]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003148:	071b      	lsls	r3, r3, #28
 800314a:	d41a      	bmi.n	8003182 <_scanf_chars+0x8e>
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	3701      	adds	r7, #1
 8003150:	06da      	lsls	r2, r3, #27
 8003152:	bf5e      	ittt	pl
 8003154:	682b      	ldrpl	r3, [r5, #0]
 8003156:	781b      	ldrbpl	r3, [r3, #0]
 8003158:	f806 3b01 	strbpl.w	r3, [r6], #1
 800315c:	682a      	ldr	r2, [r5, #0]
 800315e:	686b      	ldr	r3, [r5, #4]
 8003160:	3201      	adds	r2, #1
 8003162:	602a      	str	r2, [r5, #0]
 8003164:	68a2      	ldr	r2, [r4, #8]
 8003166:	3b01      	subs	r3, #1
 8003168:	3a01      	subs	r2, #1
 800316a:	606b      	str	r3, [r5, #4]
 800316c:	60a2      	str	r2, [r4, #8]
 800316e:	b142      	cbz	r2, 8003182 <_scanf_chars+0x8e>
 8003170:	2b00      	cmp	r3, #0
 8003172:	dcd7      	bgt.n	8003124 <_scanf_chars+0x30>
 8003174:	4629      	mov	r1, r5
 8003176:	4640      	mov	r0, r8
 8003178:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800317c:	4798      	blx	r3
 800317e:	2800      	cmp	r0, #0
 8003180:	d0d0      	beq.n	8003124 <_scanf_chars+0x30>
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	f013 0310 	ands.w	r3, r3, #16
 8003188:	d105      	bne.n	8003196 <_scanf_chars+0xa2>
 800318a:	68e2      	ldr	r2, [r4, #12]
 800318c:	3201      	adds	r2, #1
 800318e:	60e2      	str	r2, [r4, #12]
 8003190:	69a2      	ldr	r2, [r4, #24]
 8003192:	b102      	cbz	r2, 8003196 <_scanf_chars+0xa2>
 8003194:	7033      	strb	r3, [r6, #0]
 8003196:	6923      	ldr	r3, [r4, #16]
 8003198:	2000      	movs	r0, #0
 800319a:	441f      	add	r7, r3
 800319c:	6127      	str	r7, [r4, #16]
 800319e:	e7cb      	b.n	8003138 <_scanf_chars+0x44>
 80031a0:	08003be8 	.word	0x08003be8

080031a4 <_scanf_i>:
 80031a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a8:	460c      	mov	r4, r1
 80031aa:	4698      	mov	r8, r3
 80031ac:	4b72      	ldr	r3, [pc, #456]	; (8003378 <_scanf_i+0x1d4>)
 80031ae:	b087      	sub	sp, #28
 80031b0:	4682      	mov	sl, r0
 80031b2:	4616      	mov	r6, r2
 80031b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031b8:	ab03      	add	r3, sp, #12
 80031ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80031be:	4b6f      	ldr	r3, [pc, #444]	; (800337c <_scanf_i+0x1d8>)
 80031c0:	69a1      	ldr	r1, [r4, #24]
 80031c2:	4a6f      	ldr	r2, [pc, #444]	; (8003380 <_scanf_i+0x1dc>)
 80031c4:	4627      	mov	r7, r4
 80031c6:	2903      	cmp	r1, #3
 80031c8:	bf18      	it	ne
 80031ca:	461a      	movne	r2, r3
 80031cc:	68a3      	ldr	r3, [r4, #8]
 80031ce:	9201      	str	r2, [sp, #4]
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80031d6:	bf81      	itttt	hi
 80031d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80031dc:	eb03 0905 	addhi.w	r9, r3, r5
 80031e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80031e4:	60a3      	strhi	r3, [r4, #8]
 80031e6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80031ea:	bf98      	it	ls
 80031ec:	f04f 0900 	movls.w	r9, #0
 80031f0:	463d      	mov	r5, r7
 80031f2:	f04f 0b00 	mov.w	fp, #0
 80031f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80031fa:	6023      	str	r3, [r4, #0]
 80031fc:	6831      	ldr	r1, [r6, #0]
 80031fe:	ab03      	add	r3, sp, #12
 8003200:	2202      	movs	r2, #2
 8003202:	7809      	ldrb	r1, [r1, #0]
 8003204:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003208:	f000 fa38 	bl	800367c <memchr>
 800320c:	b328      	cbz	r0, 800325a <_scanf_i+0xb6>
 800320e:	f1bb 0f01 	cmp.w	fp, #1
 8003212:	d159      	bne.n	80032c8 <_scanf_i+0x124>
 8003214:	6862      	ldr	r2, [r4, #4]
 8003216:	b92a      	cbnz	r2, 8003224 <_scanf_i+0x80>
 8003218:	2308      	movs	r3, #8
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	6063      	str	r3, [r4, #4]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	6022      	str	r2, [r4, #0]
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800322a:	6022      	str	r2, [r4, #0]
 800322c:	68a2      	ldr	r2, [r4, #8]
 800322e:	1e51      	subs	r1, r2, #1
 8003230:	60a1      	str	r1, [r4, #8]
 8003232:	b192      	cbz	r2, 800325a <_scanf_i+0xb6>
 8003234:	6832      	ldr	r2, [r6, #0]
 8003236:	1c51      	adds	r1, r2, #1
 8003238:	6031      	str	r1, [r6, #0]
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	f805 2b01 	strb.w	r2, [r5], #1
 8003240:	6872      	ldr	r2, [r6, #4]
 8003242:	3a01      	subs	r2, #1
 8003244:	2a00      	cmp	r2, #0
 8003246:	6072      	str	r2, [r6, #4]
 8003248:	dc07      	bgt.n	800325a <_scanf_i+0xb6>
 800324a:	4631      	mov	r1, r6
 800324c:	4650      	mov	r0, sl
 800324e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003252:	4790      	blx	r2
 8003254:	2800      	cmp	r0, #0
 8003256:	f040 8085 	bne.w	8003364 <_scanf_i+0x1c0>
 800325a:	f10b 0b01 	add.w	fp, fp, #1
 800325e:	f1bb 0f03 	cmp.w	fp, #3
 8003262:	d1cb      	bne.n	80031fc <_scanf_i+0x58>
 8003264:	6863      	ldr	r3, [r4, #4]
 8003266:	b90b      	cbnz	r3, 800326c <_scanf_i+0xc8>
 8003268:	230a      	movs	r3, #10
 800326a:	6063      	str	r3, [r4, #4]
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	4945      	ldr	r1, [pc, #276]	; (8003384 <_scanf_i+0x1e0>)
 8003270:	6960      	ldr	r0, [r4, #20]
 8003272:	1ac9      	subs	r1, r1, r3
 8003274:	f000 f888 	bl	8003388 <__sccl>
 8003278:	f04f 0b00 	mov.w	fp, #0
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d03d      	beq.n	8003300 <_scanf_i+0x15c>
 8003284:	6831      	ldr	r1, [r6, #0]
 8003286:	6960      	ldr	r0, [r4, #20]
 8003288:	f891 c000 	ldrb.w	ip, [r1]
 800328c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003290:	2800      	cmp	r0, #0
 8003292:	d035      	beq.n	8003300 <_scanf_i+0x15c>
 8003294:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003298:	d124      	bne.n	80032e4 <_scanf_i+0x140>
 800329a:	0510      	lsls	r0, r2, #20
 800329c:	d522      	bpl.n	80032e4 <_scanf_i+0x140>
 800329e:	f10b 0b01 	add.w	fp, fp, #1
 80032a2:	f1b9 0f00 	cmp.w	r9, #0
 80032a6:	d003      	beq.n	80032b0 <_scanf_i+0x10c>
 80032a8:	3301      	adds	r3, #1
 80032aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80032ae:	60a3      	str	r3, [r4, #8]
 80032b0:	6873      	ldr	r3, [r6, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	6073      	str	r3, [r6, #4]
 80032b8:	dd1b      	ble.n	80032f2 <_scanf_i+0x14e>
 80032ba:	6833      	ldr	r3, [r6, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	6033      	str	r3, [r6, #0]
 80032c0:	68a3      	ldr	r3, [r4, #8]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	60a3      	str	r3, [r4, #8]
 80032c6:	e7d9      	b.n	800327c <_scanf_i+0xd8>
 80032c8:	f1bb 0f02 	cmp.w	fp, #2
 80032cc:	d1ae      	bne.n	800322c <_scanf_i+0x88>
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80032d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80032d8:	d1bf      	bne.n	800325a <_scanf_i+0xb6>
 80032da:	2310      	movs	r3, #16
 80032dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e0:	6063      	str	r3, [r4, #4]
 80032e2:	e7a2      	b.n	800322a <_scanf_i+0x86>
 80032e4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80032e8:	6022      	str	r2, [r4, #0]
 80032ea:	780b      	ldrb	r3, [r1, #0]
 80032ec:	f805 3b01 	strb.w	r3, [r5], #1
 80032f0:	e7de      	b.n	80032b0 <_scanf_i+0x10c>
 80032f2:	4631      	mov	r1, r6
 80032f4:	4650      	mov	r0, sl
 80032f6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80032fa:	4798      	blx	r3
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d0df      	beq.n	80032c0 <_scanf_i+0x11c>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	05d9      	lsls	r1, r3, #23
 8003304:	d50d      	bpl.n	8003322 <_scanf_i+0x17e>
 8003306:	42bd      	cmp	r5, r7
 8003308:	d909      	bls.n	800331e <_scanf_i+0x17a>
 800330a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800330e:	4632      	mov	r2, r6
 8003310:	4650      	mov	r0, sl
 8003312:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003316:	f105 39ff 	add.w	r9, r5, #4294967295
 800331a:	4798      	blx	r3
 800331c:	464d      	mov	r5, r9
 800331e:	42bd      	cmp	r5, r7
 8003320:	d028      	beq.n	8003374 <_scanf_i+0x1d0>
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	f012 0210 	ands.w	r2, r2, #16
 8003328:	d113      	bne.n	8003352 <_scanf_i+0x1ae>
 800332a:	702a      	strb	r2, [r5, #0]
 800332c:	4639      	mov	r1, r7
 800332e:	6863      	ldr	r3, [r4, #4]
 8003330:	4650      	mov	r0, sl
 8003332:	9e01      	ldr	r6, [sp, #4]
 8003334:	47b0      	blx	r6
 8003336:	f8d8 3000 	ldr.w	r3, [r8]
 800333a:	6821      	ldr	r1, [r4, #0]
 800333c:	1d1a      	adds	r2, r3, #4
 800333e:	f8c8 2000 	str.w	r2, [r8]
 8003342:	f011 0f20 	tst.w	r1, #32
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	d00f      	beq.n	800336a <_scanf_i+0x1c6>
 800334a:	6018      	str	r0, [r3, #0]
 800334c:	68e3      	ldr	r3, [r4, #12]
 800334e:	3301      	adds	r3, #1
 8003350:	60e3      	str	r3, [r4, #12]
 8003352:	2000      	movs	r0, #0
 8003354:	1bed      	subs	r5, r5, r7
 8003356:	44ab      	add	fp, r5
 8003358:	6925      	ldr	r5, [r4, #16]
 800335a:	445d      	add	r5, fp
 800335c:	6125      	str	r5, [r4, #16]
 800335e:	b007      	add	sp, #28
 8003360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003364:	f04f 0b00 	mov.w	fp, #0
 8003368:	e7ca      	b.n	8003300 <_scanf_i+0x15c>
 800336a:	07ca      	lsls	r2, r1, #31
 800336c:	bf4c      	ite	mi
 800336e:	8018      	strhmi	r0, [r3, #0]
 8003370:	6018      	strpl	r0, [r3, #0]
 8003372:	e7eb      	b.n	800334c <_scanf_i+0x1a8>
 8003374:	2001      	movs	r0, #1
 8003376:	e7f2      	b.n	800335e <_scanf_i+0x1ba>
 8003378:	08003ba4 	.word	0x08003ba4
 800337c:	08003605 	.word	0x08003605
 8003380:	08003509 	.word	0x08003509
 8003384:	08003be5 	.word	0x08003be5

08003388 <__sccl>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	780b      	ldrb	r3, [r1, #0]
 800338c:	4604      	mov	r4, r0
 800338e:	2b5e      	cmp	r3, #94	; 0x5e
 8003390:	bf13      	iteet	ne
 8003392:	2200      	movne	r2, #0
 8003394:	2201      	moveq	r2, #1
 8003396:	784b      	ldrbeq	r3, [r1, #1]
 8003398:	1c48      	addne	r0, r1, #1
 800339a:	bf08      	it	eq
 800339c:	1c88      	addeq	r0, r1, #2
 800339e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80033a2:	1e61      	subs	r1, r4, #1
 80033a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80033a8:	42a9      	cmp	r1, r5
 80033aa:	d1fb      	bne.n	80033a4 <__sccl+0x1c>
 80033ac:	b90b      	cbnz	r3, 80033b2 <__sccl+0x2a>
 80033ae:	3801      	subs	r0, #1
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
 80033b2:	f082 0101 	eor.w	r1, r2, #1
 80033b6:	54e1      	strb	r1, [r4, r3]
 80033b8:	1c42      	adds	r2, r0, #1
 80033ba:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80033be:	4610      	mov	r0, r2
 80033c0:	2d2d      	cmp	r5, #45	; 0x2d
 80033c2:	f102 36ff 	add.w	r6, r2, #4294967295
 80033c6:	d006      	beq.n	80033d6 <__sccl+0x4e>
 80033c8:	2d5d      	cmp	r5, #93	; 0x5d
 80033ca:	d0f1      	beq.n	80033b0 <__sccl+0x28>
 80033cc:	b90d      	cbnz	r5, 80033d2 <__sccl+0x4a>
 80033ce:	4630      	mov	r0, r6
 80033d0:	e7ee      	b.n	80033b0 <__sccl+0x28>
 80033d2:	462b      	mov	r3, r5
 80033d4:	e7ef      	b.n	80033b6 <__sccl+0x2e>
 80033d6:	7816      	ldrb	r6, [r2, #0]
 80033d8:	2e5d      	cmp	r6, #93	; 0x5d
 80033da:	d0fa      	beq.n	80033d2 <__sccl+0x4a>
 80033dc:	42b3      	cmp	r3, r6
 80033de:	dcf8      	bgt.n	80033d2 <__sccl+0x4a>
 80033e0:	4618      	mov	r0, r3
 80033e2:	3001      	adds	r0, #1
 80033e4:	4286      	cmp	r6, r0
 80033e6:	5421      	strb	r1, [r4, r0]
 80033e8:	dcfb      	bgt.n	80033e2 <__sccl+0x5a>
 80033ea:	43d8      	mvns	r0, r3
 80033ec:	4430      	add	r0, r6
 80033ee:	42b3      	cmp	r3, r6
 80033f0:	bfa8      	it	ge
 80033f2:	2000      	movge	r0, #0
 80033f4:	1c5d      	adds	r5, r3, #1
 80033f6:	182b      	adds	r3, r5, r0
 80033f8:	3202      	adds	r2, #2
 80033fa:	e7de      	b.n	80033ba <__sccl+0x32>

080033fc <_strtol_l.isra.0>:
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003402:	4686      	mov	lr, r0
 8003404:	d001      	beq.n	800340a <_strtol_l.isra.0+0xe>
 8003406:	2b24      	cmp	r3, #36	; 0x24
 8003408:	d906      	bls.n	8003418 <_strtol_l.isra.0+0x1c>
 800340a:	f7ff fc29 	bl	8002c60 <__errno>
 800340e:	2316      	movs	r3, #22
 8003410:	6003      	str	r3, [r0, #0]
 8003412:	2000      	movs	r0, #0
 8003414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003418:	468c      	mov	ip, r1
 800341a:	4e3a      	ldr	r6, [pc, #232]	; (8003504 <_strtol_l.isra.0+0x108>)
 800341c:	4660      	mov	r0, ip
 800341e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003422:	5da5      	ldrb	r5, [r4, r6]
 8003424:	f015 0508 	ands.w	r5, r5, #8
 8003428:	d1f8      	bne.n	800341c <_strtol_l.isra.0+0x20>
 800342a:	2c2d      	cmp	r4, #45	; 0x2d
 800342c:	d133      	bne.n	8003496 <_strtol_l.isra.0+0x9a>
 800342e:	f04f 0801 	mov.w	r8, #1
 8003432:	f89c 4000 	ldrb.w	r4, [ip]
 8003436:	f100 0c02 	add.w	ip, r0, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d05d      	beq.n	80034fa <_strtol_l.isra.0+0xfe>
 800343e:	2b10      	cmp	r3, #16
 8003440:	d10c      	bne.n	800345c <_strtol_l.isra.0+0x60>
 8003442:	2c30      	cmp	r4, #48	; 0x30
 8003444:	d10a      	bne.n	800345c <_strtol_l.isra.0+0x60>
 8003446:	f89c 0000 	ldrb.w	r0, [ip]
 800344a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800344e:	2858      	cmp	r0, #88	; 0x58
 8003450:	d14e      	bne.n	80034f0 <_strtol_l.isra.0+0xf4>
 8003452:	2310      	movs	r3, #16
 8003454:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003458:	f10c 0c02 	add.w	ip, ip, #2
 800345c:	2500      	movs	r5, #0
 800345e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003462:	3f01      	subs	r7, #1
 8003464:	fbb7 f9f3 	udiv	r9, r7, r3
 8003468:	4628      	mov	r0, r5
 800346a:	fb03 7a19 	mls	sl, r3, r9, r7
 800346e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003472:	2e09      	cmp	r6, #9
 8003474:	d818      	bhi.n	80034a8 <_strtol_l.isra.0+0xac>
 8003476:	4634      	mov	r4, r6
 8003478:	42a3      	cmp	r3, r4
 800347a:	dd24      	ble.n	80034c6 <_strtol_l.isra.0+0xca>
 800347c:	2d00      	cmp	r5, #0
 800347e:	db1f      	blt.n	80034c0 <_strtol_l.isra.0+0xc4>
 8003480:	4581      	cmp	r9, r0
 8003482:	d31d      	bcc.n	80034c0 <_strtol_l.isra.0+0xc4>
 8003484:	d101      	bne.n	800348a <_strtol_l.isra.0+0x8e>
 8003486:	45a2      	cmp	sl, r4
 8003488:	db1a      	blt.n	80034c0 <_strtol_l.isra.0+0xc4>
 800348a:	2501      	movs	r5, #1
 800348c:	fb00 4003 	mla	r0, r0, r3, r4
 8003490:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003494:	e7eb      	b.n	800346e <_strtol_l.isra.0+0x72>
 8003496:	2c2b      	cmp	r4, #43	; 0x2b
 8003498:	bf08      	it	eq
 800349a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800349e:	46a8      	mov	r8, r5
 80034a0:	bf08      	it	eq
 80034a2:	f100 0c02 	addeq.w	ip, r0, #2
 80034a6:	e7c8      	b.n	800343a <_strtol_l.isra.0+0x3e>
 80034a8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80034ac:	2e19      	cmp	r6, #25
 80034ae:	d801      	bhi.n	80034b4 <_strtol_l.isra.0+0xb8>
 80034b0:	3c37      	subs	r4, #55	; 0x37
 80034b2:	e7e1      	b.n	8003478 <_strtol_l.isra.0+0x7c>
 80034b4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80034b8:	2e19      	cmp	r6, #25
 80034ba:	d804      	bhi.n	80034c6 <_strtol_l.isra.0+0xca>
 80034bc:	3c57      	subs	r4, #87	; 0x57
 80034be:	e7db      	b.n	8003478 <_strtol_l.isra.0+0x7c>
 80034c0:	f04f 35ff 	mov.w	r5, #4294967295
 80034c4:	e7e4      	b.n	8003490 <_strtol_l.isra.0+0x94>
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	da08      	bge.n	80034dc <_strtol_l.isra.0+0xe0>
 80034ca:	2322      	movs	r3, #34	; 0x22
 80034cc:	4638      	mov	r0, r7
 80034ce:	f8ce 3000 	str.w	r3, [lr]
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	d09e      	beq.n	8003414 <_strtol_l.isra.0+0x18>
 80034d6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80034da:	e007      	b.n	80034ec <_strtol_l.isra.0+0xf0>
 80034dc:	f1b8 0f00 	cmp.w	r8, #0
 80034e0:	d000      	beq.n	80034e4 <_strtol_l.isra.0+0xe8>
 80034e2:	4240      	negs	r0, r0
 80034e4:	2a00      	cmp	r2, #0
 80034e6:	d095      	beq.n	8003414 <_strtol_l.isra.0+0x18>
 80034e8:	2d00      	cmp	r5, #0
 80034ea:	d1f4      	bne.n	80034d6 <_strtol_l.isra.0+0xda>
 80034ec:	6011      	str	r1, [r2, #0]
 80034ee:	e791      	b.n	8003414 <_strtol_l.isra.0+0x18>
 80034f0:	2430      	movs	r4, #48	; 0x30
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1b2      	bne.n	800345c <_strtol_l.isra.0+0x60>
 80034f6:	2308      	movs	r3, #8
 80034f8:	e7b0      	b.n	800345c <_strtol_l.isra.0+0x60>
 80034fa:	2c30      	cmp	r4, #48	; 0x30
 80034fc:	d0a3      	beq.n	8003446 <_strtol_l.isra.0+0x4a>
 80034fe:	230a      	movs	r3, #10
 8003500:	e7ac      	b.n	800345c <_strtol_l.isra.0+0x60>
 8003502:	bf00      	nop
 8003504:	08003be8 	.word	0x08003be8

08003508 <_strtol_r>:
 8003508:	f7ff bf78 	b.w	80033fc <_strtol_l.isra.0>

0800350c <_strtoul_l.isra.0>:
 800350c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003510:	468c      	mov	ip, r1
 8003512:	4686      	mov	lr, r0
 8003514:	4e3a      	ldr	r6, [pc, #232]	; (8003600 <_strtoul_l.isra.0+0xf4>)
 8003516:	4660      	mov	r0, ip
 8003518:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800351c:	5da5      	ldrb	r5, [r4, r6]
 800351e:	f015 0508 	ands.w	r5, r5, #8
 8003522:	d1f8      	bne.n	8003516 <_strtoul_l.isra.0+0xa>
 8003524:	2c2d      	cmp	r4, #45	; 0x2d
 8003526:	d134      	bne.n	8003592 <_strtoul_l.isra.0+0x86>
 8003528:	f04f 0801 	mov.w	r8, #1
 800352c:	f89c 4000 	ldrb.w	r4, [ip]
 8003530:	f100 0c02 	add.w	ip, r0, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05e      	beq.n	80035f6 <_strtoul_l.isra.0+0xea>
 8003538:	2b10      	cmp	r3, #16
 800353a:	d10c      	bne.n	8003556 <_strtoul_l.isra.0+0x4a>
 800353c:	2c30      	cmp	r4, #48	; 0x30
 800353e:	d10a      	bne.n	8003556 <_strtoul_l.isra.0+0x4a>
 8003540:	f89c 0000 	ldrb.w	r0, [ip]
 8003544:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003548:	2858      	cmp	r0, #88	; 0x58
 800354a:	d14f      	bne.n	80035ec <_strtoul_l.isra.0+0xe0>
 800354c:	2310      	movs	r3, #16
 800354e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003552:	f10c 0c02 	add.w	ip, ip, #2
 8003556:	f04f 37ff 	mov.w	r7, #4294967295
 800355a:	fbb7 f7f3 	udiv	r7, r7, r3
 800355e:	2500      	movs	r5, #0
 8003560:	fb03 f907 	mul.w	r9, r3, r7
 8003564:	4628      	mov	r0, r5
 8003566:	ea6f 0909 	mvn.w	r9, r9
 800356a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800356e:	2e09      	cmp	r6, #9
 8003570:	d818      	bhi.n	80035a4 <_strtoul_l.isra.0+0x98>
 8003572:	4634      	mov	r4, r6
 8003574:	42a3      	cmp	r3, r4
 8003576:	dd24      	ble.n	80035c2 <_strtoul_l.isra.0+0xb6>
 8003578:	2d00      	cmp	r5, #0
 800357a:	db1f      	blt.n	80035bc <_strtoul_l.isra.0+0xb0>
 800357c:	4287      	cmp	r7, r0
 800357e:	d31d      	bcc.n	80035bc <_strtoul_l.isra.0+0xb0>
 8003580:	d101      	bne.n	8003586 <_strtoul_l.isra.0+0x7a>
 8003582:	45a1      	cmp	r9, r4
 8003584:	db1a      	blt.n	80035bc <_strtoul_l.isra.0+0xb0>
 8003586:	2501      	movs	r5, #1
 8003588:	fb00 4003 	mla	r0, r0, r3, r4
 800358c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003590:	e7eb      	b.n	800356a <_strtoul_l.isra.0+0x5e>
 8003592:	2c2b      	cmp	r4, #43	; 0x2b
 8003594:	bf08      	it	eq
 8003596:	f89c 4000 	ldrbeq.w	r4, [ip]
 800359a:	46a8      	mov	r8, r5
 800359c:	bf08      	it	eq
 800359e:	f100 0c02 	addeq.w	ip, r0, #2
 80035a2:	e7c7      	b.n	8003534 <_strtoul_l.isra.0+0x28>
 80035a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80035a8:	2e19      	cmp	r6, #25
 80035aa:	d801      	bhi.n	80035b0 <_strtoul_l.isra.0+0xa4>
 80035ac:	3c37      	subs	r4, #55	; 0x37
 80035ae:	e7e1      	b.n	8003574 <_strtoul_l.isra.0+0x68>
 80035b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80035b4:	2e19      	cmp	r6, #25
 80035b6:	d804      	bhi.n	80035c2 <_strtoul_l.isra.0+0xb6>
 80035b8:	3c57      	subs	r4, #87	; 0x57
 80035ba:	e7db      	b.n	8003574 <_strtoul_l.isra.0+0x68>
 80035bc:	f04f 35ff 	mov.w	r5, #4294967295
 80035c0:	e7e4      	b.n	800358c <_strtoul_l.isra.0+0x80>
 80035c2:	2d00      	cmp	r5, #0
 80035c4:	da07      	bge.n	80035d6 <_strtoul_l.isra.0+0xca>
 80035c6:	2322      	movs	r3, #34	; 0x22
 80035c8:	f04f 30ff 	mov.w	r0, #4294967295
 80035cc:	f8ce 3000 	str.w	r3, [lr]
 80035d0:	b942      	cbnz	r2, 80035e4 <_strtoul_l.isra.0+0xd8>
 80035d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035d6:	f1b8 0f00 	cmp.w	r8, #0
 80035da:	d000      	beq.n	80035de <_strtoul_l.isra.0+0xd2>
 80035dc:	4240      	negs	r0, r0
 80035de:	2a00      	cmp	r2, #0
 80035e0:	d0f7      	beq.n	80035d2 <_strtoul_l.isra.0+0xc6>
 80035e2:	b10d      	cbz	r5, 80035e8 <_strtoul_l.isra.0+0xdc>
 80035e4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	e7f2      	b.n	80035d2 <_strtoul_l.isra.0+0xc6>
 80035ec:	2430      	movs	r4, #48	; 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1b1      	bne.n	8003556 <_strtoul_l.isra.0+0x4a>
 80035f2:	2308      	movs	r3, #8
 80035f4:	e7af      	b.n	8003556 <_strtoul_l.isra.0+0x4a>
 80035f6:	2c30      	cmp	r4, #48	; 0x30
 80035f8:	d0a2      	beq.n	8003540 <_strtoul_l.isra.0+0x34>
 80035fa:	230a      	movs	r3, #10
 80035fc:	e7ab      	b.n	8003556 <_strtoul_l.isra.0+0x4a>
 80035fe:	bf00      	nop
 8003600:	08003be8 	.word	0x08003be8

08003604 <_strtoul_r>:
 8003604:	f7ff bf82 	b.w	800350c <_strtoul_l.isra.0>

08003608 <__submore>:
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	460c      	mov	r4, r1
 800360e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003614:	4299      	cmp	r1, r3
 8003616:	d11b      	bne.n	8003650 <__submore+0x48>
 8003618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800361c:	f000 f896 	bl	800374c <_malloc_r>
 8003620:	b918      	cbnz	r0, 800362a <__submore+0x22>
 8003622:	f04f 30ff 	mov.w	r0, #4294967295
 8003626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003630:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003634:	6360      	str	r0, [r4, #52]	; 0x34
 8003636:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800363a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800363e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003642:	7043      	strb	r3, [r0, #1]
 8003644:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003648:	7003      	strb	r3, [r0, #0]
 800364a:	6020      	str	r0, [r4, #0]
 800364c:	2000      	movs	r0, #0
 800364e:	e7ea      	b.n	8003626 <__submore+0x1e>
 8003650:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003652:	0077      	lsls	r7, r6, #1
 8003654:	463a      	mov	r2, r7
 8003656:	f000 f8d3 	bl	8003800 <_realloc_r>
 800365a:	4605      	mov	r5, r0
 800365c:	2800      	cmp	r0, #0
 800365e:	d0e0      	beq.n	8003622 <__submore+0x1a>
 8003660:	eb00 0806 	add.w	r8, r0, r6
 8003664:	4601      	mov	r1, r0
 8003666:	4632      	mov	r2, r6
 8003668:	4640      	mov	r0, r8
 800366a:	f000 f815 	bl	8003698 <memcpy>
 800366e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003672:	f8c4 8000 	str.w	r8, [r4]
 8003676:	e7e9      	b.n	800364c <__submore+0x44>

08003678 <__retarget_lock_acquire_recursive>:
 8003678:	4770      	bx	lr

0800367a <__retarget_lock_release_recursive>:
 800367a:	4770      	bx	lr

0800367c <memchr>:
 800367c:	4603      	mov	r3, r0
 800367e:	b510      	push	{r4, lr}
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	4402      	add	r2, r0
 8003684:	4293      	cmp	r3, r2
 8003686:	4618      	mov	r0, r3
 8003688:	d101      	bne.n	800368e <memchr+0x12>
 800368a:	2000      	movs	r0, #0
 800368c:	e003      	b.n	8003696 <memchr+0x1a>
 800368e:	7804      	ldrb	r4, [r0, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	428c      	cmp	r4, r1
 8003694:	d1f6      	bne.n	8003684 <memchr+0x8>
 8003696:	bd10      	pop	{r4, pc}

08003698 <memcpy>:
 8003698:	440a      	add	r2, r1
 800369a:	4291      	cmp	r1, r2
 800369c:	f100 33ff 	add.w	r3, r0, #4294967295
 80036a0:	d100      	bne.n	80036a4 <memcpy+0xc>
 80036a2:	4770      	bx	lr
 80036a4:	b510      	push	{r4, lr}
 80036a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036aa:	4291      	cmp	r1, r2
 80036ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b0:	d1f9      	bne.n	80036a6 <memcpy+0xe>
 80036b2:	bd10      	pop	{r4, pc}

080036b4 <_free_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4605      	mov	r5, r0
 80036b8:	2900      	cmp	r1, #0
 80036ba:	d043      	beq.n	8003744 <_free_r+0x90>
 80036bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c0:	1f0c      	subs	r4, r1, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bfb8      	it	lt
 80036c6:	18e4      	addlt	r4, r4, r3
 80036c8:	f000 f8d0 	bl	800386c <__malloc_lock>
 80036cc:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <_free_r+0x94>)
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	4610      	mov	r0, r2
 80036d2:	b933      	cbnz	r3, 80036e2 <_free_r+0x2e>
 80036d4:	6063      	str	r3, [r4, #4]
 80036d6:	6014      	str	r4, [r2, #0]
 80036d8:	4628      	mov	r0, r5
 80036da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036de:	f000 b8cb 	b.w	8003878 <__malloc_unlock>
 80036e2:	42a3      	cmp	r3, r4
 80036e4:	d90a      	bls.n	80036fc <_free_r+0x48>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	1862      	adds	r2, r4, r1
 80036ea:	4293      	cmp	r3, r2
 80036ec:	bf01      	itttt	eq
 80036ee:	681a      	ldreq	r2, [r3, #0]
 80036f0:	685b      	ldreq	r3, [r3, #4]
 80036f2:	1852      	addeq	r2, r2, r1
 80036f4:	6022      	streq	r2, [r4, #0]
 80036f6:	6063      	str	r3, [r4, #4]
 80036f8:	6004      	str	r4, [r0, #0]
 80036fa:	e7ed      	b.n	80036d8 <_free_r+0x24>
 80036fc:	461a      	mov	r2, r3
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	b10b      	cbz	r3, 8003706 <_free_r+0x52>
 8003702:	42a3      	cmp	r3, r4
 8003704:	d9fa      	bls.n	80036fc <_free_r+0x48>
 8003706:	6811      	ldr	r1, [r2, #0]
 8003708:	1850      	adds	r0, r2, r1
 800370a:	42a0      	cmp	r0, r4
 800370c:	d10b      	bne.n	8003726 <_free_r+0x72>
 800370e:	6820      	ldr	r0, [r4, #0]
 8003710:	4401      	add	r1, r0
 8003712:	1850      	adds	r0, r2, r1
 8003714:	4283      	cmp	r3, r0
 8003716:	6011      	str	r1, [r2, #0]
 8003718:	d1de      	bne.n	80036d8 <_free_r+0x24>
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4401      	add	r1, r0
 8003720:	6011      	str	r1, [r2, #0]
 8003722:	6053      	str	r3, [r2, #4]
 8003724:	e7d8      	b.n	80036d8 <_free_r+0x24>
 8003726:	d902      	bls.n	800372e <_free_r+0x7a>
 8003728:	230c      	movs	r3, #12
 800372a:	602b      	str	r3, [r5, #0]
 800372c:	e7d4      	b.n	80036d8 <_free_r+0x24>
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	1821      	adds	r1, r4, r0
 8003732:	428b      	cmp	r3, r1
 8003734:	bf01      	itttt	eq
 8003736:	6819      	ldreq	r1, [r3, #0]
 8003738:	685b      	ldreq	r3, [r3, #4]
 800373a:	1809      	addeq	r1, r1, r0
 800373c:	6021      	streq	r1, [r4, #0]
 800373e:	6063      	str	r3, [r4, #4]
 8003740:	6054      	str	r4, [r2, #4]
 8003742:	e7c9      	b.n	80036d8 <_free_r+0x24>
 8003744:	bd38      	pop	{r3, r4, r5, pc}
 8003746:	bf00      	nop
 8003748:	20000098 	.word	0x20000098

0800374c <_malloc_r>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	1ccd      	adds	r5, r1, #3
 8003750:	f025 0503 	bic.w	r5, r5, #3
 8003754:	3508      	adds	r5, #8
 8003756:	2d0c      	cmp	r5, #12
 8003758:	bf38      	it	cc
 800375a:	250c      	movcc	r5, #12
 800375c:	2d00      	cmp	r5, #0
 800375e:	4606      	mov	r6, r0
 8003760:	db01      	blt.n	8003766 <_malloc_r+0x1a>
 8003762:	42a9      	cmp	r1, r5
 8003764:	d903      	bls.n	800376e <_malloc_r+0x22>
 8003766:	230c      	movs	r3, #12
 8003768:	6033      	str	r3, [r6, #0]
 800376a:	2000      	movs	r0, #0
 800376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376e:	f000 f87d 	bl	800386c <__malloc_lock>
 8003772:	4921      	ldr	r1, [pc, #132]	; (80037f8 <_malloc_r+0xac>)
 8003774:	680a      	ldr	r2, [r1, #0]
 8003776:	4614      	mov	r4, r2
 8003778:	b99c      	cbnz	r4, 80037a2 <_malloc_r+0x56>
 800377a:	4f20      	ldr	r7, [pc, #128]	; (80037fc <_malloc_r+0xb0>)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	b923      	cbnz	r3, 800378a <_malloc_r+0x3e>
 8003780:	4621      	mov	r1, r4
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f862 	bl	800384c <_sbrk_r>
 8003788:	6038      	str	r0, [r7, #0]
 800378a:	4629      	mov	r1, r5
 800378c:	4630      	mov	r0, r6
 800378e:	f000 f85d 	bl	800384c <_sbrk_r>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d123      	bne.n	80037de <_malloc_r+0x92>
 8003796:	230c      	movs	r3, #12
 8003798:	4630      	mov	r0, r6
 800379a:	6033      	str	r3, [r6, #0]
 800379c:	f000 f86c 	bl	8003878 <__malloc_unlock>
 80037a0:	e7e3      	b.n	800376a <_malloc_r+0x1e>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	1b5b      	subs	r3, r3, r5
 80037a6:	d417      	bmi.n	80037d8 <_malloc_r+0x8c>
 80037a8:	2b0b      	cmp	r3, #11
 80037aa:	d903      	bls.n	80037b4 <_malloc_r+0x68>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	441c      	add	r4, r3
 80037b0:	6025      	str	r5, [r4, #0]
 80037b2:	e004      	b.n	80037be <_malloc_r+0x72>
 80037b4:	6863      	ldr	r3, [r4, #4]
 80037b6:	42a2      	cmp	r2, r4
 80037b8:	bf0c      	ite	eq
 80037ba:	600b      	streq	r3, [r1, #0]
 80037bc:	6053      	strne	r3, [r2, #4]
 80037be:	4630      	mov	r0, r6
 80037c0:	f000 f85a 	bl	8003878 <__malloc_unlock>
 80037c4:	f104 000b 	add.w	r0, r4, #11
 80037c8:	1d23      	adds	r3, r4, #4
 80037ca:	f020 0007 	bic.w	r0, r0, #7
 80037ce:	1ac2      	subs	r2, r0, r3
 80037d0:	d0cc      	beq.n	800376c <_malloc_r+0x20>
 80037d2:	1a1b      	subs	r3, r3, r0
 80037d4:	50a3      	str	r3, [r4, r2]
 80037d6:	e7c9      	b.n	800376c <_malloc_r+0x20>
 80037d8:	4622      	mov	r2, r4
 80037da:	6864      	ldr	r4, [r4, #4]
 80037dc:	e7cc      	b.n	8003778 <_malloc_r+0x2c>
 80037de:	1cc4      	adds	r4, r0, #3
 80037e0:	f024 0403 	bic.w	r4, r4, #3
 80037e4:	42a0      	cmp	r0, r4
 80037e6:	d0e3      	beq.n	80037b0 <_malloc_r+0x64>
 80037e8:	1a21      	subs	r1, r4, r0
 80037ea:	4630      	mov	r0, r6
 80037ec:	f000 f82e 	bl	800384c <_sbrk_r>
 80037f0:	3001      	adds	r0, #1
 80037f2:	d1dd      	bne.n	80037b0 <_malloc_r+0x64>
 80037f4:	e7cf      	b.n	8003796 <_malloc_r+0x4a>
 80037f6:	bf00      	nop
 80037f8:	20000098 	.word	0x20000098
 80037fc:	2000009c 	.word	0x2000009c

08003800 <_realloc_r>:
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	4607      	mov	r7, r0
 8003804:	4614      	mov	r4, r2
 8003806:	460e      	mov	r6, r1
 8003808:	b921      	cbnz	r1, 8003814 <_realloc_r+0x14>
 800380a:	4611      	mov	r1, r2
 800380c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003810:	f7ff bf9c 	b.w	800374c <_malloc_r>
 8003814:	b922      	cbnz	r2, 8003820 <_realloc_r+0x20>
 8003816:	f7ff ff4d 	bl	80036b4 <_free_r>
 800381a:	4625      	mov	r5, r4
 800381c:	4628      	mov	r0, r5
 800381e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003820:	f000 f830 	bl	8003884 <_malloc_usable_size_r>
 8003824:	42a0      	cmp	r0, r4
 8003826:	d20f      	bcs.n	8003848 <_realloc_r+0x48>
 8003828:	4621      	mov	r1, r4
 800382a:	4638      	mov	r0, r7
 800382c:	f7ff ff8e 	bl	800374c <_malloc_r>
 8003830:	4605      	mov	r5, r0
 8003832:	2800      	cmp	r0, #0
 8003834:	d0f2      	beq.n	800381c <_realloc_r+0x1c>
 8003836:	4631      	mov	r1, r6
 8003838:	4622      	mov	r2, r4
 800383a:	f7ff ff2d 	bl	8003698 <memcpy>
 800383e:	4631      	mov	r1, r6
 8003840:	4638      	mov	r0, r7
 8003842:	f7ff ff37 	bl	80036b4 <_free_r>
 8003846:	e7e9      	b.n	800381c <_realloc_r+0x1c>
 8003848:	4635      	mov	r5, r6
 800384a:	e7e7      	b.n	800381c <_realloc_r+0x1c>

0800384c <_sbrk_r>:
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	2300      	movs	r3, #0
 8003850:	4d05      	ldr	r5, [pc, #20]	; (8003868 <_sbrk_r+0x1c>)
 8003852:	4604      	mov	r4, r0
 8003854:	4608      	mov	r0, r1
 8003856:	602b      	str	r3, [r5, #0]
 8003858:	f7fd fe86 	bl	8001568 <_sbrk>
 800385c:	1c43      	adds	r3, r0, #1
 800385e:	d102      	bne.n	8003866 <_sbrk_r+0x1a>
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	b103      	cbz	r3, 8003866 <_sbrk_r+0x1a>
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	20000374 	.word	0x20000374

0800386c <__malloc_lock>:
 800386c:	4801      	ldr	r0, [pc, #4]	; (8003874 <__malloc_lock+0x8>)
 800386e:	f7ff bf03 	b.w	8003678 <__retarget_lock_acquire_recursive>
 8003872:	bf00      	nop
 8003874:	2000037c 	.word	0x2000037c

08003878 <__malloc_unlock>:
 8003878:	4801      	ldr	r0, [pc, #4]	; (8003880 <__malloc_unlock+0x8>)
 800387a:	f7ff befe 	b.w	800367a <__retarget_lock_release_recursive>
 800387e:	bf00      	nop
 8003880:	2000037c 	.word	0x2000037c

08003884 <_malloc_usable_size_r>:
 8003884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003888:	1f18      	subs	r0, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfbc      	itt	lt
 800388e:	580b      	ldrlt	r3, [r1, r0]
 8003890:	18c0      	addlt	r0, r0, r3
 8003892:	4770      	bx	lr

08003894 <fmod>:
 8003894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003898:	461f      	mov	r7, r3
 800389a:	4680      	mov	r8, r0
 800389c:	4689      	mov	r9, r1
 800389e:	4616      	mov	r6, r2
 80038a0:	f000 f82e 	bl	8003900 <__ieee754_fmod>
 80038a4:	4b15      	ldr	r3, [pc, #84]	; (80038fc <fmod+0x68>)
 80038a6:	4604      	mov	r4, r0
 80038a8:	f993 3000 	ldrsb.w	r3, [r3]
 80038ac:	460d      	mov	r5, r1
 80038ae:	3301      	adds	r3, #1
 80038b0:	d020      	beq.n	80038f4 <fmod+0x60>
 80038b2:	4632      	mov	r2, r6
 80038b4:	463b      	mov	r3, r7
 80038b6:	4630      	mov	r0, r6
 80038b8:	4639      	mov	r1, r7
 80038ba:	f7fd f8a5 	bl	8000a08 <__aeabi_dcmpun>
 80038be:	b9c8      	cbnz	r0, 80038f4 <fmod+0x60>
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fd f89e 	bl	8000a08 <__aeabi_dcmpun>
 80038cc:	b990      	cbnz	r0, 80038f4 <fmod+0x60>
 80038ce:	2200      	movs	r2, #0
 80038d0:	2300      	movs	r3, #0
 80038d2:	4630      	mov	r0, r6
 80038d4:	4639      	mov	r1, r7
 80038d6:	f7fd f865 	bl	80009a4 <__aeabi_dcmpeq>
 80038da:	b158      	cbz	r0, 80038f4 <fmod+0x60>
 80038dc:	f7ff f9c0 	bl	8002c60 <__errno>
 80038e0:	2321      	movs	r3, #33	; 0x21
 80038e2:	2200      	movs	r2, #0
 80038e4:	6003      	str	r3, [r0, #0]
 80038e6:	2300      	movs	r3, #0
 80038e8:	4610      	mov	r0, r2
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7fc ff1c 	bl	8000728 <__aeabi_ddiv>
 80038f0:	4604      	mov	r4, r0
 80038f2:	460d      	mov	r5, r1
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038fc:	20000070 	.word	0x20000070

08003900 <__ieee754_fmod>:
 8003900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003904:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8003908:	4607      	mov	r7, r0
 800390a:	461d      	mov	r5, r3
 800390c:	4618      	mov	r0, r3
 800390e:	ea58 0302 	orrs.w	r3, r8, r2
 8003912:	460e      	mov	r6, r1
 8003914:	4614      	mov	r4, r2
 8003916:	4694      	mov	ip, r2
 8003918:	4696      	mov	lr, r2
 800391a:	d00d      	beq.n	8003938 <__ieee754_fmod+0x38>
 800391c:	4a7b      	ldr	r2, [pc, #492]	; (8003b0c <__ieee754_fmod+0x20c>)
 800391e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003922:	4293      	cmp	r3, r2
 8003924:	468a      	mov	sl, r1
 8003926:	dc07      	bgt.n	8003938 <__ieee754_fmod+0x38>
 8003928:	4262      	negs	r2, r4
 800392a:	4979      	ldr	r1, [pc, #484]	; (8003b10 <__ieee754_fmod+0x210>)
 800392c:	4322      	orrs	r2, r4
 800392e:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 8003932:	428a      	cmp	r2, r1
 8003934:	460a      	mov	r2, r1
 8003936:	d90c      	bls.n	8003952 <__ieee754_fmod+0x52>
 8003938:	4603      	mov	r3, r0
 800393a:	4622      	mov	r2, r4
 800393c:	4638      	mov	r0, r7
 800393e:	4631      	mov	r1, r6
 8003940:	f7fc fdc8 	bl	80004d4 <__aeabi_dmul>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	f7fc feee 	bl	8000728 <__aeabi_ddiv>
 800394c:	4607      	mov	r7, r0
 800394e:	460e      	mov	r6, r1
 8003950:	e00f      	b.n	8003972 <__ieee754_fmod+0x72>
 8003952:	4543      	cmp	r3, r8
 8003954:	46b9      	mov	r9, r7
 8003956:	4639      	mov	r1, r7
 8003958:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800395c:	dc0d      	bgt.n	800397a <__ieee754_fmod+0x7a>
 800395e:	db08      	blt.n	8003972 <__ieee754_fmod+0x72>
 8003960:	4567      	cmp	r7, ip
 8003962:	d306      	bcc.n	8003972 <__ieee754_fmod+0x72>
 8003964:	d109      	bne.n	800397a <__ieee754_fmod+0x7a>
 8003966:	4a6b      	ldr	r2, [pc, #428]	; (8003b14 <__ieee754_fmod+0x214>)
 8003968:	0fe4      	lsrs	r4, r4, #31
 800396a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 800396e:	e9d4 7600 	ldrd	r7, r6, [r4]
 8003972:	4638      	mov	r0, r7
 8003974:	4631      	mov	r1, r6
 8003976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397a:	ea1a 0f02 	tst.w	sl, r2
 800397e:	d14a      	bne.n	8003a16 <__ieee754_fmod+0x116>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d141      	bne.n	8003a08 <__ieee754_fmod+0x108>
 8003984:	464a      	mov	r2, r9
 8003986:	4864      	ldr	r0, [pc, #400]	; (8003b18 <__ieee754_fmod+0x218>)
 8003988:	2a00      	cmp	r2, #0
 800398a:	dc3a      	bgt.n	8003a02 <__ieee754_fmod+0x102>
 800398c:	4a60      	ldr	r2, [pc, #384]	; (8003b10 <__ieee754_fmod+0x210>)
 800398e:	402a      	ands	r2, r5
 8003990:	2a00      	cmp	r2, #0
 8003992:	d14f      	bne.n	8003a34 <__ieee754_fmod+0x134>
 8003994:	f1b8 0f00 	cmp.w	r8, #0
 8003998:	d144      	bne.n	8003a24 <__ieee754_fmod+0x124>
 800399a:	4666      	mov	r6, ip
 800399c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80039a0:	2e00      	cmp	r6, #0
 80039a2:	dc3c      	bgt.n	8003a1e <__ieee754_fmod+0x11e>
 80039a4:	4e5d      	ldr	r6, [pc, #372]	; (8003b1c <__ieee754_fmod+0x21c>)
 80039a6:	42b0      	cmp	r0, r6
 80039a8:	db49      	blt.n	8003a3e <__ieee754_fmod+0x13e>
 80039aa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80039ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b2:	4e5a      	ldr	r6, [pc, #360]	; (8003b1c <__ieee754_fmod+0x21c>)
 80039b4:	42b2      	cmp	r2, r6
 80039b6:	db54      	blt.n	8003a62 <__ieee754_fmod+0x162>
 80039b8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80039bc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 80039c0:	1a80      	subs	r0, r0, r2
 80039c2:	1b5e      	subs	r6, r3, r5
 80039c4:	eba1 070e 	sub.w	r7, r1, lr
 80039c8:	2800      	cmp	r0, #0
 80039ca:	d161      	bne.n	8003a90 <__ieee754_fmod+0x190>
 80039cc:	4571      	cmp	r1, lr
 80039ce:	bf38      	it	cc
 80039d0:	f106 36ff 	addcc.w	r6, r6, #4294967295
 80039d4:	2e00      	cmp	r6, #0
 80039d6:	bfa4      	itt	ge
 80039d8:	4639      	movge	r1, r7
 80039da:	4633      	movge	r3, r6
 80039dc:	ea53 0001 	orrs.w	r0, r3, r1
 80039e0:	d0c1      	beq.n	8003966 <__ieee754_fmod+0x66>
 80039e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e6:	db68      	blt.n	8003aba <__ieee754_fmod+0x1ba>
 80039e8:	484c      	ldr	r0, [pc, #304]	; (8003b1c <__ieee754_fmod+0x21c>)
 80039ea:	4282      	cmp	r2, r0
 80039ec:	db6b      	blt.n	8003ac6 <__ieee754_fmod+0x1c6>
 80039ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80039f2:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80039f6:	431c      	orrs	r4, r3
 80039f8:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 80039fc:	460f      	mov	r7, r1
 80039fe:	464e      	mov	r6, r9
 8003a00:	e7b7      	b.n	8003972 <__ieee754_fmod+0x72>
 8003a02:	3801      	subs	r0, #1
 8003a04:	0052      	lsls	r2, r2, #1
 8003a06:	e7bf      	b.n	8003988 <__ieee754_fmod+0x88>
 8003a08:	4844      	ldr	r0, [pc, #272]	; (8003b1c <__ieee754_fmod+0x21c>)
 8003a0a:	02da      	lsls	r2, r3, #11
 8003a0c:	2a00      	cmp	r2, #0
 8003a0e:	ddbd      	ble.n	800398c <__ieee754_fmod+0x8c>
 8003a10:	3801      	subs	r0, #1
 8003a12:	0052      	lsls	r2, r2, #1
 8003a14:	e7fa      	b.n	8003a0c <__ieee754_fmod+0x10c>
 8003a16:	1518      	asrs	r0, r3, #20
 8003a18:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003a1c:	e7b6      	b.n	800398c <__ieee754_fmod+0x8c>
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	0076      	lsls	r6, r6, #1
 8003a22:	e7bd      	b.n	80039a0 <__ieee754_fmod+0xa0>
 8003a24:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <__ieee754_fmod+0x21c>)
 8003a26:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 8003a2a:	2e00      	cmp	r6, #0
 8003a2c:	ddba      	ble.n	80039a4 <__ieee754_fmod+0xa4>
 8003a2e:	3a01      	subs	r2, #1
 8003a30:	0076      	lsls	r6, r6, #1
 8003a32:	e7fa      	b.n	8003a2a <__ieee754_fmod+0x12a>
 8003a34:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003a38:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003a3c:	e7b2      	b.n	80039a4 <__ieee754_fmod+0xa4>
 8003a3e:	1a31      	subs	r1, r6, r0
 8003a40:	291f      	cmp	r1, #31
 8003a42:	dc08      	bgt.n	8003a56 <__ieee754_fmod+0x156>
 8003a44:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 8003a48:	408b      	lsls	r3, r1
 8003a4a:	fa29 f606 	lsr.w	r6, r9, r6
 8003a4e:	4333      	orrs	r3, r6
 8003a50:	fa09 f101 	lsl.w	r1, r9, r1
 8003a54:	e7ad      	b.n	80039b2 <__ieee754_fmod+0xb2>
 8003a56:	4b32      	ldr	r3, [pc, #200]	; (8003b20 <__ieee754_fmod+0x220>)
 8003a58:	2100      	movs	r1, #0
 8003a5a:	1a1b      	subs	r3, r3, r0
 8003a5c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a60:	e7a7      	b.n	80039b2 <__ieee754_fmod+0xb2>
 8003a62:	eba6 0e02 	sub.w	lr, r6, r2
 8003a66:	f1be 0f1f 	cmp.w	lr, #31
 8003a6a:	dc0a      	bgt.n	8003a82 <__ieee754_fmod+0x182>
 8003a6c:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8003a70:	fa08 f80e 	lsl.w	r8, r8, lr
 8003a74:	fa2c f505 	lsr.w	r5, ip, r5
 8003a78:	ea45 0508 	orr.w	r5, r5, r8
 8003a7c:	fa0c fe0e 	lsl.w	lr, ip, lr
 8003a80:	e79e      	b.n	80039c0 <__ieee754_fmod+0xc0>
 8003a82:	4d27      	ldr	r5, [pc, #156]	; (8003b20 <__ieee754_fmod+0x220>)
 8003a84:	f04f 0e00 	mov.w	lr, #0
 8003a88:	1aad      	subs	r5, r5, r2
 8003a8a:	fa0c f505 	lsl.w	r5, ip, r5
 8003a8e:	e797      	b.n	80039c0 <__ieee754_fmod+0xc0>
 8003a90:	4571      	cmp	r1, lr
 8003a92:	bf38      	it	cc
 8003a94:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8003a98:	2e00      	cmp	r6, #0
 8003a9a:	da05      	bge.n	8003aa8 <__ieee754_fmod+0x1a8>
 8003a9c:	0fce      	lsrs	r6, r1, #31
 8003a9e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8003aa2:	0049      	lsls	r1, r1, #1
 8003aa4:	3801      	subs	r0, #1
 8003aa6:	e78c      	b.n	80039c2 <__ieee754_fmod+0xc2>
 8003aa8:	ea56 0307 	orrs.w	r3, r6, r7
 8003aac:	f43f af5b 	beq.w	8003966 <__ieee754_fmod+0x66>
 8003ab0:	0ffb      	lsrs	r3, r7, #31
 8003ab2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8003ab6:	0079      	lsls	r1, r7, #1
 8003ab8:	e7f4      	b.n	8003aa4 <__ieee754_fmod+0x1a4>
 8003aba:	0fc8      	lsrs	r0, r1, #31
 8003abc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003ac0:	0049      	lsls	r1, r1, #1
 8003ac2:	3a01      	subs	r2, #1
 8003ac4:	e78d      	b.n	80039e2 <__ieee754_fmod+0xe2>
 8003ac6:	1a80      	subs	r0, r0, r2
 8003ac8:	2814      	cmp	r0, #20
 8003aca:	dc0a      	bgt.n	8003ae2 <__ieee754_fmod+0x1e2>
 8003acc:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003ad0:	fa03 f202 	lsl.w	r2, r3, r2
 8003ad4:	40c1      	lsrs	r1, r0
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	4103      	asrs	r3, r0
 8003ada:	4610      	mov	r0, r2
 8003adc:	ea43 0104 	orr.w	r1, r3, r4
 8003ae0:	e734      	b.n	800394c <__ieee754_fmod+0x4c>
 8003ae2:	281f      	cmp	r0, #31
 8003ae4:	dc07      	bgt.n	8003af6 <__ieee754_fmod+0x1f6>
 8003ae6:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8003aea:	40c1      	lsrs	r1, r0
 8003aec:	fa03 f202 	lsl.w	r2, r3, r2
 8003af0:	430a      	orrs	r2, r1
 8003af2:	4623      	mov	r3, r4
 8003af4:	e7f1      	b.n	8003ada <__ieee754_fmod+0x1da>
 8003af6:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8003afa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003afe:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8003b02:	32e2      	adds	r2, #226	; 0xe2
 8003b04:	fa43 f202 	asr.w	r2, r3, r2
 8003b08:	e7f3      	b.n	8003af2 <__ieee754_fmod+0x1f2>
 8003b0a:	bf00      	nop
 8003b0c:	7fefffff 	.word	0x7fefffff
 8003b10:	7ff00000 	.word	0x7ff00000
 8003b14:	08003d48 	.word	0x08003d48
 8003b18:	fffffbed 	.word	0xfffffbed
 8003b1c:	fffffc02 	.word	0xfffffc02
 8003b20:	fffffbe2 	.word	0xfffffbe2

08003b24 <_init>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr

08003b30 <_fini>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr
